'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="MBBS")>  _
Partial Public Class MBBSDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAdopcion(instance As Adopcion)
    End Sub
  Partial Private Sub UpdateAdopcion(instance As Adopcion)
    End Sub
  Partial Private Sub DeleteAdopcion(instance As Adopcion)
    End Sub
  Partial Private Sub InsertAdopcionPago(instance As AdopcionPago)
    End Sub
  Partial Private Sub UpdateAdopcionPago(instance As AdopcionPago)
    End Sub
  Partial Private Sub DeleteAdopcionPago(instance As AdopcionPago)
    End Sub
  Partial Private Sub InsertAuditoriaLog(instance As AuditoriaLog)
    End Sub
  Partial Private Sub UpdateAuditoriaLog(instance As AuditoriaLog)
    End Sub
  Partial Private Sub DeleteAuditoriaLog(instance As AuditoriaLog)
    End Sub
  Partial Private Sub InsertBeneficiado(instance As Beneficiado)
    End Sub
  Partial Private Sub UpdateBeneficiado(instance As Beneficiado)
    End Sub
  Partial Private Sub DeleteBeneficiado(instance As Beneficiado)
    End Sub
  Partial Private Sub InsertBeneficiadoHermano(instance As BeneficiadoHermano)
    End Sub
  Partial Private Sub UpdateBeneficiadoHermano(instance As BeneficiadoHermano)
    End Sub
  Partial Private Sub DeleteBeneficiadoHermano(instance As BeneficiadoHermano)
    End Sub
  Partial Private Sub InsertBeneficiadoTutor(instance As BeneficiadoTutor)
    End Sub
  Partial Private Sub UpdateBeneficiadoTutor(instance As BeneficiadoTutor)
    End Sub
  Partial Private Sub DeleteBeneficiadoTutor(instance As BeneficiadoTutor)
    End Sub
  Partial Private Sub InsertCarta(instance As Carta)
    End Sub
  Partial Private Sub UpdateCarta(instance As Carta)
    End Sub
  Partial Private Sub DeleteCarta(instance As Carta)
    End Sub
  Partial Private Sub InsertCasaBeneficiado(instance As CasaBeneficiado)
    End Sub
  Partial Private Sub UpdateCasaBeneficiado(instance As CasaBeneficiado)
    End Sub
  Partial Private Sub DeleteCasaBeneficiado(instance As CasaBeneficiado)
    End Sub
  Partial Private Sub InsertEnfermedadPadecimiento(instance As EnfermedadPadecimiento)
    End Sub
  Partial Private Sub UpdateEnfermedadPadecimiento(instance As EnfermedadPadecimiento)
    End Sub
  Partial Private Sub DeleteEnfermedadPadecimiento(instance As EnfermedadPadecimiento)
    End Sub
  Partial Private Sub InsertEstadoAdopcion(instance As EstadoAdopcion)
    End Sub
  Partial Private Sub UpdateEstadoAdopcion(instance As EstadoAdopcion)
    End Sub
  Partial Private Sub DeleteEstadoAdopcion(instance As EstadoAdopcion)
    End Sub
  Partial Private Sub InsertEstadoBeneficiado(instance As EstadoBeneficiado)
    End Sub
  Partial Private Sub UpdateEstadoBeneficiado(instance As EstadoBeneficiado)
    End Sub
  Partial Private Sub DeleteEstadoBeneficiado(instance As EstadoBeneficiado)
    End Sub
  Partial Private Sub InsertEstadoUsuario(instance As EstadoUsuario)
    End Sub
  Partial Private Sub UpdateEstadoUsuario(instance As EstadoUsuario)
    End Sub
  Partial Private Sub DeleteEstadoUsuario(instance As EstadoUsuario)
    End Sub
  Partial Private Sub InsertGradoCursado(instance As GradoCursado)
    End Sub
  Partial Private Sub UpdateGradoCursado(instance As GradoCursado)
    End Sub
  Partial Private Sub DeleteGradoCursado(instance As GradoCursado)
    End Sub
  Partial Private Sub InsertHermano(instance As Hermano)
    End Sub
  Partial Private Sub UpdateHermano(instance As Hermano)
    End Sub
  Partial Private Sub DeleteHermano(instance As Hermano)
    End Sub
  Partial Private Sub InsertIglesia(instance As Iglesia)
    End Sub
  Partial Private Sub UpdateIglesia(instance As Iglesia)
    End Sub
  Partial Private Sub DeleteIglesia(instance As Iglesia)
    End Sub
  Partial Private Sub InsertInstitucion(instance As Institucion)
    End Sub
  Partial Private Sub UpdateInstitucion(instance As Institucion)
    End Sub
  Partial Private Sub DeleteInstitucion(instance As Institucion)
    End Sub
  Partial Private Sub InsertInteresesBeneficiado(instance As InteresesBeneficiado)
    End Sub
  Partial Private Sub UpdateInteresesBeneficiado(instance As InteresesBeneficiado)
    End Sub
  Partial Private Sub DeleteInteresesBeneficiado(instance As InteresesBeneficiado)
    End Sub
  Partial Private Sub InsertLugar(instance As Lugar)
    End Sub
  Partial Private Sub UpdateLugar(instance As Lugar)
    End Sub
  Partial Private Sub DeleteLugar(instance As Lugar)
    End Sub
  Partial Private Sub InsertNacionalidad(instance As Nacionalidad)
    End Sub
  Partial Private Sub UpdateNacionalidad(instance As Nacionalidad)
    End Sub
  Partial Private Sub DeleteNacionalidad(instance As Nacionalidad)
    End Sub
  Partial Private Sub InsertOficioProfesion(instance As OficioProfesion)
    End Sub
  Partial Private Sub UpdateOficioProfesion(instance As OficioProfesion)
    End Sub
  Partial Private Sub DeleteOficioProfesion(instance As OficioProfesion)
    End Sub
  Partial Private Sub InsertOfrenda(instance As Ofrenda)
    End Sub
  Partial Private Sub UpdateOfrenda(instance As Ofrenda)
    End Sub
  Partial Private Sub DeleteOfrenda(instance As Ofrenda)
    End Sub
  Partial Private Sub InsertPai(instance As Pai)
    End Sub
  Partial Private Sub UpdatePai(instance As Pai)
    End Sub
  Partial Private Sub DeletePai(instance As Pai)
    End Sub
  Partial Private Sub InsertParentesco(instance As Parentesco)
    End Sub
  Partial Private Sub UpdateParentesco(instance As Parentesco)
    End Sub
  Partial Private Sub DeleteParentesco(instance As Parentesco)
    End Sub
  Partial Private Sub InsertRemitenteDestinatario(instance As RemitenteDestinatario)
    End Sub
  Partial Private Sub UpdateRemitenteDestinatario(instance As RemitenteDestinatario)
    End Sub
  Partial Private Sub DeleteRemitenteDestinatario(instance As RemitenteDestinatario)
    End Sub
  Partial Private Sub InsertSexo(instance As Sexo)
    End Sub
  Partial Private Sub UpdateSexo(instance As Sexo)
    End Sub
  Partial Private Sub DeleteSexo(instance As Sexo)
    End Sub
  Partial Private Sub InsertSponsor(instance As Sponsor)
    End Sub
  Partial Private Sub UpdateSponsor(instance As Sponsor)
    End Sub
  Partial Private Sub DeleteSponsor(instance As Sponsor)
    End Sub
  Partial Private Sub InsertTipoCarta(instance As TipoCarta)
    End Sub
  Partial Private Sub UpdateTipoCarta(instance As TipoCarta)
    End Sub
  Partial Private Sub DeleteTipoCarta(instance As TipoCarta)
    End Sub
  Partial Private Sub InsertTipoCasa(instance As TipoCasa)
    End Sub
  Partial Private Sub UpdateTipoCasa(instance As TipoCasa)
    End Sub
  Partial Private Sub DeleteTipoCasa(instance As TipoCasa)
    End Sub
  Partial Private Sub InsertTipoInstitucion(instance As TipoInstitucion)
    End Sub
  Partial Private Sub UpdateTipoInstitucion(instance As TipoInstitucion)
    End Sub
  Partial Private Sub DeleteTipoInstitucion(instance As TipoInstitucion)
    End Sub
  Partial Private Sub InsertTipoOfrenda(instance As TipoOfrenda)
    End Sub
  Partial Private Sub UpdateTipoOfrenda(instance As TipoOfrenda)
    End Sub
  Partial Private Sub DeleteTipoOfrenda(instance As TipoOfrenda)
    End Sub
  Partial Private Sub InsertTipoPagoAdopcion(instance As TipoPagoAdopcion)
    End Sub
  Partial Private Sub UpdateTipoPagoAdopcion(instance As TipoPagoAdopcion)
    End Sub
  Partial Private Sub DeleteTipoPagoAdopcion(instance As TipoPagoAdopcion)
    End Sub
  Partial Private Sub InsertTipoSponsor(instance As TipoSponsor)
    End Sub
  Partial Private Sub UpdateTipoSponsor(instance As TipoSponsor)
    End Sub
  Partial Private Sub DeleteTipoSponsor(instance As TipoSponsor)
    End Sub
  Partial Private Sub InsertTutor(instance As Tutor)
    End Sub
  Partial Private Sub UpdateTutor(instance As Tutor)
    End Sub
  Partial Private Sub DeleteTutor(instance As Tutor)
    End Sub
  Partial Private Sub InsertUsuario(instance As Usuario)
    End Sub
  Partial Private Sub UpdateUsuario(instance As Usuario)
    End Sub
  Partial Private Sub DeleteUsuario(instance As Usuario)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Misión.My.MySettings.Default.MBBSConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Adopcions() As System.Data.Linq.Table(Of Adopcion)
		Get
			Return Me.GetTable(Of Adopcion)
		End Get
	End Property
	
	Public ReadOnly Property AdopcionPagos() As System.Data.Linq.Table(Of AdopcionPago)
		Get
			Return Me.GetTable(Of AdopcionPago)
		End Get
	End Property
	
	Public ReadOnly Property AuditoriaLogs() As System.Data.Linq.Table(Of AuditoriaLog)
		Get
			Return Me.GetTable(Of AuditoriaLog)
		End Get
	End Property
	
	Public ReadOnly Property Beneficiados() As System.Data.Linq.Table(Of Beneficiado)
		Get
			Return Me.GetTable(Of Beneficiado)
		End Get
	End Property
	
	Public ReadOnly Property BeneficiadoHermanos() As System.Data.Linq.Table(Of BeneficiadoHermano)
		Get
			Return Me.GetTable(Of BeneficiadoHermano)
		End Get
	End Property
	
	Public ReadOnly Property BeneficiadoTutors() As System.Data.Linq.Table(Of BeneficiadoTutor)
		Get
			Return Me.GetTable(Of BeneficiadoTutor)
		End Get
	End Property
	
	Public ReadOnly Property Cartas() As System.Data.Linq.Table(Of Carta)
		Get
			Return Me.GetTable(Of Carta)
		End Get
	End Property
	
	Public ReadOnly Property CasaBeneficiados() As System.Data.Linq.Table(Of CasaBeneficiado)
		Get
			Return Me.GetTable(Of CasaBeneficiado)
		End Get
	End Property
	
	Public ReadOnly Property EnfermedadPadecimientos() As System.Data.Linq.Table(Of EnfermedadPadecimiento)
		Get
			Return Me.GetTable(Of EnfermedadPadecimiento)
		End Get
	End Property
	
	Public ReadOnly Property EstadoAdopcions() As System.Data.Linq.Table(Of EstadoAdopcion)
		Get
			Return Me.GetTable(Of EstadoAdopcion)
		End Get
	End Property
	
	Public ReadOnly Property EstadoBeneficiados() As System.Data.Linq.Table(Of EstadoBeneficiado)
		Get
			Return Me.GetTable(Of EstadoBeneficiado)
		End Get
	End Property
	
	Public ReadOnly Property EstadoUsuarios() As System.Data.Linq.Table(Of EstadoUsuario)
		Get
			Return Me.GetTable(Of EstadoUsuario)
		End Get
	End Property
	
	Public ReadOnly Property GradoCursados() As System.Data.Linq.Table(Of GradoCursado)
		Get
			Return Me.GetTable(Of GradoCursado)
		End Get
	End Property
	
	Public ReadOnly Property Hermanos() As System.Data.Linq.Table(Of Hermano)
		Get
			Return Me.GetTable(Of Hermano)
		End Get
	End Property
	
	Public ReadOnly Property Iglesias() As System.Data.Linq.Table(Of Iglesia)
		Get
			Return Me.GetTable(Of Iglesia)
		End Get
	End Property
	
	Public ReadOnly Property Institucions() As System.Data.Linq.Table(Of Institucion)
		Get
			Return Me.GetTable(Of Institucion)
		End Get
	End Property
	
	Public ReadOnly Property InteresesBeneficiados() As System.Data.Linq.Table(Of InteresesBeneficiado)
		Get
			Return Me.GetTable(Of InteresesBeneficiado)
		End Get
	End Property
	
	Public ReadOnly Property Lugars() As System.Data.Linq.Table(Of Lugar)
		Get
			Return Me.GetTable(Of Lugar)
		End Get
	End Property
	
	Public ReadOnly Property Nacionalidads() As System.Data.Linq.Table(Of Nacionalidad)
		Get
			Return Me.GetTable(Of Nacionalidad)
		End Get
	End Property
	
	Public ReadOnly Property OficioProfesions() As System.Data.Linq.Table(Of OficioProfesion)
		Get
			Return Me.GetTable(Of OficioProfesion)
		End Get
	End Property
	
	Public ReadOnly Property Ofrendas() As System.Data.Linq.Table(Of Ofrenda)
		Get
			Return Me.GetTable(Of Ofrenda)
		End Get
	End Property
	
	Public ReadOnly Property Pais() As System.Data.Linq.Table(Of Pai)
		Get
			Return Me.GetTable(Of Pai)
		End Get
	End Property
	
	Public ReadOnly Property Parentescos() As System.Data.Linq.Table(Of Parentesco)
		Get
			Return Me.GetTable(Of Parentesco)
		End Get
	End Property
	
	Public ReadOnly Property RemitenteDestinatarios() As System.Data.Linq.Table(Of RemitenteDestinatario)
		Get
			Return Me.GetTable(Of RemitenteDestinatario)
		End Get
	End Property
	
	Public ReadOnly Property Sexos() As System.Data.Linq.Table(Of Sexo)
		Get
			Return Me.GetTable(Of Sexo)
		End Get
	End Property
	
	Public ReadOnly Property Sponsors() As System.Data.Linq.Table(Of Sponsor)
		Get
			Return Me.GetTable(Of Sponsor)
		End Get
	End Property
	
	Public ReadOnly Property TipoCartas() As System.Data.Linq.Table(Of TipoCarta)
		Get
			Return Me.GetTable(Of TipoCarta)
		End Get
	End Property
	
	Public ReadOnly Property TipoCasas() As System.Data.Linq.Table(Of TipoCasa)
		Get
			Return Me.GetTable(Of TipoCasa)
		End Get
	End Property
	
	Public ReadOnly Property TipoInstitucions() As System.Data.Linq.Table(Of TipoInstitucion)
		Get
			Return Me.GetTable(Of TipoInstitucion)
		End Get
	End Property
	
	Public ReadOnly Property TipoOfrendas() As System.Data.Linq.Table(Of TipoOfrenda)
		Get
			Return Me.GetTable(Of TipoOfrenda)
		End Get
	End Property
	
	Public ReadOnly Property TipoPagoAdopcions() As System.Data.Linq.Table(Of TipoPagoAdopcion)
		Get
			Return Me.GetTable(Of TipoPagoAdopcion)
		End Get
	End Property
	
	Public ReadOnly Property TipoSponsors() As System.Data.Linq.Table(Of TipoSponsor)
		Get
			Return Me.GetTable(Of TipoSponsor)
		End Get
	End Property
	
	Public ReadOnly Property Tutors() As System.Data.Linq.Table(Of Tutor)
		Get
			Return Me.GetTable(Of Tutor)
		End Get
	End Property
	
	Public ReadOnly Property Usuarios() As System.Data.Linq.Table(Of Usuario)
		Get
			Return Me.GetTable(Of Usuario)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Sp_ExisteUsuario")>  _
	Public Function Sp_ExisteUsuario(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NombreUsuario", DbType:="NVarChar(25)")> ByVal nombreUsuario As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Contraseña", DbType:="NVarChar(40)")> ByVal contraseña As String) As ISingleResult(Of Sp_ExisteUsuarioResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nombreUsuario, contraseña)
		Return CType(result.ReturnValue,ISingleResult(Of Sp_ExisteUsuarioResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.sp_MostrarID")>  _
	Public Function sp_MostrarID(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(25)")> ByVal nombreusuario As String) As ISingleResult(Of sp_MostrarIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), nombreusuario)
		Return CType(result.ReturnValue,ISingleResult(Of sp_MostrarIDResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Adopcion")>  _
Partial Public Class Adopcion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdAdopcion As Integer
	
	Private _FechaAdopcion As Date
	
	Private _Observacion As String
	
	Private _Valor As String
	
	Private _IdBeneficiado As Integer
	
	Private _IdSponsor As Integer
	
	Private _IdTipoPagoAdopcion As Integer
	
	Private _IdEstadoAdopcion As Integer
	
	Private _IdUsuario As Integer
	
	Private _AdopcionPagos As EntitySet(Of AdopcionPago)
	
	Private _Cartas As EntitySet(Of Carta)
	
	Private _Ofrendas As EntitySet(Of Ofrenda)
	
	Private _Beneficiado As EntityRef(Of Beneficiado)
	
	Private _EstadoAdopcion As EntityRef(Of EstadoAdopcion)
	
	Private _Sponsor As EntityRef(Of Sponsor)
	
	Private _TipoPagoAdopcion As EntityRef(Of TipoPagoAdopcion)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAdopcionChanged()
    End Sub
    Partial Private Sub OnFechaAdopcionChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAdopcionChanged()
    End Sub
    Partial Private Sub OnObservacionChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    Partial Private Sub OnIdSponsorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSponsorChanged()
    End Sub
    Partial Private Sub OnIdTipoPagoAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoPagoAdopcionChanged()
    End Sub
    Partial Private Sub OnIdEstadoAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoAdopcionChanged()
    End Sub
    Partial Private Sub OnIdUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AdopcionPagos = New EntitySet(Of AdopcionPago)(AddressOf Me.attach_AdopcionPagos, AddressOf Me.detach_AdopcionPagos)
		Me._Cartas = New EntitySet(Of Carta)(AddressOf Me.attach_Cartas, AddressOf Me.detach_Cartas)
		Me._Ofrendas = New EntitySet(Of Ofrenda)(AddressOf Me.attach_Ofrendas, AddressOf Me.detach_Ofrendas)
		Me._Beneficiado = CType(Nothing, EntityRef(Of Beneficiado))
		Me._EstadoAdopcion = CType(Nothing, EntityRef(Of EstadoAdopcion))
		Me._Sponsor = CType(Nothing, EntityRef(Of Sponsor))
		Me._TipoPagoAdopcion = CType(Nothing, EntityRef(Of TipoPagoAdopcion))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAdopcion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdAdopcion() As Integer
		Get
			Return Me._IdAdopcion
		End Get
		Set
			If ((Me._IdAdopcion = value)  _
						= false) Then
				Me.OnIdAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdAdopcion = value
				Me.SendPropertyChanged("IdAdopcion")
				Me.OnIdAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAdopcion", DbType:="Date NOT NULL")>  _
	Public Property FechaAdopcion() As Date
		Get
			Return Me._FechaAdopcion
		End Get
		Set
			If ((Me._FechaAdopcion = value)  _
						= false) Then
				Me.OnFechaAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._FechaAdopcion = value
				Me.SendPropertyChanged("FechaAdopcion")
				Me.OnFechaAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observacion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Observacion() As String
		Get
			Return Me._Observacion
		End Get
		Set
			If (String.Equals(Me._Observacion, value) = false) Then
				Me.OnObservacionChanging(value)
				Me.SendPropertyChanging
				Me._Observacion = value
				Me.SendPropertyChanged("Observacion")
				Me.OnObservacionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				If Me._Beneficiado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSponsor", DbType:="Int NOT NULL")>  _
	Public Property IdSponsor() As Integer
		Get
			Return Me._IdSponsor
		End Get
		Set
			If ((Me._IdSponsor = value)  _
						= false) Then
				If Me._Sponsor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSponsorChanging(value)
				Me.SendPropertyChanging
				Me._IdSponsor = value
				Me.SendPropertyChanged("IdSponsor")
				Me.OnIdSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoPagoAdopcion", DbType:="Int NOT NULL")>  _
	Public Property IdTipoPagoAdopcion() As Integer
		Get
			Return Me._IdTipoPagoAdopcion
		End Get
		Set
			If ((Me._IdTipoPagoAdopcion = value)  _
						= false) Then
				If Me._TipoPagoAdopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoPagoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoPagoAdopcion = value
				Me.SendPropertyChanged("IdTipoPagoAdopcion")
				Me.OnIdTipoPagoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoAdopcion", DbType:="Int NOT NULL")>  _
	Public Property IdEstadoAdopcion() As Integer
		Get
			Return Me._IdEstadoAdopcion
		End Get
		Set
			If ((Me._IdEstadoAdopcion = value)  _
						= false) Then
				If Me._EstadoAdopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEstadoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoAdopcion = value
				Me.SendPropertyChanged("IdEstadoAdopcion")
				Me.OnIdEstadoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuario = value
				Me.SendPropertyChanged("IdUsuario")
				Me.OnIdUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_AdopcionPago", Storage:="_AdopcionPagos", ThisKey:="IdAdopcion", OtherKey:="Idadopcion")>  _
	Public Property AdopcionPagos() As EntitySet(Of AdopcionPago)
		Get
			Return Me._AdopcionPagos
		End Get
		Set
			Me._AdopcionPagos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_Carta", Storage:="_Cartas", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion")>  _
	Public Property Cartas() As EntitySet(Of Carta)
		Get
			Return Me._Cartas
		End Get
		Set
			Me._Cartas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_Ofrenda", Storage:="_Ofrendas", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion")>  _
	Public Property Ofrendas() As EntitySet(Of Ofrenda)
		Get
			Return Me._Ofrendas
		End Get
		Set
			Me._Ofrendas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_Adopcion", Storage:="_Beneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado", IsForeignKey:=true)>  _
	Public Property Beneficiado() As Beneficiado
		Get
			Return Me._Beneficiado.Entity
		End Get
		Set
			Dim previousValue As Beneficiado = Me._Beneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Beneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Beneficiado.Entity = Nothing
					previousValue.Adopcions.Remove(Me)
				End If
				Me._Beneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Adopcions.Add(Me)
					Me._IdBeneficiado = value.IdBeneficiado
				Else
					Me._IdBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Beneficiado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoAdopcion_Adopcion", Storage:="_EstadoAdopcion", ThisKey:="IdEstadoAdopcion", OtherKey:="IdEstadoAdopcion", IsForeignKey:=true)>  _
	Public Property EstadoAdopcion() As EstadoAdopcion
		Get
			Return Me._EstadoAdopcion.Entity
		End Get
		Set
			Dim previousValue As EstadoAdopcion = Me._EstadoAdopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EstadoAdopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EstadoAdopcion.Entity = Nothing
					previousValue.Adopcions.Remove(Me)
				End If
				Me._EstadoAdopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Adopcions.Add(Me)
					Me._IdEstadoAdopcion = value.IdEstadoAdopcion
				Else
					Me._IdEstadoAdopcion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EstadoAdopcion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sponsor_Adopcion", Storage:="_Sponsor", ThisKey:="IdSponsor", OtherKey:="IdSponsor", IsForeignKey:=true)>  _
	Public Property Sponsor() As Sponsor
		Get
			Return Me._Sponsor.Entity
		End Get
		Set
			Dim previousValue As Sponsor = Me._Sponsor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sponsor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sponsor.Entity = Nothing
					previousValue.Adopcions.Remove(Me)
				End If
				Me._Sponsor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Adopcions.Add(Me)
					Me._IdSponsor = value.IdSponsor
				Else
					Me._IdSponsor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sponsor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoPagoAdopcion_Adopcion", Storage:="_TipoPagoAdopcion", ThisKey:="IdTipoPagoAdopcion", OtherKey:="IdTipoPagoAdopcion", IsForeignKey:=true)>  _
	Public Property TipoPagoAdopcion() As TipoPagoAdopcion
		Get
			Return Me._TipoPagoAdopcion.Entity
		End Get
		Set
			Dim previousValue As TipoPagoAdopcion = Me._TipoPagoAdopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoPagoAdopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoPagoAdopcion.Entity = Nothing
					previousValue.Adopcions.Remove(Me)
				End If
				Me._TipoPagoAdopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Adopcions.Add(Me)
					Me._IdTipoPagoAdopcion = value.IdTipoPagoAdopcion
				Else
					Me._IdTipoPagoAdopcion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoPagoAdopcion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Adopcion", Storage:="_Usuario", ThisKey:="IdUsuario", OtherKey:="IdUsuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Adopcions.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Adopcions.Add(Me)
					Me._IdUsuario = value.IdUsuario
				Else
					Me._IdUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AdopcionPagos(ByVal entity As AdopcionPago)
		Me.SendPropertyChanging
		entity.Adopcion = Me
	End Sub
	
	Private Sub detach_AdopcionPagos(ByVal entity As AdopcionPago)
		Me.SendPropertyChanging
		entity.Adopcion = Nothing
	End Sub
	
	Private Sub attach_Cartas(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.Adopcion = Me
	End Sub
	
	Private Sub detach_Cartas(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.Adopcion = Nothing
	End Sub
	
	Private Sub attach_Ofrendas(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.Adopcion = Me
	End Sub
	
	Private Sub detach_Ofrendas(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.Adopcion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AdopcionPago")>  _
Partial Public Class AdopcionPago
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdAdopcionPago As Integer
	
	Private _FechaPago As Date
	
	Private _Valor As String
	
	Private _Idadopcion As Integer
	
	Private _Adopcion As EntityRef(Of Adopcion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdAdopcionPagoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAdopcionPagoChanged()
    End Sub
    Partial Private Sub OnFechaPagoChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaPagoChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    Partial Private Sub OnIdadopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdadopcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = CType(Nothing, EntityRef(Of Adopcion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAdopcionPago", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdAdopcionPago() As Integer
		Get
			Return Me._IdAdopcionPago
		End Get
		Set
			If ((Me._IdAdopcionPago = value)  _
						= false) Then
				Me.OnIdAdopcionPagoChanging(value)
				Me.SendPropertyChanging
				Me._IdAdopcionPago = value
				Me.SendPropertyChanged("IdAdopcionPago")
				Me.OnIdAdopcionPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaPago", DbType:="Date NOT NULL")>  _
	Public Property FechaPago() As Date
		Get
			Return Me._FechaPago
		End Get
		Set
			If ((Me._FechaPago = value)  _
						= false) Then
				Me.OnFechaPagoChanging(value)
				Me.SendPropertyChanging
				Me._FechaPago = value
				Me.SendPropertyChanged("FechaPago")
				Me.OnFechaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Idadopcion", DbType:="Int NOT NULL")>  _
	Public Property Idadopcion() As Integer
		Get
			Return Me._Idadopcion
		End Get
		Set
			If ((Me._Idadopcion = value)  _
						= false) Then
				If Me._Adopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdadopcionChanging(value)
				Me.SendPropertyChanging
				Me._Idadopcion = value
				Me.SendPropertyChanged("Idadopcion")
				Me.OnIdadopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_AdopcionPago", Storage:="_Adopcion", ThisKey:="Idadopcion", OtherKey:="IdAdopcion", IsForeignKey:=true)>  _
	Public Property Adopcion() As Adopcion
		Get
			Return Me._Adopcion.Entity
		End Get
		Set
			Dim previousValue As Adopcion = Me._Adopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Adopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Adopcion.Entity = Nothing
					previousValue.AdopcionPagos.Remove(Me)
				End If
				Me._Adopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AdopcionPagos.Add(Me)
					Me._Idadopcion = value.IdAdopcion
				Else
					Me._Idadopcion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Adopcion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AuditoriaLog")>  _
Partial Public Class AuditoriaLog
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdLog As Integer
	
	Private _Descripcion As String
	
	Private _Fecha As Date
	
	Private _IdUsuario As Integer
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdLogChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLogChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaChanged()
    End Sub
    Partial Private Sub OnIdUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLog", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdLog() As Integer
		Get
			Return Me._IdLog
		End Get
		Set
			If ((Me._IdLog = value)  _
						= false) Then
				Me.OnIdLogChanging(value)
				Me.SendPropertyChanging
				Me._IdLog = value
				Me.SendPropertyChanged("IdLog")
				Me.OnIdLogChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fecha", DbType:="Date NOT NULL")>  _
	Public Property Fecha() As Date
		Get
			Return Me._Fecha
		End Get
		Set
			If ((Me._Fecha = value)  _
						= false) Then
				Me.OnFechaChanging(value)
				Me.SendPropertyChanging
				Me._Fecha = value
				Me.SendPropertyChanged("Fecha")
				Me.OnFechaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuario = value
				Me.SendPropertyChanged("IdUsuario")
				Me.OnIdUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_AuditoriaLog", Storage:="_Usuario", ThisKey:="IdUsuario", OtherKey:="IdUsuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.AuditoriaLogs.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuditoriaLogs.Add(Me)
					Me._IdUsuario = value.IdUsuario
				Else
					Me._IdUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Beneficiado")>  _
Partial Public Class Beneficiado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBeneficiado As Integer
	
	Private _NombreBeneficiado As String
	
	Private _ApellidoBeneficiado As String
	
	Private _Direccion As String
	
	Private _FechaNac As Date
	
	Private _CantidadHermanos As String
	
	Private _CantidadHermanas As String
	
	Private _ColorOjos As String
	
	Private _ColorPelo As String
	
	Private _IdGradoCursado As Integer
	
	Private _IdSexo As Integer
	
	Private _IdIglesia As Integer
	
	Private _IdLugar As Integer
	
	Private _IdEstadoBeneficiado As Integer
	
	Private _IdInstitucion As Integer
	
	Private _Interno As Boolean
	
	Private _AsistenciaClaseDominical As Boolean
	
	Private _IdNacionalidad As Integer
	
	Private _IdEnfermedadPadecimiento As Integer
	
	Private _IdUsuario As Integer
	
	Private _FechaHistotiaEnviada As Date
	
	Private _Adopcions As EntitySet(Of Adopcion)
	
	Private _CasaBeneficiados As EntitySet(Of CasaBeneficiado)
	
	Private _InteresesBeneficiados As EntitySet(Of InteresesBeneficiado)
	
	Private _EnfermedadPadecimiento As EntityRef(Of EnfermedadPadecimiento)
	
	Private _EstadoBeneficiado As EntityRef(Of EstadoBeneficiado)
	
	Private _GradoCursado As EntityRef(Of GradoCursado)
	
	Private _Iglesia As EntityRef(Of Iglesia)
	
	Private _Institucion As EntityRef(Of Institucion)
	
	Private _Lugar As EntityRef(Of Lugar)
	
	Private _Nacionalidad As EntityRef(Of Nacionalidad)
	
	Private _Sexo As EntityRef(Of Sexo)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    Partial Private Sub OnNombreBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreBeneficiadoChanged()
    End Sub
    Partial Private Sub OnApellidoBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnApellidoBeneficiadoChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnFechaNacChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaNacChanged()
    End Sub
    Partial Private Sub OnCantidadHermanosChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadHermanosChanged()
    End Sub
    Partial Private Sub OnCantidadHermanasChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadHermanasChanged()
    End Sub
    Partial Private Sub OnColorOjosChanging(value As String)
    End Sub
    Partial Private Sub OnColorOjosChanged()
    End Sub
    Partial Private Sub OnColorPeloChanging(value As String)
    End Sub
    Partial Private Sub OnColorPeloChanged()
    End Sub
    Partial Private Sub OnIdGradoCursadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdGradoCursadoChanged()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    Partial Private Sub OnIdIglesiaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIglesiaChanged()
    End Sub
    Partial Private Sub OnIdLugarChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLugarChanged()
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanged()
    End Sub
    Partial Private Sub OnIdInstitucionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdInstitucionChanged()
    End Sub
    Partial Private Sub OnInternoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInternoChanged()
    End Sub
    Partial Private Sub OnAsistenciaClaseDominicalChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAsistenciaClaseDominicalChanged()
    End Sub
    Partial Private Sub OnIdNacionalidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdNacionalidadChanged()
    End Sub
    Partial Private Sub OnIdEnfermedadPadecimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEnfermedadPadecimientoChanged()
    End Sub
    Partial Private Sub OnIdUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuarioChanged()
    End Sub
    Partial Private Sub OnFechaHistotiaEnviadaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaHistotiaEnviadaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcions = New EntitySet(Of Adopcion)(AddressOf Me.attach_Adopcions, AddressOf Me.detach_Adopcions)
		Me._CasaBeneficiados = New EntitySet(Of CasaBeneficiado)(AddressOf Me.attach_CasaBeneficiados, AddressOf Me.detach_CasaBeneficiados)
		Me._InteresesBeneficiados = New EntitySet(Of InteresesBeneficiado)(AddressOf Me.attach_InteresesBeneficiados, AddressOf Me.detach_InteresesBeneficiados)
		Me._EnfermedadPadecimiento = CType(Nothing, EntityRef(Of EnfermedadPadecimiento))
		Me._EstadoBeneficiado = CType(Nothing, EntityRef(Of EstadoBeneficiado))
		Me._GradoCursado = CType(Nothing, EntityRef(Of GradoCursado))
		Me._Iglesia = CType(Nothing, EntityRef(Of Iglesia))
		Me._Institucion = CType(Nothing, EntityRef(Of Institucion))
		Me._Lugar = CType(Nothing, EntityRef(Of Lugar))
		Me._Nacionalidad = CType(Nothing, EntityRef(Of Nacionalidad))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreBeneficiado() As String
		Get
			Return Me._NombreBeneficiado
		End Get
		Set
			If (String.Equals(Me._NombreBeneficiado, value) = false) Then
				Me.OnNombreBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._NombreBeneficiado = value
				Me.SendPropertyChanged("NombreBeneficiado")
				Me.OnNombreBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApellidoBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ApellidoBeneficiado() As String
		Get
			Return Me._ApellidoBeneficiado
		End Get
		Set
			If (String.Equals(Me._ApellidoBeneficiado, value) = false) Then
				Me.OnApellidoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._ApellidoBeneficiado = value
				Me.SendPropertyChanged("ApellidoBeneficiado")
				Me.OnApellidoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaNac", DbType:="Date NOT NULL")>  _
	Public Property FechaNac() As Date
		Get
			Return Me._FechaNac
		End Get
		Set
			If ((Me._FechaNac = value)  _
						= false) Then
				Me.OnFechaNacChanging(value)
				Me.SendPropertyChanging
				Me._FechaNac = value
				Me.SendPropertyChanged("FechaNac")
				Me.OnFechaNacChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHermanos", DbType:="NVarChar(2)")>  _
	Public Property CantidadHermanos() As String
		Get
			Return Me._CantidadHermanos
		End Get
		Set
			If (String.Equals(Me._CantidadHermanos, value) = false) Then
				Me.OnCantidadHermanosChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHermanos = value
				Me.SendPropertyChanged("CantidadHermanos")
				Me.OnCantidadHermanosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHermanas", DbType:="NVarChar(2)")>  _
	Public Property CantidadHermanas() As String
		Get
			Return Me._CantidadHermanas
		End Get
		Set
			If (String.Equals(Me._CantidadHermanas, value) = false) Then
				Me.OnCantidadHermanasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHermanas = value
				Me.SendPropertyChanged("CantidadHermanas")
				Me.OnCantidadHermanasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorOjos", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ColorOjos() As String
		Get
			Return Me._ColorOjos
		End Get
		Set
			If (String.Equals(Me._ColorOjos, value) = false) Then
				Me.OnColorOjosChanging(value)
				Me.SendPropertyChanging
				Me._ColorOjos = value
				Me.SendPropertyChanged("ColorOjos")
				Me.OnColorOjosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorPelo", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property ColorPelo() As String
		Get
			Return Me._ColorPelo
		End Get
		Set
			If (String.Equals(Me._ColorPelo, value) = false) Then
				Me.OnColorPeloChanging(value)
				Me.SendPropertyChanging
				Me._ColorPelo = value
				Me.SendPropertyChanged("ColorPelo")
				Me.OnColorPeloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGradoCursado", DbType:="Int NOT NULL")>  _
	Public Property IdGradoCursado() As Integer
		Get
			Return Me._IdGradoCursado
		End Get
		Set
			If ((Me._IdGradoCursado = value)  _
						= false) Then
				If Me._GradoCursado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._IdGradoCursado = value
				Me.SendPropertyChanged("IdGradoCursado")
				Me.OnIdGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", DbType:="Int NOT NULL")>  _
	Public Property IdSexo() As Integer
		Get
			Return Me._IdSexo
		End Get
		Set
			If ((Me._IdSexo = value)  _
						= false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdIglesia", DbType:="Int NOT NULL")>  _
	Public Property IdIglesia() As Integer
		Get
			Return Me._IdIglesia
		End Get
		Set
			If ((Me._IdIglesia = value)  _
						= false) Then
				If Me._Iglesia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdIglesiaChanging(value)
				Me.SendPropertyChanging
				Me._IdIglesia = value
				Me.SendPropertyChanged("IdIglesia")
				Me.OnIdIglesiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLugar", DbType:="Int NOT NULL")>  _
	Public Property IdLugar() As Integer
		Get
			Return Me._IdLugar
		End Get
		Set
			If ((Me._IdLugar = value)  _
						= false) Then
				If Me._Lugar.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdLugarChanging(value)
				Me.SendPropertyChanging
				Me._IdLugar = value
				Me.SendPropertyChanged("IdLugar")
				Me.OnIdLugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdEstadoBeneficiado() As Integer
		Get
			Return Me._IdEstadoBeneficiado
		End Get
		Set
			If ((Me._IdEstadoBeneficiado = value)  _
						= false) Then
				If Me._EstadoBeneficiado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEstadoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoBeneficiado = value
				Me.SendPropertyChanged("IdEstadoBeneficiado")
				Me.OnIdEstadoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInstitucion", DbType:="Int NOT NULL")>  _
	Public Property IdInstitucion() As Integer
		Get
			Return Me._IdInstitucion
		End Get
		Set
			If ((Me._IdInstitucion = value)  _
						= false) Then
				If Me._Institucion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._IdInstitucion = value
				Me.SendPropertyChanged("IdInstitucion")
				Me.OnIdInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interno", DbType:="Bit NOT NULL")>  _
	Public Property Interno() As Boolean
		Get
			Return Me._Interno
		End Get
		Set
			If ((Me._Interno = value)  _
						= false) Then
				Me.OnInternoChanging(value)
				Me.SendPropertyChanging
				Me._Interno = value
				Me.SendPropertyChanged("Interno")
				Me.OnInternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AsistenciaClaseDominical", DbType:="Bit NOT NULL")>  _
	Public Property AsistenciaClaseDominical() As Boolean
		Get
			Return Me._AsistenciaClaseDominical
		End Get
		Set
			If ((Me._AsistenciaClaseDominical = value)  _
						= false) Then
				Me.OnAsistenciaClaseDominicalChanging(value)
				Me.SendPropertyChanging
				Me._AsistenciaClaseDominical = value
				Me.SendPropertyChanged("AsistenciaClaseDominical")
				Me.OnAsistenciaClaseDominicalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdNacionalidad", DbType:="Int NOT NULL")>  _
	Public Property IdNacionalidad() As Integer
		Get
			Return Me._IdNacionalidad
		End Get
		Set
			If ((Me._IdNacionalidad = value)  _
						= false) Then
				If Me._Nacionalidad.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdNacionalidadChanging(value)
				Me.SendPropertyChanging
				Me._IdNacionalidad = value
				Me.SendPropertyChanged("IdNacionalidad")
				Me.OnIdNacionalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEnfermedadPadecimiento", DbType:="Int NOT NULL")>  _
	Public Property IdEnfermedadPadecimiento() As Integer
		Get
			Return Me._IdEnfermedadPadecimiento
		End Get
		Set
			If ((Me._IdEnfermedadPadecimiento = value)  _
						= false) Then
				If Me._EnfermedadPadecimiento.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEnfermedadPadecimientoChanging(value)
				Me.SendPropertyChanging
				Me._IdEnfermedadPadecimiento = value
				Me.SendPropertyChanged("IdEnfermedadPadecimiento")
				Me.OnIdEnfermedadPadecimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuario = value
				Me.SendPropertyChanged("IdUsuario")
				Me.OnIdUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaHistotiaEnviada", DbType:="Date NOT NULL")>  _
	Public Property FechaHistotiaEnviada() As Date
		Get
			Return Me._FechaHistotiaEnviada
		End Get
		Set
			If ((Me._FechaHistotiaEnviada = value)  _
						= false) Then
				Me.OnFechaHistotiaEnviadaChanging(value)
				Me.SendPropertyChanging
				Me._FechaHistotiaEnviada = value
				Me.SendPropertyChanged("FechaHistotiaEnviada")
				Me.OnFechaHistotiaEnviadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_Adopcion", Storage:="_Adopcions", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado")>  _
	Public Property Adopcions() As EntitySet(Of Adopcion)
		Get
			Return Me._Adopcions
		End Get
		Set
			Me._Adopcions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_CasaBeneficiado", Storage:="_CasaBeneficiados", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado")>  _
	Public Property CasaBeneficiados() As EntitySet(Of CasaBeneficiado)
		Get
			Return Me._CasaBeneficiados
		End Get
		Set
			Me._CasaBeneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_InteresesBeneficiado", Storage:="_InteresesBeneficiados", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado")>  _
	Public Property InteresesBeneficiados() As EntitySet(Of InteresesBeneficiado)
		Get
			Return Me._InteresesBeneficiados
		End Get
		Set
			Me._InteresesBeneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnfermedadPadecimiento_Beneficiado", Storage:="_EnfermedadPadecimiento", ThisKey:="IdEnfermedadPadecimiento", OtherKey:="IdEnfermedadPadecimiento", IsForeignKey:=true)>  _
	Public Property EnfermedadPadecimiento() As EnfermedadPadecimiento
		Get
			Return Me._EnfermedadPadecimiento.Entity
		End Get
		Set
			Dim previousValue As EnfermedadPadecimiento = Me._EnfermedadPadecimiento.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnfermedadPadecimiento.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnfermedadPadecimiento.Entity = Nothing
					previousValue.Beneficiados.Remove(Me)
				End If
				Me._EnfermedadPadecimiento.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiados.Add(Me)
					Me._IdEnfermedadPadecimiento = value.IdEnfermedadPadecimiento
				Else
					Me._IdEnfermedadPadecimiento = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EnfermedadPadecimiento")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoBeneficiado_Beneficiado", Storage:="_EstadoBeneficiado", ThisKey:="IdEstadoBeneficiado", OtherKey:="IdEstadoBeneficiado", IsForeignKey:=true)>  _
	Public Property EstadoBeneficiado() As EstadoBeneficiado
		Get
			Return Me._EstadoBeneficiado.Entity
		End Get
		Set
			Dim previousValue As EstadoBeneficiado = Me._EstadoBeneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EstadoBeneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EstadoBeneficiado.Entity = Nothing
					previousValue.Beneficiados.Remove(Me)
				End If
				Me._EstadoBeneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiados.Add(Me)
					Me._IdEstadoBeneficiado = value.IdEstadoBeneficiado
				Else
					Me._IdEstadoBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EstadoBeneficiado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado_Beneficiado", Storage:="_GradoCursado", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado", IsForeignKey:=true)>  _
	Public Property GradoCursado() As GradoCursado
		Get
			Return Me._GradoCursado.Entity
		End Get
		Set
			Dim previousValue As GradoCursado = Me._GradoCursado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GradoCursado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GradoCursado.Entity = Nothing
					previousValue.Beneficiados.Remove(Me)
				End If
				Me._GradoCursado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiados.Add(Me)
					Me._IdGradoCursado = value.IdGradoCursado
				Else
					Me._IdGradoCursado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("GradoCursado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Iglesia_Beneficiado", Storage:="_Iglesia", ThisKey:="IdIglesia", OtherKey:="IdIglesia", IsForeignKey:=true)>  _
	Public Property Iglesia() As Iglesia
		Get
			Return Me._Iglesia.Entity
		End Get
		Set
			Dim previousValue As Iglesia = Me._Iglesia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Iglesia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Iglesia.Entity = Nothing
					previousValue.Beneficiados.Remove(Me)
				End If
				Me._Iglesia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiados.Add(Me)
					Me._IdIglesia = value.IdIglesia
				Else
					Me._IdIglesia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Iglesia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Institucion_Beneficiado", Storage:="_Institucion", ThisKey:="IdInstitucion", OtherKey:="IdInstitucion", IsForeignKey:=true)>  _
	Public Property Institucion() As Institucion
		Get
			Return Me._Institucion.Entity
		End Get
		Set
			Dim previousValue As Institucion = Me._Institucion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Institucion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Institucion.Entity = Nothing
					previousValue.Beneficiados.Remove(Me)
				End If
				Me._Institucion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiados.Add(Me)
					Me._IdInstitucion = value.IdInstitucion
				Else
					Me._IdInstitucion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Institucion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lugar_Beneficiado", Storage:="_Lugar", ThisKey:="IdLugar", OtherKey:="IdLugar", IsForeignKey:=true)>  _
	Public Property Lugar() As Lugar
		Get
			Return Me._Lugar.Entity
		End Get
		Set
			Dim previousValue As Lugar = Me._Lugar.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Lugar.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Lugar.Entity = Nothing
					previousValue.Beneficiados.Remove(Me)
				End If
				Me._Lugar.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiados.Add(Me)
					Me._IdLugar = value.IdLugar
				Else
					Me._IdLugar = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Lugar")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Nacionalidad_Beneficiado", Storage:="_Nacionalidad", ThisKey:="IdNacionalidad", OtherKey:="IdNacionalidad", IsForeignKey:=true)>  _
	Public Property Nacionalidad() As Nacionalidad
		Get
			Return Me._Nacionalidad.Entity
		End Get
		Set
			Dim previousValue As Nacionalidad = Me._Nacionalidad.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Nacionalidad.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Nacionalidad.Entity = Nothing
					previousValue.Beneficiados.Remove(Me)
				End If
				Me._Nacionalidad.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiados.Add(Me)
					Me._IdNacionalidad = value.IdNacionalidad
				Else
					Me._IdNacionalidad = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Nacionalidad")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Beneficiado", Storage:="_Sexo", ThisKey:="IdSexo", OtherKey:="IdSexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Beneficiados.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiados.Add(Me)
					Me._IdSexo = value.IdSexo
				Else
					Me._IdSexo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Beneficiado", Storage:="_Usuario", ThisKey:="IdUsuario", OtherKey:="IdUsuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Beneficiados.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiados.Add(Me)
					Me._IdUsuario = value.IdUsuario
				Else
					Me._IdUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Beneficiado = Me
	End Sub
	
	Private Sub detach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Beneficiado = Nothing
	End Sub
	
	Private Sub attach_CasaBeneficiados(ByVal entity As CasaBeneficiado)
		Me.SendPropertyChanging
		entity.Beneficiado = Me
	End Sub
	
	Private Sub detach_CasaBeneficiados(ByVal entity As CasaBeneficiado)
		Me.SendPropertyChanging
		entity.Beneficiado = Nothing
	End Sub
	
	Private Sub attach_InteresesBeneficiados(ByVal entity As InteresesBeneficiado)
		Me.SendPropertyChanging
		entity.Beneficiado = Me
	End Sub
	
	Private Sub detach_InteresesBeneficiados(ByVal entity As InteresesBeneficiado)
		Me.SendPropertyChanging
		entity.Beneficiado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BeneficiadoHermano")>  _
Partial Public Class BeneficiadoHermano
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBeneficiado As Integer
	
	Private _IdHermano As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    Partial Private Sub OnIdHermanoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdHermanoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdHermano", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdHermano() As Integer
		Get
			Return Me._IdHermano
		End Get
		Set
			If ((Me._IdHermano = value)  _
						= false) Then
				Me.OnIdHermanoChanging(value)
				Me.SendPropertyChanging
				Me._IdHermano = value
				Me.SendPropertyChanged("IdHermano")
				Me.OnIdHermanoChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BeneficiadoTutor")>  _
Partial Public Class BeneficiadoTutor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBeneficiado As Integer
	
	Private _IdTutor As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    Partial Private Sub OnIdTutorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTutorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTutor", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTutor() As Integer
		Get
			Return Me._IdTutor
		End Get
		Set
			If ((Me._IdTutor = value)  _
						= false) Then
				Me.OnIdTutorChanging(value)
				Me.SendPropertyChanging
				Me._IdTutor = value
				Me.SendPropertyChanged("IdTutor")
				Me.OnIdTutorChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cartas")>  _
Partial Public Class Carta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCarta As Integer
	
	Private _Descripcion As String
	
	Private _FechaEntrega As Date
	
	Private _Remitente As Integer
	
	Private _Destinatario As Integer
	
	Private _IdTipoCarta As Integer
	
	Private _IdAdopcion As Integer
	
	Private _IdUsuario As Integer
	
	Private _Adopcion As EntityRef(Of Adopcion)
	
	Private _RemitenteDestinatario As EntityRef(Of RemitenteDestinatario)
	
	Private _RemitenteDestinatario1 As EntityRef(Of RemitenteDestinatario)
	
	Private _TipoCarta As EntityRef(Of TipoCarta)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCartaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCartaChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnFechaEntregaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaEntregaChanged()
    End Sub
    Partial Private Sub OnRemitenteChanging(value As Integer)
    End Sub
    Partial Private Sub OnRemitenteChanged()
    End Sub
    Partial Private Sub OnDestinatarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnDestinatarioChanged()
    End Sub
    Partial Private Sub OnIdTipoCartaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCartaChanged()
    End Sub
    Partial Private Sub OnIdAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAdopcionChanged()
    End Sub
    Partial Private Sub OnIdUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = CType(Nothing, EntityRef(Of Adopcion))
		Me._RemitenteDestinatario = CType(Nothing, EntityRef(Of RemitenteDestinatario))
		Me._RemitenteDestinatario1 = CType(Nothing, EntityRef(Of RemitenteDestinatario))
		Me._TipoCarta = CType(Nothing, EntityRef(Of TipoCarta))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCarta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdCarta() As Integer
		Get
			Return Me._IdCarta
		End Get
		Set
			If ((Me._IdCarta = value)  _
						= false) Then
				Me.OnIdCartaChanging(value)
				Me.SendPropertyChanging
				Me._IdCarta = value
				Me.SendPropertyChanged("IdCarta")
				Me.OnIdCartaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEntrega", DbType:="Date NOT NULL")>  _
	Public Property FechaEntrega() As Date
		Get
			Return Me._FechaEntrega
		End Get
		Set
			If ((Me._FechaEntrega = value)  _
						= false) Then
				Me.OnFechaEntregaChanging(value)
				Me.SendPropertyChanging
				Me._FechaEntrega = value
				Me.SendPropertyChanged("FechaEntrega")
				Me.OnFechaEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Remitente", DbType:="Int NOT NULL")>  _
	Public Property Remitente() As Integer
		Get
			Return Me._Remitente
		End Get
		Set
			If ((Me._Remitente = value)  _
						= false) Then
				If Me._RemitenteDestinatario1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRemitenteChanging(value)
				Me.SendPropertyChanging
				Me._Remitente = value
				Me.SendPropertyChanged("Remitente")
				Me.OnRemitenteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Destinatario", DbType:="Int NOT NULL")>  _
	Public Property Destinatario() As Integer
		Get
			Return Me._Destinatario
		End Get
		Set
			If ((Me._Destinatario = value)  _
						= false) Then
				If Me._RemitenteDestinatario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDestinatarioChanging(value)
				Me.SendPropertyChanging
				Me._Destinatario = value
				Me.SendPropertyChanged("Destinatario")
				Me.OnDestinatarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCarta", DbType:="Int NOT NULL")>  _
	Public Property IdTipoCarta() As Integer
		Get
			Return Me._IdTipoCarta
		End Get
		Set
			If ((Me._IdTipoCarta = value)  _
						= false) Then
				If Me._TipoCarta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoCartaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCarta = value
				Me.SendPropertyChanged("IdTipoCarta")
				Me.OnIdTipoCartaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAdopcion", DbType:="Int NOT NULL")>  _
	Public Property IdAdopcion() As Integer
		Get
			Return Me._IdAdopcion
		End Get
		Set
			If ((Me._IdAdopcion = value)  _
						= false) Then
				If Me._Adopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdAdopcion = value
				Me.SendPropertyChanged("IdAdopcion")
				Me.OnIdAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuario = value
				Me.SendPropertyChanged("IdUsuario")
				Me.OnIdUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_Carta", Storage:="_Adopcion", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion", IsForeignKey:=true)>  _
	Public Property Adopcion() As Adopcion
		Get
			Return Me._Adopcion.Entity
		End Get
		Set
			Dim previousValue As Adopcion = Me._Adopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Adopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Adopcion.Entity = Nothing
					previousValue.Cartas.Remove(Me)
				End If
				Me._Adopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cartas.Add(Me)
					Me._IdAdopcion = value.IdAdopcion
				Else
					Me._IdAdopcion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Adopcion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RemitenteDestinatario_Carta", Storage:="_RemitenteDestinatario", ThisKey:="Destinatario", OtherKey:="IdRemitenteDestinatario", IsForeignKey:=true)>  _
	Public Property RemitenteDestinatario() As RemitenteDestinatario
		Get
			Return Me._RemitenteDestinatario.Entity
		End Get
		Set
			Dim previousValue As RemitenteDestinatario = Me._RemitenteDestinatario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RemitenteDestinatario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RemitenteDestinatario.Entity = Nothing
					previousValue.Cartas.Remove(Me)
				End If
				Me._RemitenteDestinatario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cartas.Add(Me)
					Me._Destinatario = value.IdRemitenteDestinatario
				Else
					Me._Destinatario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("RemitenteDestinatario")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RemitenteDestinatario_Carta1", Storage:="_RemitenteDestinatario1", ThisKey:="Remitente", OtherKey:="IdRemitenteDestinatario", IsForeignKey:=true)>  _
	Public Property RemitenteDestinatario1() As RemitenteDestinatario
		Get
			Return Me._RemitenteDestinatario1.Entity
		End Get
		Set
			Dim previousValue As RemitenteDestinatario = Me._RemitenteDestinatario1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RemitenteDestinatario1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RemitenteDestinatario1.Entity = Nothing
					previousValue.Cartas1.Remove(Me)
				End If
				Me._RemitenteDestinatario1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cartas1.Add(Me)
					Me._Remitente = value.IdRemitenteDestinatario
				Else
					Me._Remitente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("RemitenteDestinatario1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCarta_Carta", Storage:="_TipoCarta", ThisKey:="IdTipoCarta", OtherKey:="IdTipoCarta", IsForeignKey:=true)>  _
	Public Property TipoCarta() As TipoCarta
		Get
			Return Me._TipoCarta.Entity
		End Get
		Set
			Dim previousValue As TipoCarta = Me._TipoCarta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoCarta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoCarta.Entity = Nothing
					previousValue.Cartas.Remove(Me)
				End If
				Me._TipoCarta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cartas.Add(Me)
					Me._IdTipoCarta = value.IdTipoCarta
				Else
					Me._IdTipoCarta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoCarta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Carta", Storage:="_Usuario", ThisKey:="IdUsuario", OtherKey:="IdUsuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Cartas.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cartas.Add(Me)
					Me._IdUsuario = value.IdUsuario
				Else
					Me._IdUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CasaBeneficiado")>  _
Partial Public Class CasaBeneficiado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCasaBeneficiado As Integer
	
	Private _CantidadDormitorios As Integer
	
	Private _CantidadCamas As Integer
	
	Private _CantidadHamacas As Integer
	
	Private _CantidadRopaCama As Integer
	
	Private _CantidadMesas As Integer
	
	Private _CantidadSillas As Integer
	
	Private _Piso As String
	
	Private _IdTipoCasa As Integer
	
	Private _IdBeneficiado As Integer
	
	Private _Beneficiado As EntityRef(Of Beneficiado)
	
	Private _TipoCasa As EntityRef(Of TipoCasa)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCasaBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCasaBeneficiadoChanged()
    End Sub
    Partial Private Sub OnCantidadDormitoriosChanging(value As Integer)
    End Sub
    Partial Private Sub OnCantidadDormitoriosChanged()
    End Sub
    Partial Private Sub OnCantidadCamasChanging(value As Integer)
    End Sub
    Partial Private Sub OnCantidadCamasChanged()
    End Sub
    Partial Private Sub OnCantidadHamacasChanging(value As Integer)
    End Sub
    Partial Private Sub OnCantidadHamacasChanged()
    End Sub
    Partial Private Sub OnCantidadRopaCamaChanging(value As Integer)
    End Sub
    Partial Private Sub OnCantidadRopaCamaChanged()
    End Sub
    Partial Private Sub OnCantidadMesasChanging(value As Integer)
    End Sub
    Partial Private Sub OnCantidadMesasChanged()
    End Sub
    Partial Private Sub OnCantidadSillasChanging(value As Integer)
    End Sub
    Partial Private Sub OnCantidadSillasChanged()
    End Sub
    Partial Private Sub OnPisoChanging(value As String)
    End Sub
    Partial Private Sub OnPisoChanged()
    End Sub
    Partial Private Sub OnIdTipoCasaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCasaChanged()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = CType(Nothing, EntityRef(Of Beneficiado))
		Me._TipoCasa = CType(Nothing, EntityRef(Of TipoCasa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCasaBeneficiado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdCasaBeneficiado() As Integer
		Get
			Return Me._IdCasaBeneficiado
		End Get
		Set
			If ((Me._IdCasaBeneficiado = value)  _
						= false) Then
				Me.OnIdCasaBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdCasaBeneficiado = value
				Me.SendPropertyChanged("IdCasaBeneficiado")
				Me.OnIdCasaBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadDormitorios", DbType:="Int NOT NULL")>  _
	Public Property CantidadDormitorios() As Integer
		Get
			Return Me._CantidadDormitorios
		End Get
		Set
			If ((Me._CantidadDormitorios = value)  _
						= false) Then
				Me.OnCantidadDormitoriosChanging(value)
				Me.SendPropertyChanging
				Me._CantidadDormitorios = value
				Me.SendPropertyChanged("CantidadDormitorios")
				Me.OnCantidadDormitoriosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadCamas", DbType:="Int NOT NULL")>  _
	Public Property CantidadCamas() As Integer
		Get
			Return Me._CantidadCamas
		End Get
		Set
			If ((Me._CantidadCamas = value)  _
						= false) Then
				Me.OnCantidadCamasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadCamas = value
				Me.SendPropertyChanged("CantidadCamas")
				Me.OnCantidadCamasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHamacas", DbType:="Int NOT NULL")>  _
	Public Property CantidadHamacas() As Integer
		Get
			Return Me._CantidadHamacas
		End Get
		Set
			If ((Me._CantidadHamacas = value)  _
						= false) Then
				Me.OnCantidadHamacasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHamacas = value
				Me.SendPropertyChanged("CantidadHamacas")
				Me.OnCantidadHamacasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadRopaCama", DbType:="Int NOT NULL")>  _
	Public Property CantidadRopaCama() As Integer
		Get
			Return Me._CantidadRopaCama
		End Get
		Set
			If ((Me._CantidadRopaCama = value)  _
						= false) Then
				Me.OnCantidadRopaCamaChanging(value)
				Me.SendPropertyChanging
				Me._CantidadRopaCama = value
				Me.SendPropertyChanged("CantidadRopaCama")
				Me.OnCantidadRopaCamaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadMesas", DbType:="Int NOT NULL")>  _
	Public Property CantidadMesas() As Integer
		Get
			Return Me._CantidadMesas
		End Get
		Set
			If ((Me._CantidadMesas = value)  _
						= false) Then
				Me.OnCantidadMesasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadMesas = value
				Me.SendPropertyChanged("CantidadMesas")
				Me.OnCantidadMesasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadSillas", DbType:="Int NOT NULL")>  _
	Public Property CantidadSillas() As Integer
		Get
			Return Me._CantidadSillas
		End Get
		Set
			If ((Me._CantidadSillas = value)  _
						= false) Then
				Me.OnCantidadSillasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadSillas = value
				Me.SendPropertyChanged("CantidadSillas")
				Me.OnCantidadSillasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Piso", DbType:="NVarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Piso() As String
		Get
			Return Me._Piso
		End Get
		Set
			If (String.Equals(Me._Piso, value) = false) Then
				Me.OnPisoChanging(value)
				Me.SendPropertyChanging
				Me._Piso = value
				Me.SendPropertyChanged("Piso")
				Me.OnPisoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCasa", DbType:="Int NOT NULL")>  _
	Public Property IdTipoCasa() As Integer
		Get
			Return Me._IdTipoCasa
		End Get
		Set
			If ((Me._IdTipoCasa = value)  _
						= false) Then
				If Me._TipoCasa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoCasaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCasa = value
				Me.SendPropertyChanged("IdTipoCasa")
				Me.OnIdTipoCasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				If Me._Beneficiado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_CasaBeneficiado", Storage:="_Beneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado", IsForeignKey:=true)>  _
	Public Property Beneficiado() As Beneficiado
		Get
			Return Me._Beneficiado.Entity
		End Get
		Set
			Dim previousValue As Beneficiado = Me._Beneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Beneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Beneficiado.Entity = Nothing
					previousValue.CasaBeneficiados.Remove(Me)
				End If
				Me._Beneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CasaBeneficiados.Add(Me)
					Me._IdBeneficiado = value.IdBeneficiado
				Else
					Me._IdBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Beneficiado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCasa_CasaBeneficiado", Storage:="_TipoCasa", ThisKey:="IdTipoCasa", OtherKey:="IdTipoCasa", IsForeignKey:=true)>  _
	Public Property TipoCasa() As TipoCasa
		Get
			Return Me._TipoCasa.Entity
		End Get
		Set
			Dim previousValue As TipoCasa = Me._TipoCasa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoCasa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoCasa.Entity = Nothing
					previousValue.CasaBeneficiados.Remove(Me)
				End If
				Me._TipoCasa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CasaBeneficiados.Add(Me)
					Me._IdTipoCasa = value.IdTipoCasa
				Else
					Me._IdTipoCasa = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoCasa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EnfermedadPadecimiento")>  _
Partial Public Class EnfermedadPadecimiento
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEnfermedadPadecimiento As Integer
	
	Private _EnfermedadPadecimiento As String
	
	Private _Beneficiados As EntitySet(Of Beneficiado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEnfermedadPadecimientoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEnfermedadPadecimientoChanged()
    End Sub
    Partial Private Sub OnEnfermedadPadecimientoChanging(value As String)
    End Sub
    Partial Private Sub OnEnfermedadPadecimientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiados = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiados, AddressOf Me.detach_Beneficiados)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEnfermedadPadecimiento", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEnfermedadPadecimiento() As Integer
		Get
			Return Me._IdEnfermedadPadecimiento
		End Get
		Set
			If ((Me._IdEnfermedadPadecimiento = value)  _
						= false) Then
				Me.OnIdEnfermedadPadecimientoChanging(value)
				Me.SendPropertyChanging
				Me._IdEnfermedadPadecimiento = value
				Me.SendPropertyChanged("IdEnfermedadPadecimiento")
				Me.OnIdEnfermedadPadecimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnfermedadPadecimiento", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EnfermedadPadecimiento() As String
		Get
			Return Me._EnfermedadPadecimiento
		End Get
		Set
			If (String.Equals(Me._EnfermedadPadecimiento, value) = false) Then
				Me.OnEnfermedadPadecimientoChanging(value)
				Me.SendPropertyChanging
				Me._EnfermedadPadecimiento = value
				Me.SendPropertyChanged("EnfermedadPadecimiento")
				Me.OnEnfermedadPadecimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnfermedadPadecimiento_Beneficiado", Storage:="_Beneficiados", ThisKey:="IdEnfermedadPadecimiento", OtherKey:="IdEnfermedadPadecimiento")>  _
	Public Property Beneficiados() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiados
		End Get
		Set
			Me._Beneficiados.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.EnfermedadPadecimiento = Me
	End Sub
	
	Private Sub detach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.EnfermedadPadecimiento = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EstadoAdopcion")>  _
Partial Public Class EstadoAdopcion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEstadoAdopcion As Integer
	
	Private _EstadoAdopcion As String
	
	Private _Adopcions As EntitySet(Of Adopcion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEstadoAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoAdopcionChanged()
    End Sub
    Partial Private Sub OnEstadoAdopcionChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoAdopcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcions = New EntitySet(Of Adopcion)(AddressOf Me.attach_Adopcions, AddressOf Me.detach_Adopcions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoAdopcion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEstadoAdopcion() As Integer
		Get
			Return Me._IdEstadoAdopcion
		End Get
		Set
			If ((Me._IdEstadoAdopcion = value)  _
						= false) Then
				Me.OnIdEstadoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoAdopcion = value
				Me.SendPropertyChanged("IdEstadoAdopcion")
				Me.OnIdEstadoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstadoAdopcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EstadoAdopcion() As String
		Get
			Return Me._EstadoAdopcion
		End Get
		Set
			If (String.Equals(Me._EstadoAdopcion, value) = false) Then
				Me.OnEstadoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._EstadoAdopcion = value
				Me.SendPropertyChanged("EstadoAdopcion")
				Me.OnEstadoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoAdopcion_Adopcion", Storage:="_Adopcions", ThisKey:="IdEstadoAdopcion", OtherKey:="IdEstadoAdopcion")>  _
	Public Property Adopcions() As EntitySet(Of Adopcion)
		Get
			Return Me._Adopcions
		End Get
		Set
			Me._Adopcions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.EstadoAdopcion = Me
	End Sub
	
	Private Sub detach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.EstadoAdopcion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EstadoBeneficiado")>  _
Partial Public Class EstadoBeneficiado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEstadoBeneficiado As Integer
	
	Private _EstadoBeneficiado As String
	
	Private _Beneficiados As EntitySet(Of Beneficiado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanged()
    End Sub
    Partial Private Sub OnEstadoBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoBeneficiadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiados = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiados, AddressOf Me.detach_Beneficiados)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoBeneficiado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEstadoBeneficiado() As Integer
		Get
			Return Me._IdEstadoBeneficiado
		End Get
		Set
			If ((Me._IdEstadoBeneficiado = value)  _
						= false) Then
				Me.OnIdEstadoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoBeneficiado = value
				Me.SendPropertyChanged("IdEstadoBeneficiado")
				Me.OnIdEstadoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstadoBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EstadoBeneficiado() As String
		Get
			Return Me._EstadoBeneficiado
		End Get
		Set
			If (String.Equals(Me._EstadoBeneficiado, value) = false) Then
				Me.OnEstadoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._EstadoBeneficiado = value
				Me.SendPropertyChanged("EstadoBeneficiado")
				Me.OnEstadoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoBeneficiado_Beneficiado", Storage:="_Beneficiados", ThisKey:="IdEstadoBeneficiado", OtherKey:="IdEstadoBeneficiado")>  _
	Public Property Beneficiados() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiados
		End Get
		Set
			Me._Beneficiados.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.EstadoBeneficiado = Me
	End Sub
	
	Private Sub detach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.EstadoBeneficiado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EstadoUsuario")>  _
Partial Public Class EstadoUsuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEstadoUsuario As Integer
	
	Private _EstadoUsuario As String
	
	Private _Usuarios As EntitySet(Of Usuario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEstadoUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoUsuarioChanged()
    End Sub
    Partial Private Sub OnEstadoUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Usuarios = New EntitySet(Of Usuario)(AddressOf Me.attach_Usuarios, AddressOf Me.detach_Usuarios)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoUsuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdEstadoUsuario() As Integer
		Get
			Return Me._IdEstadoUsuario
		End Get
		Set
			If ((Me._IdEstadoUsuario = value)  _
						= false) Then
				Me.OnIdEstadoUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoUsuario = value
				Me.SendPropertyChanged("IdEstadoUsuario")
				Me.OnIdEstadoUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstadoUsuario", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EstadoUsuario() As String
		Get
			Return Me._EstadoUsuario
		End Get
		Set
			If (String.Equals(Me._EstadoUsuario, value) = false) Then
				Me.OnEstadoUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._EstadoUsuario = value
				Me.SendPropertyChanged("EstadoUsuario")
				Me.OnEstadoUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoUsuario_Usuario", Storage:="_Usuarios", ThisKey:="IdEstadoUsuario", OtherKey:="IdEstadoUsuario")>  _
	Public Property Usuarios() As EntitySet(Of Usuario)
		Get
			Return Me._Usuarios
		End Get
		Set
			Me._Usuarios.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Usuarios(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.EstadoUsuario = Me
	End Sub
	
	Private Sub detach_Usuarios(ByVal entity As Usuario)
		Me.SendPropertyChanging
		entity.EstadoUsuario = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GradoCursado")>  _
Partial Public Class GradoCursado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdGradoCursado As Integer
	
	Private _GradoCursado As String
	
	Private _Beneficiados As EntitySet(Of Beneficiado)
	
	Private _Hermanos As EntitySet(Of Hermano)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdGradoCursadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdGradoCursadoChanged()
    End Sub
    Partial Private Sub OnGradoCursadoChanging(value As String)
    End Sub
    Partial Private Sub OnGradoCursadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiados = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiados, AddressOf Me.detach_Beneficiados)
		Me._Hermanos = New EntitySet(Of Hermano)(AddressOf Me.attach_Hermanos, AddressOf Me.detach_Hermanos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGradoCursado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdGradoCursado() As Integer
		Get
			Return Me._IdGradoCursado
		End Get
		Set
			If ((Me._IdGradoCursado = value)  _
						= false) Then
				Me.OnIdGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._IdGradoCursado = value
				Me.SendPropertyChanged("IdGradoCursado")
				Me.OnIdGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GradoCursado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GradoCursado() As String
		Get
			Return Me._GradoCursado
		End Get
		Set
			If (String.Equals(Me._GradoCursado, value) = false) Then
				Me.OnGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._GradoCursado = value
				Me.SendPropertyChanged("GradoCursado")
				Me.OnGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado_Beneficiado", Storage:="_Beneficiados", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado")>  _
	Public Property Beneficiados() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiados
		End Get
		Set
			Me._Beneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado_Hermano", Storage:="_Hermanos", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado")>  _
	Public Property Hermanos() As EntitySet(Of Hermano)
		Get
			Return Me._Hermanos
		End Get
		Set
			Me._Hermanos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.GradoCursado = Me
	End Sub
	
	Private Sub detach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.GradoCursado = Nothing
	End Sub
	
	Private Sub attach_Hermanos(ByVal entity As Hermano)
		Me.SendPropertyChanging
		entity.GradoCursado = Me
	End Sub
	
	Private Sub detach_Hermanos(ByVal entity As Hermano)
		Me.SendPropertyChanging
		entity.GradoCursado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Hermano")>  _
Partial Public Class Hermano
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdHermano As Integer
	
	Private _NombreHermano As String
	
	Private _ApellidoHermano As String
	
	Private _FechaNac As Date
	
	Private _SponsorHermano As Boolean
	
	Private _IdGradoCursado As Integer
	
	Private _IdSexo As Integer
	
	Private _GradoCursado As EntityRef(Of GradoCursado)
	
	Private _Sexo As EntityRef(Of Sexo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdHermanoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdHermanoChanged()
    End Sub
    Partial Private Sub OnNombreHermanoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreHermanoChanged()
    End Sub
    Partial Private Sub OnApellidoHermanoChanging(value As String)
    End Sub
    Partial Private Sub OnApellidoHermanoChanged()
    End Sub
    Partial Private Sub OnFechaNacChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaNacChanged()
    End Sub
    Partial Private Sub OnSponsorHermanoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnSponsorHermanoChanged()
    End Sub
    Partial Private Sub OnIdGradoCursadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdGradoCursadoChanged()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._GradoCursado = CType(Nothing, EntityRef(Of GradoCursado))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdHermano", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdHermano() As Integer
		Get
			Return Me._IdHermano
		End Get
		Set
			If ((Me._IdHermano = value)  _
						= false) Then
				Me.OnIdHermanoChanging(value)
				Me.SendPropertyChanging
				Me._IdHermano = value
				Me.SendPropertyChanged("IdHermano")
				Me.OnIdHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreHermano", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreHermano() As String
		Get
			Return Me._NombreHermano
		End Get
		Set
			If (String.Equals(Me._NombreHermano, value) = false) Then
				Me.OnNombreHermanoChanging(value)
				Me.SendPropertyChanging
				Me._NombreHermano = value
				Me.SendPropertyChanged("NombreHermano")
				Me.OnNombreHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApellidoHermano", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ApellidoHermano() As String
		Get
			Return Me._ApellidoHermano
		End Get
		Set
			If (String.Equals(Me._ApellidoHermano, value) = false) Then
				Me.OnApellidoHermanoChanging(value)
				Me.SendPropertyChanging
				Me._ApellidoHermano = value
				Me.SendPropertyChanged("ApellidoHermano")
				Me.OnApellidoHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaNac", DbType:="Date NOT NULL")>  _
	Public Property FechaNac() As Date
		Get
			Return Me._FechaNac
		End Get
		Set
			If ((Me._FechaNac = value)  _
						= false) Then
				Me.OnFechaNacChanging(value)
				Me.SendPropertyChanging
				Me._FechaNac = value
				Me.SendPropertyChanged("FechaNac")
				Me.OnFechaNacChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SponsorHermano", DbType:="Bit NOT NULL")>  _
	Public Property SponsorHermano() As Boolean
		Get
			Return Me._SponsorHermano
		End Get
		Set
			If ((Me._SponsorHermano = value)  _
						= false) Then
				Me.OnSponsorHermanoChanging(value)
				Me.SendPropertyChanging
				Me._SponsorHermano = value
				Me.SendPropertyChanged("SponsorHermano")
				Me.OnSponsorHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGradoCursado", DbType:="Int NOT NULL")>  _
	Public Property IdGradoCursado() As Integer
		Get
			Return Me._IdGradoCursado
		End Get
		Set
			If ((Me._IdGradoCursado = value)  _
						= false) Then
				If Me._GradoCursado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._IdGradoCursado = value
				Me.SendPropertyChanged("IdGradoCursado")
				Me.OnIdGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", DbType:="Int NOT NULL")>  _
	Public Property IdSexo() As Integer
		Get
			Return Me._IdSexo
		End Get
		Set
			If ((Me._IdSexo = value)  _
						= false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado_Hermano", Storage:="_GradoCursado", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado", IsForeignKey:=true)>  _
	Public Property GradoCursado() As GradoCursado
		Get
			Return Me._GradoCursado.Entity
		End Get
		Set
			Dim previousValue As GradoCursado = Me._GradoCursado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GradoCursado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GradoCursado.Entity = Nothing
					previousValue.Hermanos.Remove(Me)
				End If
				Me._GradoCursado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hermanos.Add(Me)
					Me._IdGradoCursado = value.IdGradoCursado
				Else
					Me._IdGradoCursado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("GradoCursado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Hermano", Storage:="_Sexo", ThisKey:="IdSexo", OtherKey:="IdSexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Hermanos.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hermanos.Add(Me)
					Me._IdSexo = value.IdSexo
				Else
					Me._IdSexo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Iglesia")>  _
Partial Public Class Iglesia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdIglesia As Integer
	
	Private _Iglesia As String
	
	Private _NombrePastor As String
	
	Private _Beneficiados As EntitySet(Of Beneficiado)
	
	Private _Tutors As EntitySet(Of Tutor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdIglesiaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIglesiaChanged()
    End Sub
    Partial Private Sub OnIglesiaChanging(value As String)
    End Sub
    Partial Private Sub OnIglesiaChanged()
    End Sub
    Partial Private Sub OnNombrePastorChanging(value As String)
    End Sub
    Partial Private Sub OnNombrePastorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiados = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiados, AddressOf Me.detach_Beneficiados)
		Me._Tutors = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutors, AddressOf Me.detach_Tutors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdIglesia", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdIglesia() As Integer
		Get
			Return Me._IdIglesia
		End Get
		Set
			If ((Me._IdIglesia = value)  _
						= false) Then
				Me.OnIdIglesiaChanging(value)
				Me.SendPropertyChanging
				Me._IdIglesia = value
				Me.SendPropertyChanged("IdIglesia")
				Me.OnIdIglesiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Iglesia", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Iglesia() As String
		Get
			Return Me._Iglesia
		End Get
		Set
			If (String.Equals(Me._Iglesia, value) = false) Then
				Me.OnIglesiaChanging(value)
				Me.SendPropertyChanging
				Me._Iglesia = value
				Me.SendPropertyChanged("Iglesia")
				Me.OnIglesiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombrePastor", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property NombrePastor() As String
		Get
			Return Me._NombrePastor
		End Get
		Set
			If (String.Equals(Me._NombrePastor, value) = false) Then
				Me.OnNombrePastorChanging(value)
				Me.SendPropertyChanging
				Me._NombrePastor = value
				Me.SendPropertyChanged("NombrePastor")
				Me.OnNombrePastorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Iglesia_Beneficiado", Storage:="_Beneficiados", ThisKey:="IdIglesia", OtherKey:="IdIglesia")>  _
	Public Property Beneficiados() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiados
		End Get
		Set
			Me._Beneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Iglesia_Tutor", Storage:="_Tutors", ThisKey:="IdIglesia", OtherKey:="IdIglesia")>  _
	Public Property Tutors() As EntitySet(Of Tutor)
		Get
			Return Me._Tutors
		End Get
		Set
			Me._Tutors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Iglesia = Me
	End Sub
	
	Private Sub detach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Iglesia = Nothing
	End Sub
	
	Private Sub attach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Iglesia = Me
	End Sub
	
	Private Sub detach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Iglesia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Institucion")>  _
Partial Public Class Institucion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdInstitucion As Integer
	
	Private _Institucion As String
	
	Private _IdTipoInstitucion As Integer
	
	Private _Beneficiados As EntitySet(Of Beneficiado)
	
	Private _TipoInstitucion As EntityRef(Of TipoInstitucion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdInstitucionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdInstitucionChanged()
    End Sub
    Partial Private Sub OnInstitucionChanging(value As String)
    End Sub
    Partial Private Sub OnInstitucionChanged()
    End Sub
    Partial Private Sub OnIdTipoInstitucionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoInstitucionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiados = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiados, AddressOf Me.detach_Beneficiados)
		Me._TipoInstitucion = CType(Nothing, EntityRef(Of TipoInstitucion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInstitucion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdInstitucion() As Integer
		Get
			Return Me._IdInstitucion
		End Get
		Set
			If ((Me._IdInstitucion = value)  _
						= false) Then
				Me.OnIdInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._IdInstitucion = value
				Me.SendPropertyChanged("IdInstitucion")
				Me.OnIdInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Institucion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Institucion() As String
		Get
			Return Me._Institucion
		End Get
		Set
			If (String.Equals(Me._Institucion, value) = false) Then
				Me.OnInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._Institucion = value
				Me.SendPropertyChanged("Institucion")
				Me.OnInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoInstitucion", DbType:="Int NOT NULL")>  _
	Public Property IdTipoInstitucion() As Integer
		Get
			Return Me._IdTipoInstitucion
		End Get
		Set
			If ((Me._IdTipoInstitucion = value)  _
						= false) Then
				If Me._TipoInstitucion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoInstitucion = value
				Me.SendPropertyChanged("IdTipoInstitucion")
				Me.OnIdTipoInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Institucion_Beneficiado", Storage:="_Beneficiados", ThisKey:="IdInstitucion", OtherKey:="IdInstitucion")>  _
	Public Property Beneficiados() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiados
		End Get
		Set
			Me._Beneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoInstitucion_Institucion", Storage:="_TipoInstitucion", ThisKey:="IdTipoInstitucion", OtherKey:="IdTipoInstitucion", IsForeignKey:=true)>  _
	Public Property TipoInstitucion() As TipoInstitucion
		Get
			Return Me._TipoInstitucion.Entity
		End Get
		Set
			Dim previousValue As TipoInstitucion = Me._TipoInstitucion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoInstitucion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoInstitucion.Entity = Nothing
					previousValue.Institucions.Remove(Me)
				End If
				Me._TipoInstitucion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Institucions.Add(Me)
					Me._IdTipoInstitucion = value.IdTipoInstitucion
				Else
					Me._IdTipoInstitucion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoInstitucion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Institucion = Me
	End Sub
	
	Private Sub detach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Institucion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InteresesBeneficiado")>  _
Partial Public Class InteresesBeneficiado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdIntereseBeneficiado As Integer
	
	Private _GustaComerBeneficiado As String
	
	Private _GustaJugarBeneficiado As String
	
	Private _GustaTenerBeneficiado As String
	
	Private _IdBeneficiado As Integer
	
	Private _Beneficiado As EntityRef(Of Beneficiado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdIntereseBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIntereseBeneficiadoChanged()
    End Sub
    Partial Private Sub OnGustaComerBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnGustaComerBeneficiadoChanged()
    End Sub
    Partial Private Sub OnGustaJugarBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnGustaJugarBeneficiadoChanged()
    End Sub
    Partial Private Sub OnGustaTenerBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnGustaTenerBeneficiadoChanged()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = CType(Nothing, EntityRef(Of Beneficiado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdIntereseBeneficiado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdIntereseBeneficiado() As Integer
		Get
			Return Me._IdIntereseBeneficiado
		End Get
		Set
			If ((Me._IdIntereseBeneficiado = value)  _
						= false) Then
				Me.OnIdIntereseBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdIntereseBeneficiado = value
				Me.SendPropertyChanged("IdIntereseBeneficiado")
				Me.OnIdIntereseBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GustaComerBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GustaComerBeneficiado() As String
		Get
			Return Me._GustaComerBeneficiado
		End Get
		Set
			If (String.Equals(Me._GustaComerBeneficiado, value) = false) Then
				Me.OnGustaComerBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._GustaComerBeneficiado = value
				Me.SendPropertyChanged("GustaComerBeneficiado")
				Me.OnGustaComerBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GustaJugarBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GustaJugarBeneficiado() As String
		Get
			Return Me._GustaJugarBeneficiado
		End Get
		Set
			If (String.Equals(Me._GustaJugarBeneficiado, value) = false) Then
				Me.OnGustaJugarBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._GustaJugarBeneficiado = value
				Me.SendPropertyChanged("GustaJugarBeneficiado")
				Me.OnGustaJugarBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GustaTenerBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GustaTenerBeneficiado() As String
		Get
			Return Me._GustaTenerBeneficiado
		End Get
		Set
			If (String.Equals(Me._GustaTenerBeneficiado, value) = false) Then
				Me.OnGustaTenerBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._GustaTenerBeneficiado = value
				Me.SendPropertyChanged("GustaTenerBeneficiado")
				Me.OnGustaTenerBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				If Me._Beneficiado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_InteresesBeneficiado", Storage:="_Beneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado", IsForeignKey:=true)>  _
	Public Property Beneficiado() As Beneficiado
		Get
			Return Me._Beneficiado.Entity
		End Get
		Set
			Dim previousValue As Beneficiado = Me._Beneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Beneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Beneficiado.Entity = Nothing
					previousValue.InteresesBeneficiados.Remove(Me)
				End If
				Me._Beneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InteresesBeneficiados.Add(Me)
					Me._IdBeneficiado = value.IdBeneficiado
				Else
					Me._IdBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Beneficiado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Lugar")>  _
Partial Public Class Lugar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdLugar As Integer
	
	Private _Lugar As String
	
	Private _IdPais As Integer
	
	Private _Beneficiados As EntitySet(Of Beneficiado)
	
	Private _Tutors As EntitySet(Of Tutor)
	
	Private _Pai As EntityRef(Of Pai)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdLugarChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLugarChanged()
    End Sub
    Partial Private Sub OnLugarChanging(value As String)
    End Sub
    Partial Private Sub OnLugarChanged()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiados = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiados, AddressOf Me.detach_Beneficiados)
		Me._Tutors = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutors, AddressOf Me.detach_Tutors)
		Me._Pai = CType(Nothing, EntityRef(Of Pai))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLugar", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdLugar() As Integer
		Get
			Return Me._IdLugar
		End Get
		Set
			If ((Me._IdLugar = value)  _
						= false) Then
				Me.OnIdLugarChanging(value)
				Me.SendPropertyChanging
				Me._IdLugar = value
				Me.SendPropertyChanged("IdLugar")
				Me.OnIdLugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lugar", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Lugar() As String
		Get
			Return Me._Lugar
		End Get
		Set
			If (String.Equals(Me._Lugar, value) = false) Then
				Me.OnLugarChanging(value)
				Me.SendPropertyChanging
				Me._Lugar = value
				Me.SendPropertyChanged("Lugar")
				Me.OnLugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", DbType:="Int NOT NULL")>  _
	Public Property IdPais() As Integer
		Get
			Return Me._IdPais
		End Get
		Set
			If ((Me._IdPais = value)  _
						= false) Then
				If Me._Pai.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lugar_Beneficiado", Storage:="_Beneficiados", ThisKey:="IdLugar", OtherKey:="IdLugar")>  _
	Public Property Beneficiados() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiados
		End Get
		Set
			Me._Beneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lugar_Tutor", Storage:="_Tutors", ThisKey:="IdLugar", OtherKey:="IdLugar")>  _
	Public Property Tutors() As EntitySet(Of Tutor)
		Get
			Return Me._Tutors
		End Get
		Set
			Me._Tutors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pai_Lugar", Storage:="_Pai", ThisKey:="IdPais", OtherKey:="IdPais", IsForeignKey:=true)>  _
	Public Property Pai() As Pai
		Get
			Return Me._Pai.Entity
		End Get
		Set
			Dim previousValue As Pai = Me._Pai.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pai.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pai.Entity = Nothing
					previousValue.Lugars.Remove(Me)
				End If
				Me._Pai.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Lugars.Add(Me)
					Me._IdPais = value.IdPais
				Else
					Me._IdPais = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Pai")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Lugar = Me
	End Sub
	
	Private Sub detach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Lugar = Nothing
	End Sub
	
	Private Sub attach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Lugar = Me
	End Sub
	
	Private Sub detach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Lugar = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Nacionalidad")>  _
Partial Public Class Nacionalidad
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdNacionalidad As Integer
	
	Private _Nacionalidad As String
	
	Private _Beneficiados As EntitySet(Of Beneficiado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdNacionalidadChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdNacionalidadChanged()
    End Sub
    Partial Private Sub OnNacionalidadChanging(value As String)
    End Sub
    Partial Private Sub OnNacionalidadChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiados = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiados, AddressOf Me.detach_Beneficiados)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdNacionalidad", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdNacionalidad() As Integer
		Get
			Return Me._IdNacionalidad
		End Get
		Set
			If ((Me._IdNacionalidad = value)  _
						= false) Then
				Me.OnIdNacionalidadChanging(value)
				Me.SendPropertyChanging
				Me._IdNacionalidad = value
				Me.SendPropertyChanged("IdNacionalidad")
				Me.OnIdNacionalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nacionalidad", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nacionalidad() As String
		Get
			Return Me._Nacionalidad
		End Get
		Set
			If (String.Equals(Me._Nacionalidad, value) = false) Then
				Me.OnNacionalidadChanging(value)
				Me.SendPropertyChanging
				Me._Nacionalidad = value
				Me.SendPropertyChanged("Nacionalidad")
				Me.OnNacionalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Nacionalidad_Beneficiado", Storage:="_Beneficiados", ThisKey:="IdNacionalidad", OtherKey:="IdNacionalidad")>  _
	Public Property Beneficiados() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiados
		End Get
		Set
			Me._Beneficiados.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Nacionalidad = Me
	End Sub
	
	Private Sub detach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Nacionalidad = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OficioProfesion")>  _
Partial Public Class OficioProfesion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdOficioProfesion As Integer
	
	Private _OficioProfesion As String
	
	Private _Tutors As EntitySet(Of Tutor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdOficioProfesionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdOficioProfesionChanged()
    End Sub
    Partial Private Sub OnOficioProfesionChanging(value As String)
    End Sub
    Partial Private Sub OnOficioProfesionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tutors = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutors, AddressOf Me.detach_Tutors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdOficioProfesion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdOficioProfesion() As Integer
		Get
			Return Me._IdOficioProfesion
		End Get
		Set
			If ((Me._IdOficioProfesion = value)  _
						= false) Then
				Me.OnIdOficioProfesionChanging(value)
				Me.SendPropertyChanging
				Me._IdOficioProfesion = value
				Me.SendPropertyChanged("IdOficioProfesion")
				Me.OnIdOficioProfesionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OficioProfesion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OficioProfesion() As String
		Get
			Return Me._OficioProfesion
		End Get
		Set
			If (String.Equals(Me._OficioProfesion, value) = false) Then
				Me.OnOficioProfesionChanging(value)
				Me.SendPropertyChanging
				Me._OficioProfesion = value
				Me.SendPropertyChanged("OficioProfesion")
				Me.OnOficioProfesionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OficioProfesion_Tutor", Storage:="_Tutors", ThisKey:="IdOficioProfesion", OtherKey:="IdOficioProfesion")>  _
	Public Property Tutors() As EntitySet(Of Tutor)
		Get
			Return Me._Tutors
		End Get
		Set
			Me._Tutors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.OficioProfesion = Me
	End Sub
	
	Private Sub detach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.OficioProfesion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ofrenda")>  _
Partial Public Class Ofrenda
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdOfrenda As Integer
	
	Private _FechaRecibida As Date
	
	Private _fechaEntregado As Date
	
	Private _DescripcionOfrenda As String
	
	Private _IdTipoOfrenda As Integer
	
	Private _IdAdopcion As Integer
	
	Private _IdUsuario As Integer
	
	Private _Adopcion As EntityRef(Of Adopcion)
	
	Private _TipoOfrenda As EntityRef(Of TipoOfrenda)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdOfrendaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdOfrendaChanged()
    End Sub
    Partial Private Sub OnFechaRecibidaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaRecibidaChanged()
    End Sub
    Partial Private Sub OnfechaEntregadoChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaEntregadoChanged()
    End Sub
    Partial Private Sub OnDescripcionOfrendaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionOfrendaChanged()
    End Sub
    Partial Private Sub OnIdTipoOfrendaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoOfrendaChanged()
    End Sub
    Partial Private Sub OnIdAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAdopcionChanged()
    End Sub
    Partial Private Sub OnIdUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = CType(Nothing, EntityRef(Of Adopcion))
		Me._TipoOfrenda = CType(Nothing, EntityRef(Of TipoOfrenda))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdOfrenda", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdOfrenda() As Integer
		Get
			Return Me._IdOfrenda
		End Get
		Set
			If ((Me._IdOfrenda = value)  _
						= false) Then
				Me.OnIdOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._IdOfrenda = value
				Me.SendPropertyChanged("IdOfrenda")
				Me.OnIdOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaRecibida", DbType:="Date NOT NULL")>  _
	Public Property FechaRecibida() As Date
		Get
			Return Me._FechaRecibida
		End Get
		Set
			If ((Me._FechaRecibida = value)  _
						= false) Then
				Me.OnFechaRecibidaChanging(value)
				Me.SendPropertyChanging
				Me._FechaRecibida = value
				Me.SendPropertyChanged("FechaRecibida")
				Me.OnFechaRecibidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fechaEntregado", DbType:="Date NOT NULL")>  _
	Public Property fechaEntregado() As Date
		Get
			Return Me._fechaEntregado
		End Get
		Set
			If ((Me._fechaEntregado = value)  _
						= false) Then
				Me.OnfechaEntregadoChanging(value)
				Me.SendPropertyChanging
				Me._fechaEntregado = value
				Me.SendPropertyChanged("fechaEntregado")
				Me.OnfechaEntregadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionOfrenda", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property DescripcionOfrenda() As String
		Get
			Return Me._DescripcionOfrenda
		End Get
		Set
			If (String.Equals(Me._DescripcionOfrenda, value) = false) Then
				Me.OnDescripcionOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionOfrenda = value
				Me.SendPropertyChanged("DescripcionOfrenda")
				Me.OnDescripcionOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoOfrenda", DbType:="Int NOT NULL")>  _
	Public Property IdTipoOfrenda() As Integer
		Get
			Return Me._IdTipoOfrenda
		End Get
		Set
			If ((Me._IdTipoOfrenda = value)  _
						= false) Then
				If Me._TipoOfrenda.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoOfrenda = value
				Me.SendPropertyChanged("IdTipoOfrenda")
				Me.OnIdTipoOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAdopcion", DbType:="Int NOT NULL")>  _
	Public Property IdAdopcion() As Integer
		Get
			Return Me._IdAdopcion
		End Get
		Set
			If ((Me._IdAdopcion = value)  _
						= false) Then
				If Me._Adopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdAdopcion = value
				Me.SendPropertyChanged("IdAdopcion")
				Me.OnIdAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuario = value
				Me.SendPropertyChanged("IdUsuario")
				Me.OnIdUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_Ofrenda", Storage:="_Adopcion", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion", IsForeignKey:=true)>  _
	Public Property Adopcion() As Adopcion
		Get
			Return Me._Adopcion.Entity
		End Get
		Set
			Dim previousValue As Adopcion = Me._Adopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Adopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Adopcion.Entity = Nothing
					previousValue.Ofrendas.Remove(Me)
				End If
				Me._Adopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ofrendas.Add(Me)
					Me._IdAdopcion = value.IdAdopcion
				Else
					Me._IdAdopcion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Adopcion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoOfrenda_Ofrenda", Storage:="_TipoOfrenda", ThisKey:="IdTipoOfrenda", OtherKey:="IdTipoOfrenda", IsForeignKey:=true)>  _
	Public Property TipoOfrenda() As TipoOfrenda
		Get
			Return Me._TipoOfrenda.Entity
		End Get
		Set
			Dim previousValue As TipoOfrenda = Me._TipoOfrenda.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoOfrenda.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoOfrenda.Entity = Nothing
					previousValue.Ofrendas.Remove(Me)
				End If
				Me._TipoOfrenda.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ofrendas.Add(Me)
					Me._IdTipoOfrenda = value.IdTipoOfrenda
				Else
					Me._IdTipoOfrenda = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoOfrenda")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Ofrenda", Storage:="_Usuario", ThisKey:="IdUsuario", OtherKey:="IdUsuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Ofrendas.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ofrendas.Add(Me)
					Me._IdUsuario = value.IdUsuario
				Else
					Me._IdUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Pais")>  _
Partial Public Class Pai
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdPais As Integer
	
	Private _Pais As String
	
	Private _Lugars As EntitySet(Of Lugar)
	
	Private _Sponsors As EntitySet(Of Sponsor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Lugars = New EntitySet(Of Lugar)(AddressOf Me.attach_Lugars, AddressOf Me.detach_Lugars)
		Me._Sponsors = New EntitySet(Of Sponsor)(AddressOf Me.attach_Sponsors, AddressOf Me.detach_Sponsors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdPais() As Integer
		Get
			Return Me._IdPais
		End Get
		Set
			If ((Me._IdPais = value)  _
						= false) Then
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pai_Lugar", Storage:="_Lugars", ThisKey:="IdPais", OtherKey:="IdPais")>  _
	Public Property Lugars() As EntitySet(Of Lugar)
		Get
			Return Me._Lugars
		End Get
		Set
			Me._Lugars.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pai_Sponsor", Storage:="_Sponsors", ThisKey:="IdPais", OtherKey:="IdPais")>  _
	Public Property Sponsors() As EntitySet(Of Sponsor)
		Get
			Return Me._Sponsors
		End Get
		Set
			Me._Sponsors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Lugars(ByVal entity As Lugar)
		Me.SendPropertyChanging
		entity.Pai = Me
	End Sub
	
	Private Sub detach_Lugars(ByVal entity As Lugar)
		Me.SendPropertyChanging
		entity.Pai = Nothing
	End Sub
	
	Private Sub attach_Sponsors(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Pai = Me
	End Sub
	
	Private Sub detach_Sponsors(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Pai = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parentesco")>  _
Partial Public Class Parentesco
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdParentesco As Integer
	
	Private _Parentesco As String
	
	Private _Tutors As EntitySet(Of Tutor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdParentescoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdParentescoChanged()
    End Sub
    Partial Private Sub OnParentescoChanging(value As String)
    End Sub
    Partial Private Sub OnParentescoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tutors = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutors, AddressOf Me.detach_Tutors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdParentesco", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdParentesco() As Integer
		Get
			Return Me._IdParentesco
		End Get
		Set
			If ((Me._IdParentesco = value)  _
						= false) Then
				Me.OnIdParentescoChanging(value)
				Me.SendPropertyChanging
				Me._IdParentesco = value
				Me.SendPropertyChanged("IdParentesco")
				Me.OnIdParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parentesco", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Parentesco() As String
		Get
			Return Me._Parentesco
		End Get
		Set
			If (String.Equals(Me._Parentesco, value) = false) Then
				Me.OnParentescoChanging(value)
				Me.SendPropertyChanging
				Me._Parentesco = value
				Me.SendPropertyChanged("Parentesco")
				Me.OnParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parentesco_Tutor", Storage:="_Tutors", ThisKey:="IdParentesco", OtherKey:="IdParentesco")>  _
	Public Property Tutors() As EntitySet(Of Tutor)
		Get
			Return Me._Tutors
		End Get
		Set
			Me._Tutors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Parentesco = Me
	End Sub
	
	Private Sub detach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Parentesco = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RemitenteDestinatario")>  _
Partial Public Class RemitenteDestinatario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdRemitenteDestinatario As Integer
	
	Private _RemitenteDestinatario As String
	
	Private _Cartas As EntitySet(Of Carta)
	
	Private _Cartas1 As EntitySet(Of Carta)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdRemitenteDestinatarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdRemitenteDestinatarioChanged()
    End Sub
    Partial Private Sub OnRemitenteDestinatarioChanging(value As String)
    End Sub
    Partial Private Sub OnRemitenteDestinatarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cartas = New EntitySet(Of Carta)(AddressOf Me.attach_Cartas, AddressOf Me.detach_Cartas)
		Me._Cartas1 = New EntitySet(Of Carta)(AddressOf Me.attach_Cartas1, AddressOf Me.detach_Cartas1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdRemitenteDestinatario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdRemitenteDestinatario() As Integer
		Get
			Return Me._IdRemitenteDestinatario
		End Get
		Set
			If ((Me._IdRemitenteDestinatario = value)  _
						= false) Then
				Me.OnIdRemitenteDestinatarioChanging(value)
				Me.SendPropertyChanging
				Me._IdRemitenteDestinatario = value
				Me.SendPropertyChanged("IdRemitenteDestinatario")
				Me.OnIdRemitenteDestinatarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemitenteDestinatario", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RemitenteDestinatario() As String
		Get
			Return Me._RemitenteDestinatario
		End Get
		Set
			If (String.Equals(Me._RemitenteDestinatario, value) = false) Then
				Me.OnRemitenteDestinatarioChanging(value)
				Me.SendPropertyChanging
				Me._RemitenteDestinatario = value
				Me.SendPropertyChanged("RemitenteDestinatario")
				Me.OnRemitenteDestinatarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RemitenteDestinatario_Carta", Storage:="_Cartas", ThisKey:="IdRemitenteDestinatario", OtherKey:="Destinatario")>  _
	Public Property Cartas() As EntitySet(Of Carta)
		Get
			Return Me._Cartas
		End Get
		Set
			Me._Cartas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RemitenteDestinatario_Carta1", Storage:="_Cartas1", ThisKey:="IdRemitenteDestinatario", OtherKey:="Remitente")>  _
	Public Property Cartas1() As EntitySet(Of Carta)
		Get
			Return Me._Cartas1
		End Get
		Set
			Me._Cartas1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cartas(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.RemitenteDestinatario = Me
	End Sub
	
	Private Sub detach_Cartas(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.RemitenteDestinatario = Nothing
	End Sub
	
	Private Sub attach_Cartas1(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.RemitenteDestinatario1 = Me
	End Sub
	
	Private Sub detach_Cartas1(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.RemitenteDestinatario1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sexo")>  _
Partial Public Class Sexo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdSexo As Integer
	
	Private _Sexo As String
	
	Private _Beneficiados As EntitySet(Of Beneficiado)
	
	Private _Hermanos As EntitySet(Of Hermano)
	
	Private _Sponsors As EntitySet(Of Sponsor)
	
	Private _Tutors As EntitySet(Of Tutor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    Partial Private Sub OnSexoChanging(value As String)
    End Sub
    Partial Private Sub OnSexoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiados = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiados, AddressOf Me.detach_Beneficiados)
		Me._Hermanos = New EntitySet(Of Hermano)(AddressOf Me.attach_Hermanos, AddressOf Me.detach_Hermanos)
		Me._Sponsors = New EntitySet(Of Sponsor)(AddressOf Me.attach_Sponsors, AddressOf Me.detach_Sponsors)
		Me._Tutors = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutors, AddressOf Me.detach_Tutors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdSexo() As Integer
		Get
			Return Me._IdSexo
		End Get
		Set
			If ((Me._IdSexo = value)  _
						= false) Then
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sexo", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Sexo() As String
		Get
			Return Me._Sexo
		End Get
		Set
			If (String.Equals(Me._Sexo, value) = false) Then
				Me.OnSexoChanging(value)
				Me.SendPropertyChanging
				Me._Sexo = value
				Me.SendPropertyChanged("Sexo")
				Me.OnSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Beneficiado", Storage:="_Beneficiados", ThisKey:="IdSexo", OtherKey:="IdSexo")>  _
	Public Property Beneficiados() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiados
		End Get
		Set
			Me._Beneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Hermano", Storage:="_Hermanos", ThisKey:="IdSexo", OtherKey:="IdSexo")>  _
	Public Property Hermanos() As EntitySet(Of Hermano)
		Get
			Return Me._Hermanos
		End Get
		Set
			Me._Hermanos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Sponsor", Storage:="_Sponsors", ThisKey:="IdSexo", OtherKey:="IdSexo")>  _
	Public Property Sponsors() As EntitySet(Of Sponsor)
		Get
			Return Me._Sponsors
		End Get
		Set
			Me._Sponsors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Tutor", Storage:="_Tutors", ThisKey:="IdSexo", OtherKey:="IdSexo")>  _
	Public Property Tutors() As EntitySet(Of Tutor)
		Get
			Return Me._Tutors
		End Get
		Set
			Me._Tutors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
	
	Private Sub attach_Hermanos(ByVal entity As Hermano)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Hermanos(ByVal entity As Hermano)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
	
	Private Sub attach_Sponsors(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Sponsors(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
	
	Private Sub attach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sponsor")>  _
Partial Public Class Sponsor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdSponsor As Integer
	
	Private _NombreCompletoSponsor As String
	
	Private _Direccion As String
	
	Private _CorreoElectronico As String
	
	Private _IdSexo As System.Nullable(Of Integer)
	
	Private _IdPais As Integer
	
	Private _IdTipoSponsor As Integer
	
	Private _IdUsuario As Integer
	
	Private _Adopcions As EntitySet(Of Adopcion)
	
	Private _Pai As EntityRef(Of Pai)
	
	Private _Sexo As EntityRef(Of Sexo)
	
	Private _TipoSponsor As EntityRef(Of TipoSponsor)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdSponsorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSponsorChanged()
    End Sub
    Partial Private Sub OnNombreCompletoSponsorChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCompletoSponsorChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnCorreoElectronicoChanging(value As String)
    End Sub
    Partial Private Sub OnCorreoElectronicoChanged()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    Partial Private Sub OnIdTipoSponsorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoSponsorChanged()
    End Sub
    Partial Private Sub OnIdUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcions = New EntitySet(Of Adopcion)(AddressOf Me.attach_Adopcions, AddressOf Me.detach_Adopcions)
		Me._Pai = CType(Nothing, EntityRef(Of Pai))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		Me._TipoSponsor = CType(Nothing, EntityRef(Of TipoSponsor))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSponsor", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdSponsor() As Integer
		Get
			Return Me._IdSponsor
		End Get
		Set
			If ((Me._IdSponsor = value)  _
						= false) Then
				Me.OnIdSponsorChanging(value)
				Me.SendPropertyChanging
				Me._IdSponsor = value
				Me.SendPropertyChanged("IdSponsor")
				Me.OnIdSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCompletoSponsor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreCompletoSponsor() As String
		Get
			Return Me._NombreCompletoSponsor
		End Get
		Set
			If (String.Equals(Me._NombreCompletoSponsor, value) = false) Then
				Me.OnNombreCompletoSponsorChanging(value)
				Me.SendPropertyChanging
				Me._NombreCompletoSponsor = value
				Me.SendPropertyChanged("NombreCompletoSponsor")
				Me.OnNombreCompletoSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorreoElectronico", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CorreoElectronico() As String
		Get
			Return Me._CorreoElectronico
		End Get
		Set
			If (String.Equals(Me._CorreoElectronico, value) = false) Then
				Me.OnCorreoElectronicoChanging(value)
				Me.SendPropertyChanging
				Me._CorreoElectronico = value
				Me.SendPropertyChanged("CorreoElectronico")
				Me.OnCorreoElectronicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", DbType:="Int")>  _
	Public Property IdSexo() As System.Nullable(Of Integer)
		Get
			Return Me._IdSexo
		End Get
		Set
			If (Me._IdSexo.Equals(value) = false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", DbType:="Int NOT NULL")>  _
	Public Property IdPais() As Integer
		Get
			Return Me._IdPais
		End Get
		Set
			If ((Me._IdPais = value)  _
						= false) Then
				If Me._Pai.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoSponsor", DbType:="Int NOT NULL")>  _
	Public Property IdTipoSponsor() As Integer
		Get
			Return Me._IdTipoSponsor
		End Get
		Set
			If ((Me._IdTipoSponsor = value)  _
						= false) Then
				If Me._TipoSponsor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoSponsorChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoSponsor = value
				Me.SendPropertyChanged("IdTipoSponsor")
				Me.OnIdTipoSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuario = value
				Me.SendPropertyChanged("IdUsuario")
				Me.OnIdUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sponsor_Adopcion", Storage:="_Adopcions", ThisKey:="IdSponsor", OtherKey:="IdSponsor")>  _
	Public Property Adopcions() As EntitySet(Of Adopcion)
		Get
			Return Me._Adopcions
		End Get
		Set
			Me._Adopcions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pai_Sponsor", Storage:="_Pai", ThisKey:="IdPais", OtherKey:="IdPais", IsForeignKey:=true)>  _
	Public Property Pai() As Pai
		Get
			Return Me._Pai.Entity
		End Get
		Set
			Dim previousValue As Pai = Me._Pai.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pai.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pai.Entity = Nothing
					previousValue.Sponsors.Remove(Me)
				End If
				Me._Pai.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sponsors.Add(Me)
					Me._IdPais = value.IdPais
				Else
					Me._IdPais = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Pai")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Sponsor", Storage:="_Sexo", ThisKey:="IdSexo", OtherKey:="IdSexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Sponsors.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sponsors.Add(Me)
					Me._IdSexo = value.IdSexo
				Else
					Me._IdSexo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoSponsor_Sponsor", Storage:="_TipoSponsor", ThisKey:="IdTipoSponsor", OtherKey:="IdTipoSponsor", IsForeignKey:=true)>  _
	Public Property TipoSponsor() As TipoSponsor
		Get
			Return Me._TipoSponsor.Entity
		End Get
		Set
			Dim previousValue As TipoSponsor = Me._TipoSponsor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoSponsor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoSponsor.Entity = Nothing
					previousValue.Sponsors.Remove(Me)
				End If
				Me._TipoSponsor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sponsors.Add(Me)
					Me._IdTipoSponsor = value.IdTipoSponsor
				Else
					Me._IdTipoSponsor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoSponsor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Sponsor", Storage:="_Usuario", ThisKey:="IdUsuario", OtherKey:="IdUsuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Sponsors.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sponsors.Add(Me)
					Me._IdUsuario = value.IdUsuario
				Else
					Me._IdUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Sponsor = Me
	End Sub
	
	Private Sub detach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Sponsor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoCarta")>  _
Partial Public Class TipoCarta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoCarta As Integer
	
	Private _TipoCarta As String
	
	Private _Cartas As EntitySet(Of Carta)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoCartaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCartaChanged()
    End Sub
    Partial Private Sub OnTipoCartaChanging(value As String)
    End Sub
    Partial Private Sub OnTipoCartaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cartas = New EntitySet(Of Carta)(AddressOf Me.attach_Cartas, AddressOf Me.detach_Cartas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCarta", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdTipoCarta() As Integer
		Get
			Return Me._IdTipoCarta
		End Get
		Set
			If ((Me._IdTipoCarta = value)  _
						= false) Then
				Me.OnIdTipoCartaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCarta = value
				Me.SendPropertyChanged("IdTipoCarta")
				Me.OnIdTipoCartaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoCarta", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoCarta() As String
		Get
			Return Me._TipoCarta
		End Get
		Set
			If (String.Equals(Me._TipoCarta, value) = false) Then
				Me.OnTipoCartaChanging(value)
				Me.SendPropertyChanging
				Me._TipoCarta = value
				Me.SendPropertyChanged("TipoCarta")
				Me.OnTipoCartaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCarta_Carta", Storage:="_Cartas", ThisKey:="IdTipoCarta", OtherKey:="IdTipoCarta")>  _
	Public Property Cartas() As EntitySet(Of Carta)
		Get
			Return Me._Cartas
		End Get
		Set
			Me._Cartas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cartas(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.TipoCarta = Me
	End Sub
	
	Private Sub detach_Cartas(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.TipoCarta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoCasa")>  _
Partial Public Class TipoCasa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoCasa As Integer
	
	Private _TipoCasa As String
	
	Private _CasaBeneficiados As EntitySet(Of CasaBeneficiado)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoCasaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCasaChanged()
    End Sub
    Partial Private Sub OnTipoCasaChanging(value As String)
    End Sub
    Partial Private Sub OnTipoCasaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CasaBeneficiados = New EntitySet(Of CasaBeneficiado)(AddressOf Me.attach_CasaBeneficiados, AddressOf Me.detach_CasaBeneficiados)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCasa", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdTipoCasa() As Integer
		Get
			Return Me._IdTipoCasa
		End Get
		Set
			If ((Me._IdTipoCasa = value)  _
						= false) Then
				Me.OnIdTipoCasaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCasa = value
				Me.SendPropertyChanged("IdTipoCasa")
				Me.OnIdTipoCasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoCasa", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoCasa() As String
		Get
			Return Me._TipoCasa
		End Get
		Set
			If (String.Equals(Me._TipoCasa, value) = false) Then
				Me.OnTipoCasaChanging(value)
				Me.SendPropertyChanging
				Me._TipoCasa = value
				Me.SendPropertyChanged("TipoCasa")
				Me.OnTipoCasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCasa_CasaBeneficiado", Storage:="_CasaBeneficiados", ThisKey:="IdTipoCasa", OtherKey:="IdTipoCasa")>  _
	Public Property CasaBeneficiados() As EntitySet(Of CasaBeneficiado)
		Get
			Return Me._CasaBeneficiados
		End Get
		Set
			Me._CasaBeneficiados.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CasaBeneficiados(ByVal entity As CasaBeneficiado)
		Me.SendPropertyChanging
		entity.TipoCasa = Me
	End Sub
	
	Private Sub detach_CasaBeneficiados(ByVal entity As CasaBeneficiado)
		Me.SendPropertyChanging
		entity.TipoCasa = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoInstitucion")>  _
Partial Public Class TipoInstitucion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoInstitucion As Integer
	
	Private _TipoInstitucion As String
	
	Private _Institucions As EntitySet(Of Institucion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoInstitucionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoInstitucionChanged()
    End Sub
    Partial Private Sub OnTipoInstitucionChanging(value As String)
    End Sub
    Partial Private Sub OnTipoInstitucionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Institucions = New EntitySet(Of Institucion)(AddressOf Me.attach_Institucions, AddressOf Me.detach_Institucions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoInstitucion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdTipoInstitucion() As Integer
		Get
			Return Me._IdTipoInstitucion
		End Get
		Set
			If ((Me._IdTipoInstitucion = value)  _
						= false) Then
				Me.OnIdTipoInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoInstitucion = value
				Me.SendPropertyChanged("IdTipoInstitucion")
				Me.OnIdTipoInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoInstitucion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoInstitucion() As String
		Get
			Return Me._TipoInstitucion
		End Get
		Set
			If (String.Equals(Me._TipoInstitucion, value) = false) Then
				Me.OnTipoInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._TipoInstitucion = value
				Me.SendPropertyChanged("TipoInstitucion")
				Me.OnTipoInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoInstitucion_Institucion", Storage:="_Institucions", ThisKey:="IdTipoInstitucion", OtherKey:="IdTipoInstitucion")>  _
	Public Property Institucions() As EntitySet(Of Institucion)
		Get
			Return Me._Institucions
		End Get
		Set
			Me._Institucions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Institucions(ByVal entity As Institucion)
		Me.SendPropertyChanging
		entity.TipoInstitucion = Me
	End Sub
	
	Private Sub detach_Institucions(ByVal entity As Institucion)
		Me.SendPropertyChanging
		entity.TipoInstitucion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoOfrenda")>  _
Partial Public Class TipoOfrenda
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoOfrenda As Integer
	
	Private _TipoOfrenda As String
	
	Private _Ofrendas As EntitySet(Of Ofrenda)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoOfrendaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoOfrendaChanged()
    End Sub
    Partial Private Sub OnTipoOfrendaChanging(value As String)
    End Sub
    Partial Private Sub OnTipoOfrendaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ofrendas = New EntitySet(Of Ofrenda)(AddressOf Me.attach_Ofrendas, AddressOf Me.detach_Ofrendas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoOfrenda", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdTipoOfrenda() As Integer
		Get
			Return Me._IdTipoOfrenda
		End Get
		Set
			If ((Me._IdTipoOfrenda = value)  _
						= false) Then
				Me.OnIdTipoOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoOfrenda = value
				Me.SendPropertyChanged("IdTipoOfrenda")
				Me.OnIdTipoOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoOfrenda", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoOfrenda() As String
		Get
			Return Me._TipoOfrenda
		End Get
		Set
			If (String.Equals(Me._TipoOfrenda, value) = false) Then
				Me.OnTipoOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._TipoOfrenda = value
				Me.SendPropertyChanged("TipoOfrenda")
				Me.OnTipoOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoOfrenda_Ofrenda", Storage:="_Ofrendas", ThisKey:="IdTipoOfrenda", OtherKey:="IdTipoOfrenda")>  _
	Public Property Ofrendas() As EntitySet(Of Ofrenda)
		Get
			Return Me._Ofrendas
		End Get
		Set
			Me._Ofrendas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Ofrendas(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.TipoOfrenda = Me
	End Sub
	
	Private Sub detach_Ofrendas(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.TipoOfrenda = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoPagoAdopcion")>  _
Partial Public Class TipoPagoAdopcion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoPagoAdopcion As Integer
	
	Private _TipoPagoAdopcion As String
	
	Private _Adopcions As EntitySet(Of Adopcion)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoPagoAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoPagoAdopcionChanged()
    End Sub
    Partial Private Sub OnTipoPagoAdopcionChanging(value As String)
    End Sub
    Partial Private Sub OnTipoPagoAdopcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcions = New EntitySet(Of Adopcion)(AddressOf Me.attach_Adopcions, AddressOf Me.detach_Adopcions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoPagoAdopcion", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdTipoPagoAdopcion() As Integer
		Get
			Return Me._IdTipoPagoAdopcion
		End Get
		Set
			If ((Me._IdTipoPagoAdopcion = value)  _
						= false) Then
				Me.OnIdTipoPagoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoPagoAdopcion = value
				Me.SendPropertyChanged("IdTipoPagoAdopcion")
				Me.OnIdTipoPagoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoPagoAdopcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoPagoAdopcion() As String
		Get
			Return Me._TipoPagoAdopcion
		End Get
		Set
			If (String.Equals(Me._TipoPagoAdopcion, value) = false) Then
				Me.OnTipoPagoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._TipoPagoAdopcion = value
				Me.SendPropertyChanged("TipoPagoAdopcion")
				Me.OnTipoPagoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoPagoAdopcion_Adopcion", Storage:="_Adopcions", ThisKey:="IdTipoPagoAdopcion", OtherKey:="IdTipoPagoAdopcion")>  _
	Public Property Adopcions() As EntitySet(Of Adopcion)
		Get
			Return Me._Adopcions
		End Get
		Set
			Me._Adopcions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.TipoPagoAdopcion = Me
	End Sub
	
	Private Sub detach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.TipoPagoAdopcion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoSponsor")>  _
Partial Public Class TipoSponsor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoSponsor As Integer
	
	Private _TipoSponsor As String
	
	Private _Sponsors As EntitySet(Of Sponsor)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoSponsorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoSponsorChanged()
    End Sub
    Partial Private Sub OnTipoSponsorChanging(value As String)
    End Sub
    Partial Private Sub OnTipoSponsorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sponsors = New EntitySet(Of Sponsor)(AddressOf Me.attach_Sponsors, AddressOf Me.detach_Sponsors)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoSponsor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdTipoSponsor() As Integer
		Get
			Return Me._IdTipoSponsor
		End Get
		Set
			If ((Me._IdTipoSponsor = value)  _
						= false) Then
				Me.OnIdTipoSponsorChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoSponsor = value
				Me.SendPropertyChanged("IdTipoSponsor")
				Me.OnIdTipoSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoSponsor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoSponsor() As String
		Get
			Return Me._TipoSponsor
		End Get
		Set
			If (String.Equals(Me._TipoSponsor, value) = false) Then
				Me.OnTipoSponsorChanging(value)
				Me.SendPropertyChanging
				Me._TipoSponsor = value
				Me.SendPropertyChanged("TipoSponsor")
				Me.OnTipoSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoSponsor_Sponsor", Storage:="_Sponsors", ThisKey:="IdTipoSponsor", OtherKey:="IdTipoSponsor")>  _
	Public Property Sponsors() As EntitySet(Of Sponsor)
		Get
			Return Me._Sponsors
		End Get
		Set
			Me._Sponsors.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Sponsors(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.TipoSponsor = Me
	End Sub
	
	Private Sub detach_Sponsors(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.TipoSponsor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tutor")>  _
Partial Public Class Tutor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTutor As Integer
	
	Private _NombreTutor As String
	
	Private _ApellidoTutor As String
	
	Private _Telefono As String
	
	Private _Direccion As String
	
	Private _FechaNac As Date
	
	Private _SalarioDia As System.Nullable(Of Decimal)
	
	Private _Celular As String
	
	Private _IdOficioProfesion As Integer
	
	Private _IdSexo As Integer
	
	Private _IdIglesia As Integer
	
	Private _IdLugar As Integer
	
	Private _IdParentesco As Integer
	
	Private _IdUsuario As Integer
	
	Private _Iglesia As EntityRef(Of Iglesia)
	
	Private _Lugar As EntityRef(Of Lugar)
	
	Private _OficioProfesion As EntityRef(Of OficioProfesion)
	
	Private _Parentesco As EntityRef(Of Parentesco)
	
	Private _Sexo As EntityRef(Of Sexo)
	
	Private _Usuario As EntityRef(Of Usuario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTutorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTutorChanged()
    End Sub
    Partial Private Sub OnNombreTutorChanging(value As String)
    End Sub
    Partial Private Sub OnNombreTutorChanged()
    End Sub
    Partial Private Sub OnApellidoTutorChanging(value As String)
    End Sub
    Partial Private Sub OnApellidoTutorChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnFechaNacChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaNacChanged()
    End Sub
    Partial Private Sub OnSalarioDiaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalarioDiaChanged()
    End Sub
    Partial Private Sub OnCelularChanging(value As String)
    End Sub
    Partial Private Sub OnCelularChanged()
    End Sub
    Partial Private Sub OnIdOficioProfesionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdOficioProfesionChanged()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    Partial Private Sub OnIdIglesiaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIglesiaChanged()
    End Sub
    Partial Private Sub OnIdLugarChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLugarChanged()
    End Sub
    Partial Private Sub OnIdParentescoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdParentescoChanged()
    End Sub
    Partial Private Sub OnIdUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Iglesia = CType(Nothing, EntityRef(Of Iglesia))
		Me._Lugar = CType(Nothing, EntityRef(Of Lugar))
		Me._OficioProfesion = CType(Nothing, EntityRef(Of OficioProfesion))
		Me._Parentesco = CType(Nothing, EntityRef(Of Parentesco))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		Me._Usuario = CType(Nothing, EntityRef(Of Usuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTutor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdTutor() As Integer
		Get
			Return Me._IdTutor
		End Get
		Set
			If ((Me._IdTutor = value)  _
						= false) Then
				Me.OnIdTutorChanging(value)
				Me.SendPropertyChanging
				Me._IdTutor = value
				Me.SendPropertyChanged("IdTutor")
				Me.OnIdTutorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreTutor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreTutor() As String
		Get
			Return Me._NombreTutor
		End Get
		Set
			If (String.Equals(Me._NombreTutor, value) = false) Then
				Me.OnNombreTutorChanging(value)
				Me.SendPropertyChanging
				Me._NombreTutor = value
				Me.SendPropertyChanged("NombreTutor")
				Me.OnNombreTutorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApellidoTutor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ApellidoTutor() As String
		Get
			Return Me._ApellidoTutor
		End Get
		Set
			If (String.Equals(Me._ApellidoTutor, value) = false) Then
				Me.OnApellidoTutorChanging(value)
				Me.SendPropertyChanging
				Me._ApellidoTutor = value
				Me.SendPropertyChanged("ApellidoTutor")
				Me.OnApellidoTutorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(15)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaNac", DbType:="Date NOT NULL")>  _
	Public Property FechaNac() As Date
		Get
			Return Me._FechaNac
		End Get
		Set
			If ((Me._FechaNac = value)  _
						= false) Then
				Me.OnFechaNacChanging(value)
				Me.SendPropertyChanging
				Me._FechaNac = value
				Me.SendPropertyChanged("FechaNac")
				Me.OnFechaNacChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalarioDia", DbType:="Money")>  _
	Public Property SalarioDia() As System.Nullable(Of Decimal)
		Get
			Return Me._SalarioDia
		End Get
		Set
			If (Me._SalarioDia.Equals(value) = false) Then
				Me.OnSalarioDiaChanging(value)
				Me.SendPropertyChanging
				Me._SalarioDia = value
				Me.SendPropertyChanged("SalarioDia")
				Me.OnSalarioDiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Celular", DbType:="NVarChar(15)")>  _
	Public Property Celular() As String
		Get
			Return Me._Celular
		End Get
		Set
			If (String.Equals(Me._Celular, value) = false) Then
				Me.OnCelularChanging(value)
				Me.SendPropertyChanging
				Me._Celular = value
				Me.SendPropertyChanged("Celular")
				Me.OnCelularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdOficioProfesion", DbType:="Int NOT NULL")>  _
	Public Property IdOficioProfesion() As Integer
		Get
			Return Me._IdOficioProfesion
		End Get
		Set
			If ((Me._IdOficioProfesion = value)  _
						= false) Then
				If Me._OficioProfesion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdOficioProfesionChanging(value)
				Me.SendPropertyChanging
				Me._IdOficioProfesion = value
				Me.SendPropertyChanged("IdOficioProfesion")
				Me.OnIdOficioProfesionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", DbType:="Int NOT NULL")>  _
	Public Property IdSexo() As Integer
		Get
			Return Me._IdSexo
		End Get
		Set
			If ((Me._IdSexo = value)  _
						= false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdIglesia", DbType:="Int NOT NULL")>  _
	Public Property IdIglesia() As Integer
		Get
			Return Me._IdIglesia
		End Get
		Set
			If ((Me._IdIglesia = value)  _
						= false) Then
				If Me._Iglesia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdIglesiaChanging(value)
				Me.SendPropertyChanging
				Me._IdIglesia = value
				Me.SendPropertyChanged("IdIglesia")
				Me.OnIdIglesiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLugar", DbType:="Int NOT NULL")>  _
	Public Property IdLugar() As Integer
		Get
			Return Me._IdLugar
		End Get
		Set
			If ((Me._IdLugar = value)  _
						= false) Then
				If Me._Lugar.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdLugarChanging(value)
				Me.SendPropertyChanging
				Me._IdLugar = value
				Me.SendPropertyChanged("IdLugar")
				Me.OnIdLugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdParentesco", DbType:="Int NOT NULL")>  _
	Public Property IdParentesco() As Integer
		Get
			Return Me._IdParentesco
		End Get
		Set
			If ((Me._IdParentesco = value)  _
						= false) Then
				If Me._Parentesco.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdParentescoChanging(value)
				Me.SendPropertyChanging
				Me._IdParentesco = value
				Me.SendPropertyChanged("IdParentesco")
				Me.OnIdParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				If Me._Usuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuario = value
				Me.SendPropertyChanged("IdUsuario")
				Me.OnIdUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Iglesia_Tutor", Storage:="_Iglesia", ThisKey:="IdIglesia", OtherKey:="IdIglesia", IsForeignKey:=true)>  _
	Public Property Iglesia() As Iglesia
		Get
			Return Me._Iglesia.Entity
		End Get
		Set
			Dim previousValue As Iglesia = Me._Iglesia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Iglesia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Iglesia.Entity = Nothing
					previousValue.Tutors.Remove(Me)
				End If
				Me._Iglesia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutors.Add(Me)
					Me._IdIglesia = value.IdIglesia
				Else
					Me._IdIglesia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Iglesia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lugar_Tutor", Storage:="_Lugar", ThisKey:="IdLugar", OtherKey:="IdLugar", IsForeignKey:=true)>  _
	Public Property Lugar() As Lugar
		Get
			Return Me._Lugar.Entity
		End Get
		Set
			Dim previousValue As Lugar = Me._Lugar.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Lugar.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Lugar.Entity = Nothing
					previousValue.Tutors.Remove(Me)
				End If
				Me._Lugar.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutors.Add(Me)
					Me._IdLugar = value.IdLugar
				Else
					Me._IdLugar = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Lugar")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OficioProfesion_Tutor", Storage:="_OficioProfesion", ThisKey:="IdOficioProfesion", OtherKey:="IdOficioProfesion", IsForeignKey:=true)>  _
	Public Property OficioProfesion() As OficioProfesion
		Get
			Return Me._OficioProfesion.Entity
		End Get
		Set
			Dim previousValue As OficioProfesion = Me._OficioProfesion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OficioProfesion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OficioProfesion.Entity = Nothing
					previousValue.Tutors.Remove(Me)
				End If
				Me._OficioProfesion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutors.Add(Me)
					Me._IdOficioProfesion = value.IdOficioProfesion
				Else
					Me._IdOficioProfesion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("OficioProfesion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parentesco_Tutor", Storage:="_Parentesco", ThisKey:="IdParentesco", OtherKey:="IdParentesco", IsForeignKey:=true)>  _
	Public Property Parentesco() As Parentesco
		Get
			Return Me._Parentesco.Entity
		End Get
		Set
			Dim previousValue As Parentesco = Me._Parentesco.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parentesco.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parentesco.Entity = Nothing
					previousValue.Tutors.Remove(Me)
				End If
				Me._Parentesco.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutors.Add(Me)
					Me._IdParentesco = value.IdParentesco
				Else
					Me._IdParentesco = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parentesco")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Tutor", Storage:="_Sexo", ThisKey:="IdSexo", OtherKey:="IdSexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Tutors.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutors.Add(Me)
					Me._IdSexo = value.IdSexo
				Else
					Me._IdSexo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Tutor", Storage:="_Usuario", ThisKey:="IdUsuario", OtherKey:="IdUsuario", IsForeignKey:=true)>  _
	Public Property Usuario() As Usuario
		Get
			Return Me._Usuario.Entity
		End Get
		Set
			Dim previousValue As Usuario = Me._Usuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Usuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Usuario.Entity = Nothing
					previousValue.Tutors.Remove(Me)
				End If
				Me._Usuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutors.Add(Me)
					Me._IdUsuario = value.IdUsuario
				Else
					Me._IdUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Usuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Usuario")>  _
Partial Public Class Usuario
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdUsuario As Integer
	
	Private _NombreUsuario As String
	
	Private _Contraseña As String
	
	Private _IdEstadoUsuario As Integer
	
	Private _Adopcions As EntitySet(Of Adopcion)
	
	Private _AuditoriaLogs As EntitySet(Of AuditoriaLog)
	
	Private _Beneficiados As EntitySet(Of Beneficiado)
	
	Private _Cartas As EntitySet(Of Carta)
	
	Private _Ofrendas As EntitySet(Of Ofrenda)
	
	Private _Sponsors As EntitySet(Of Sponsor)
	
	Private _Tutors As EntitySet(Of Tutor)
	
	Private _EstadoUsuario As EntityRef(Of EstadoUsuario)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUsuarioChanged()
    End Sub
    Partial Private Sub OnNombreUsuarioChanging(value As String)
    End Sub
    Partial Private Sub OnNombreUsuarioChanged()
    End Sub
    Partial Private Sub OnContraseñaChanging(value As String)
    End Sub
    Partial Private Sub OnContraseñaChanged()
    End Sub
    Partial Private Sub OnIdEstadoUsuarioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoUsuarioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcions = New EntitySet(Of Adopcion)(AddressOf Me.attach_Adopcions, AddressOf Me.detach_Adopcions)
		Me._AuditoriaLogs = New EntitySet(Of AuditoriaLog)(AddressOf Me.attach_AuditoriaLogs, AddressOf Me.detach_AuditoriaLogs)
		Me._Beneficiados = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiados, AddressOf Me.detach_Beneficiados)
		Me._Cartas = New EntitySet(Of Carta)(AddressOf Me.attach_Cartas, AddressOf Me.detach_Cartas)
		Me._Ofrendas = New EntitySet(Of Ofrenda)(AddressOf Me.attach_Ofrendas, AddressOf Me.detach_Ofrendas)
		Me._Sponsors = New EntitySet(Of Sponsor)(AddressOf Me.attach_Sponsors, AddressOf Me.detach_Sponsors)
		Me._Tutors = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutors, AddressOf Me.detach_Tutors)
		Me._EstadoUsuario = CType(Nothing, EntityRef(Of EstadoUsuario))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				Me.OnIdUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdUsuario = value
				Me.SendPropertyChanged("IdUsuario")
				Me.OnIdUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreUsuario", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreUsuario() As String
		Get
			Return Me._NombreUsuario
		End Get
		Set
			If (String.Equals(Me._NombreUsuario, value) = false) Then
				Me.OnNombreUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._NombreUsuario = value
				Me.SendPropertyChanged("NombreUsuario")
				Me.OnNombreUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contraseña", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Contraseña() As String
		Get
			Return Me._Contraseña
		End Get
		Set
			If (String.Equals(Me._Contraseña, value) = false) Then
				Me.OnContraseñaChanging(value)
				Me.SendPropertyChanging
				Me._Contraseña = value
				Me.SendPropertyChanged("Contraseña")
				Me.OnContraseñaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdEstadoUsuario() As Integer
		Get
			Return Me._IdEstadoUsuario
		End Get
		Set
			If ((Me._IdEstadoUsuario = value)  _
						= false) Then
				If Me._EstadoUsuario.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEstadoUsuarioChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoUsuario = value
				Me.SendPropertyChanged("IdEstadoUsuario")
				Me.OnIdEstadoUsuarioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Adopcion", Storage:="_Adopcions", ThisKey:="IdUsuario", OtherKey:="IdUsuario")>  _
	Public Property Adopcions() As EntitySet(Of Adopcion)
		Get
			Return Me._Adopcions
		End Get
		Set
			Me._Adopcions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_AuditoriaLog", Storage:="_AuditoriaLogs", ThisKey:="IdUsuario", OtherKey:="IdUsuario")>  _
	Public Property AuditoriaLogs() As EntitySet(Of AuditoriaLog)
		Get
			Return Me._AuditoriaLogs
		End Get
		Set
			Me._AuditoriaLogs.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Beneficiado", Storage:="_Beneficiados", ThisKey:="IdUsuario", OtherKey:="IdUsuario")>  _
	Public Property Beneficiados() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiados
		End Get
		Set
			Me._Beneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Carta", Storage:="_Cartas", ThisKey:="IdUsuario", OtherKey:="IdUsuario")>  _
	Public Property Cartas() As EntitySet(Of Carta)
		Get
			Return Me._Cartas
		End Get
		Set
			Me._Cartas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Ofrenda", Storage:="_Ofrendas", ThisKey:="IdUsuario", OtherKey:="IdUsuario")>  _
	Public Property Ofrendas() As EntitySet(Of Ofrenda)
		Get
			Return Me._Ofrendas
		End Get
		Set
			Me._Ofrendas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Sponsor", Storage:="_Sponsors", ThisKey:="IdUsuario", OtherKey:="IdUsuario")>  _
	Public Property Sponsors() As EntitySet(Of Sponsor)
		Get
			Return Me._Sponsors
		End Get
		Set
			Me._Sponsors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Usuario_Tutor", Storage:="_Tutors", ThisKey:="IdUsuario", OtherKey:="IdUsuario")>  _
	Public Property Tutors() As EntitySet(Of Tutor)
		Get
			Return Me._Tutors
		End Get
		Set
			Me._Tutors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoUsuario_Usuario", Storage:="_EstadoUsuario", ThisKey:="IdEstadoUsuario", OtherKey:="IdEstadoUsuario", IsForeignKey:=true)>  _
	Public Property EstadoUsuario() As EstadoUsuario
		Get
			Return Me._EstadoUsuario.Entity
		End Get
		Set
			Dim previousValue As EstadoUsuario = Me._EstadoUsuario.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EstadoUsuario.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EstadoUsuario.Entity = Nothing
					previousValue.Usuarios.Remove(Me)
				End If
				Me._EstadoUsuario.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Usuarios.Add(Me)
					Me._IdEstadoUsuario = value.IdEstadoUsuario
				Else
					Me._IdEstadoUsuario = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EstadoUsuario")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Adopcions(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_AuditoriaLogs(ByVal entity As AuditoriaLog)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_AuditoriaLogs(ByVal entity As AuditoriaLog)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Beneficiados(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Cartas(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Cartas(ByVal entity As Carta)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Ofrendas(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Ofrendas(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Sponsors(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Sponsors(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
	
	Private Sub attach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Usuario = Me
	End Sub
	
	Private Sub detach_Tutors(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Usuario = Nothing
	End Sub
End Class

Partial Public Class Sp_ExisteUsuarioResult
	
	Private _IdUsuario As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUsuario", DbType:="Int NOT NULL")>  _
	Public Property IdUsuario() As Integer
		Get
			Return Me._IdUsuario
		End Get
		Set
			If ((Me._IdUsuario = value)  _
						= false) Then
				Me._IdUsuario = value
			End If
		End Set
	End Property
End Class

Partial Public Class sp_MostrarIDResult
	
	Private _nombreusuario As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_nombreusuario", DbType:="NVarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property nombreusuario() As String
		Get
			Return Me._nombreusuario
		End Get
		Set
			If (String.Equals(Me._nombreusuario, value) = false) Then
				Me._nombreusuario = value
			End If
		End Set
	End Property
End Class
