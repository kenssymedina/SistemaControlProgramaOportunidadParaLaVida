'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="MBBS1")>  _
Partial Public Class MisionDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAdopcion(instance As Adopcion)
    End Sub
  Partial Private Sub UpdateAdopcion(instance As Adopcion)
    End Sub
  Partial Private Sub DeleteAdopcion(instance As Adopcion)
    End Sub
  Partial Private Sub InsertAdopcionPago(instance As AdopcionPago)
    End Sub
  Partial Private Sub UpdateAdopcionPago(instance As AdopcionPago)
    End Sub
  Partial Private Sub DeleteAdopcionPago(instance As AdopcionPago)
    End Sub
  Partial Private Sub InsertAsistenciaClaseDominical(instance As AsistenciaClaseDominical)
    End Sub
  Partial Private Sub UpdateAsistenciaClaseDominical(instance As AsistenciaClaseDominical)
    End Sub
  Partial Private Sub DeleteAsistenciaClaseDominical(instance As AsistenciaClaseDominical)
    End Sub
  Partial Private Sub InsertBeneficiado(instance As Beneficiado)
    End Sub
  Partial Private Sub UpdateBeneficiado(instance As Beneficiado)
    End Sub
  Partial Private Sub DeleteBeneficiado(instance As Beneficiado)
    End Sub
  Partial Private Sub InsertBeneficiadoTutor(instance As BeneficiadoTutor)
    End Sub
  Partial Private Sub UpdateBeneficiadoTutor(instance As BeneficiadoTutor)
    End Sub
  Partial Private Sub DeleteBeneficiadoTutor(instance As BeneficiadoTutor)
    End Sub
  Partial Private Sub InsertCartas(instance As Cartas)
    End Sub
  Partial Private Sub UpdateCartas(instance As Cartas)
    End Sub
  Partial Private Sub DeleteCartas(instance As Cartas)
    End Sub
  Partial Private Sub InsertCasaBeneficiado(instance As CasaBeneficiado)
    End Sub
  Partial Private Sub UpdateCasaBeneficiado(instance As CasaBeneficiado)
    End Sub
  Partial Private Sub DeleteCasaBeneficiado(instance As CasaBeneficiado)
    End Sub
  Partial Private Sub InsertEstadoAdopcion(instance As EstadoAdopcion)
    End Sub
  Partial Private Sub UpdateEstadoAdopcion(instance As EstadoAdopcion)
    End Sub
  Partial Private Sub DeleteEstadoAdopcion(instance As EstadoAdopcion)
    End Sub
  Partial Private Sub InsertEstadoBeneficiado(instance As EstadoBeneficiado)
    End Sub
  Partial Private Sub UpdateEstadoBeneficiado(instance As EstadoBeneficiado)
    End Sub
  Partial Private Sub DeleteEstadoBeneficiado(instance As EstadoBeneficiado)
    End Sub
  Partial Private Sub InsertGradoCursado(instance As GradoCursado)
    End Sub
  Partial Private Sub UpdateGradoCursado(instance As GradoCursado)
    End Sub
  Partial Private Sub DeleteGradoCursado(instance As GradoCursado)
    End Sub
  Partial Private Sub InsertEstadoBeneficiado1(instance As EstadoBeneficiado1)
    End Sub
  Partial Private Sub UpdateEstadoBeneficiado1(instance As EstadoBeneficiado1)
    End Sub
  Partial Private Sub DeleteEstadoBeneficiado1(instance As EstadoBeneficiado1)
    End Sub
  Partial Private Sub InsertGradoCursado1(instance As GradoCursado1)
    End Sub
  Partial Private Sub UpdateGradoCursado1(instance As GradoCursado1)
    End Sub
  Partial Private Sub DeleteGradoCursado1(instance As GradoCursado1)
    End Sub
  Partial Private Sub InsertHermanosBeneficiados(instance As HermanosBeneficiados)
    End Sub
  Partial Private Sub UpdateHermanosBeneficiados(instance As HermanosBeneficiados)
    End Sub
  Partial Private Sub DeleteHermanosBeneficiados(instance As HermanosBeneficiados)
    End Sub
  Partial Private Sub InsertHermanos(instance As Hermanos)
    End Sub
  Partial Private Sub UpdateHermanos(instance As Hermanos)
    End Sub
  Partial Private Sub DeleteHermanos(instance As Hermanos)
    End Sub
  Partial Private Sub InsertIglesia(instance As Iglesia)
    End Sub
  Partial Private Sub UpdateIglesia(instance As Iglesia)
    End Sub
  Partial Private Sub DeleteIglesia(instance As Iglesia)
    End Sub
  Partial Private Sub InsertInstitucion(instance As Institucion)
    End Sub
  Partial Private Sub UpdateInstitucion(instance As Institucion)
    End Sub
  Partial Private Sub DeleteInstitucion(instance As Institucion)
    End Sub
  Partial Private Sub InsertInteresesBeneficiado(instance As InteresesBeneficiado)
    End Sub
  Partial Private Sub UpdateInteresesBeneficiado(instance As InteresesBeneficiado)
    End Sub
  Partial Private Sub DeleteInteresesBeneficiado(instance As InteresesBeneficiado)
    End Sub
  Partial Private Sub InsertInterno(instance As Interno)
    End Sub
  Partial Private Sub UpdateInterno(instance As Interno)
    End Sub
  Partial Private Sub DeleteInterno(instance As Interno)
    End Sub
  Partial Private Sub InsertLugar(instance As Lugar)
    End Sub
  Partial Private Sub UpdateLugar(instance As Lugar)
    End Sub
  Partial Private Sub DeleteLugar(instance As Lugar)
    End Sub
  Partial Private Sub InsertOficioProfesion(instance As OficioProfesion)
    End Sub
  Partial Private Sub UpdateOficioProfesion(instance As OficioProfesion)
    End Sub
  Partial Private Sub DeleteOficioProfesion(instance As OficioProfesion)
    End Sub
  Partial Private Sub InsertOfrenda(instance As Ofrenda)
    End Sub
  Partial Private Sub UpdateOfrenda(instance As Ofrenda)
    End Sub
  Partial Private Sub DeleteOfrenda(instance As Ofrenda)
    End Sub
  Partial Private Sub InsertPais(instance As Pais)
    End Sub
  Partial Private Sub UpdatePais(instance As Pais)
    End Sub
  Partial Private Sub DeletePais(instance As Pais)
    End Sub
  Partial Private Sub InsertParentesco(instance As Parentesco)
    End Sub
  Partial Private Sub UpdateParentesco(instance As Parentesco)
    End Sub
  Partial Private Sub DeleteParentesco(instance As Parentesco)
    End Sub
  Partial Private Sub InsertSexo(instance As Sexo)
    End Sub
  Partial Private Sub UpdateSexo(instance As Sexo)
    End Sub
  Partial Private Sub DeleteSexo(instance As Sexo)
    End Sub
  Partial Private Sub InsertSponsor(instance As Sponsor)
    End Sub
  Partial Private Sub UpdateSponsor(instance As Sponsor)
    End Sub
  Partial Private Sub DeleteSponsor(instance As Sponsor)
    End Sub
  Partial Private Sub InsertSponsorHermano(instance As SponsorHermano)
    End Sub
  Partial Private Sub UpdateSponsorHermano(instance As SponsorHermano)
    End Sub
  Partial Private Sub DeleteSponsorHermano(instance As SponsorHermano)
    End Sub
  Partial Private Sub InsertTipoCarta(instance As TipoCarta)
    End Sub
  Partial Private Sub UpdateTipoCarta(instance As TipoCarta)
    End Sub
  Partial Private Sub DeleteTipoCarta(instance As TipoCarta)
    End Sub
  Partial Private Sub InsertTipoCartaEnvio(instance As TipoCartaEnvio)
    End Sub
  Partial Private Sub UpdateTipoCartaEnvio(instance As TipoCartaEnvio)
    End Sub
  Partial Private Sub DeleteTipoCartaEnvio(instance As TipoCartaEnvio)
    End Sub
  Partial Private Sub InsertTipoCasa(instance As TipoCasa)
    End Sub
  Partial Private Sub UpdateTipoCasa(instance As TipoCasa)
    End Sub
  Partial Private Sub DeleteTipoCasa(instance As TipoCasa)
    End Sub
  Partial Private Sub InsertTipoInstitucion(instance As TipoInstitucion)
    End Sub
  Partial Private Sub UpdateTipoInstitucion(instance As TipoInstitucion)
    End Sub
  Partial Private Sub DeleteTipoInstitucion(instance As TipoInstitucion)
    End Sub
  Partial Private Sub InsertTipoOfrenda(instance As TipoOfrenda)
    End Sub
  Partial Private Sub UpdateTipoOfrenda(instance As TipoOfrenda)
    End Sub
  Partial Private Sub DeleteTipoOfrenda(instance As TipoOfrenda)
    End Sub
  Partial Private Sub InsertTipoPagoAdopcion(instance As TipoPagoAdopcion)
    End Sub
  Partial Private Sub UpdateTipoPagoAdopcion(instance As TipoPagoAdopcion)
    End Sub
  Partial Private Sub DeleteTipoPagoAdopcion(instance As TipoPagoAdopcion)
    End Sub
  Partial Private Sub InsertTipoSponsor(instance As TipoSponsor)
    End Sub
  Partial Private Sub UpdateTipoSponsor(instance As TipoSponsor)
    End Sub
  Partial Private Sub DeleteTipoSponsor(instance As TipoSponsor)
    End Sub
  Partial Private Sub InsertTutor(instance As Tutor)
    End Sub
  Partial Private Sub UpdateTutor(instance As Tutor)
    End Sub
  Partial Private Sub DeleteTutor(instance As Tutor)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Misión.My.MySettings.Default.MBBS1ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Adopcion() As System.Data.Linq.Table(Of Adopcion)
		Get
			Return Me.GetTable(Of Adopcion)
		End Get
	End Property
	
	Public ReadOnly Property AdopcionPago() As System.Data.Linq.Table(Of AdopcionPago)
		Get
			Return Me.GetTable(Of AdopcionPago)
		End Get
	End Property
	
	Public ReadOnly Property AsistenciaClaseDominical() As System.Data.Linq.Table(Of AsistenciaClaseDominical)
		Get
			Return Me.GetTable(Of AsistenciaClaseDominical)
		End Get
	End Property
	
	Public ReadOnly Property Beneficiado() As System.Data.Linq.Table(Of Beneficiado)
		Get
			Return Me.GetTable(Of Beneficiado)
		End Get
	End Property
	
	Public ReadOnly Property BeneficiadoTutor() As System.Data.Linq.Table(Of BeneficiadoTutor)
		Get
			Return Me.GetTable(Of BeneficiadoTutor)
		End Get
	End Property
	
	Public ReadOnly Property Cartas() As System.Data.Linq.Table(Of Cartas)
		Get
			Return Me.GetTable(Of Cartas)
		End Get
	End Property
	
	Public ReadOnly Property CasaBeneficiado() As System.Data.Linq.Table(Of CasaBeneficiado)
		Get
			Return Me.GetTable(Of CasaBeneficiado)
		End Get
	End Property
	
	Public ReadOnly Property EstadoAdopcion() As System.Data.Linq.Table(Of EstadoAdopcion)
		Get
			Return Me.GetTable(Of EstadoAdopcion)
		End Get
	End Property
	
	Public ReadOnly Property EstadoBeneficiado() As System.Data.Linq.Table(Of EstadoBeneficiado)
		Get
			Return Me.GetTable(Of EstadoBeneficiado)
		End Get
	End Property
	
	Public ReadOnly Property GradoCursado() As System.Data.Linq.Table(Of GradoCursado)
		Get
			Return Me.GetTable(Of GradoCursado)
		End Get
	End Property
	
	Public ReadOnly Property EstadoBeneficiado1() As System.Data.Linq.Table(Of EstadoBeneficiado1)
		Get
			Return Me.GetTable(Of EstadoBeneficiado1)
		End Get
	End Property
	
	Public ReadOnly Property GradoCursado1() As System.Data.Linq.Table(Of GradoCursado1)
		Get
			Return Me.GetTable(Of GradoCursado1)
		End Get
	End Property
	
	Public ReadOnly Property HermanosBeneficiados() As System.Data.Linq.Table(Of HermanosBeneficiados)
		Get
			Return Me.GetTable(Of HermanosBeneficiados)
		End Get
	End Property
	
	Public ReadOnly Property Hermanos() As System.Data.Linq.Table(Of Hermanos)
		Get
			Return Me.GetTable(Of Hermanos)
		End Get
	End Property
	
	Public ReadOnly Property Iglesia() As System.Data.Linq.Table(Of Iglesia)
		Get
			Return Me.GetTable(Of Iglesia)
		End Get
	End Property
	
	Public ReadOnly Property Institucion() As System.Data.Linq.Table(Of Institucion)
		Get
			Return Me.GetTable(Of Institucion)
		End Get
	End Property
	
	Public ReadOnly Property InteresesBeneficiado() As System.Data.Linq.Table(Of InteresesBeneficiado)
		Get
			Return Me.GetTable(Of InteresesBeneficiado)
		End Get
	End Property
	
	Public ReadOnly Property Interno() As System.Data.Linq.Table(Of Interno)
		Get
			Return Me.GetTable(Of Interno)
		End Get
	End Property
	
	Public ReadOnly Property Lugar() As System.Data.Linq.Table(Of Lugar)
		Get
			Return Me.GetTable(Of Lugar)
		End Get
	End Property
	
	Public ReadOnly Property OficioProfesion() As System.Data.Linq.Table(Of OficioProfesion)
		Get
			Return Me.GetTable(Of OficioProfesion)
		End Get
	End Property
	
	Public ReadOnly Property Ofrenda() As System.Data.Linq.Table(Of Ofrenda)
		Get
			Return Me.GetTable(Of Ofrenda)
		End Get
	End Property
	
	Public ReadOnly Property Pais() As System.Data.Linq.Table(Of Pais)
		Get
			Return Me.GetTable(Of Pais)
		End Get
	End Property
	
	Public ReadOnly Property Parentesco() As System.Data.Linq.Table(Of Parentesco)
		Get
			Return Me.GetTable(Of Parentesco)
		End Get
	End Property
	
	Public ReadOnly Property Sexo() As System.Data.Linq.Table(Of Sexo)
		Get
			Return Me.GetTable(Of Sexo)
		End Get
	End Property
	
	Public ReadOnly Property Sponsor() As System.Data.Linq.Table(Of Sponsor)
		Get
			Return Me.GetTable(Of Sponsor)
		End Get
	End Property
	
	Public ReadOnly Property SponsorHermano() As System.Data.Linq.Table(Of SponsorHermano)
		Get
			Return Me.GetTable(Of SponsorHermano)
		End Get
	End Property
	
	Public ReadOnly Property TipoCarta() As System.Data.Linq.Table(Of TipoCarta)
		Get
			Return Me.GetTable(Of TipoCarta)
		End Get
	End Property
	
	Public ReadOnly Property TipoCartaEnvio() As System.Data.Linq.Table(Of TipoCartaEnvio)
		Get
			Return Me.GetTable(Of TipoCartaEnvio)
		End Get
	End Property
	
	Public ReadOnly Property TipoCasa() As System.Data.Linq.Table(Of TipoCasa)
		Get
			Return Me.GetTable(Of TipoCasa)
		End Get
	End Property
	
	Public ReadOnly Property TipoInstitucion() As System.Data.Linq.Table(Of TipoInstitucion)
		Get
			Return Me.GetTable(Of TipoInstitucion)
		End Get
	End Property
	
	Public ReadOnly Property TipoOfrenda() As System.Data.Linq.Table(Of TipoOfrenda)
		Get
			Return Me.GetTable(Of TipoOfrenda)
		End Get
	End Property
	
	Public ReadOnly Property TipoPagoAdopcion() As System.Data.Linq.Table(Of TipoPagoAdopcion)
		Get
			Return Me.GetTable(Of TipoPagoAdopcion)
		End Get
	End Property
	
	Public ReadOnly Property TipoSponsor() As System.Data.Linq.Table(Of TipoSponsor)
		Get
			Return Me.GetTable(Of TipoSponsor)
		End Get
	End Property
	
	Public ReadOnly Property Tutor() As System.Data.Linq.Table(Of Tutor)
		Get
			Return Me.GetTable(Of Tutor)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Adopcion")>  _
Partial Public Class Adopcion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdAdopcion As Integer
	
	Private _FechaAdopcion As Date
	
	Private _Observaciones As String
	
	Private _FechaAdopcionPerdida As System.Nullable(Of Date)
	
	Private _Valor As String
	
	Private _IdBeneficiado As Integer
	
	Private _IdSponsor As Integer
	
	Private _IdTipoPagoAdopcion As Integer
	
	Private _IdEstadoAdopcion As Integer
	
	Private _AdopcionPago As EntitySet(Of AdopcionPago)
	
	Private _Cartas As EntitySet(Of Cartas)
	
	Private _Ofrenda As EntitySet(Of Ofrenda)
	
	Private _Beneficiado As EntityRef(Of Beneficiado)
	
	Private _EstadoAdopcion As EntityRef(Of EstadoAdopcion)
	
	Private _Sponsor As EntityRef(Of Sponsor)
	
	Private _TipoPagoAdopcion As EntityRef(Of TipoPagoAdopcion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAdopcionChanged()
    End Sub
    Partial Private Sub OnFechaAdopcionChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaAdopcionChanged()
    End Sub
    Partial Private Sub OnObservacionesChanging(value As String)
    End Sub
    Partial Private Sub OnObservacionesChanged()
    End Sub
    Partial Private Sub OnFechaAdopcionPerdidaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaAdopcionPerdidaChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    Partial Private Sub OnIdSponsorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSponsorChanged()
    End Sub
    Partial Private Sub OnIdTipoPagoAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoPagoAdopcionChanged()
    End Sub
    Partial Private Sub OnIdEstadoAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoAdopcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AdopcionPago = New EntitySet(Of AdopcionPago)(AddressOf Me.attach_AdopcionPago, AddressOf Me.detach_AdopcionPago)
		Me._Cartas = New EntitySet(Of Cartas)(AddressOf Me.attach_Cartas, AddressOf Me.detach_Cartas)
		Me._Ofrenda = New EntitySet(Of Ofrenda)(AddressOf Me.attach_Ofrenda, AddressOf Me.detach_Ofrenda)
		Me._Beneficiado = CType(Nothing, EntityRef(Of Beneficiado))
		Me._EstadoAdopcion = CType(Nothing, EntityRef(Of EstadoAdopcion))
		Me._Sponsor = CType(Nothing, EntityRef(Of Sponsor))
		Me._TipoPagoAdopcion = CType(Nothing, EntityRef(Of TipoPagoAdopcion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAdopcion", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdAdopcion() As Integer
		Get
			Return Me._IdAdopcion
		End Get
		Set
			If ((Me._IdAdopcion = value)  _
						= false) Then
				Me.OnIdAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdAdopcion = value
				Me.SendPropertyChanged("IdAdopcion")
				Me.OnIdAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAdopcion", DbType:="Date NOT NULL")>  _
	Public Property FechaAdopcion() As Date
		Get
			Return Me._FechaAdopcion
		End Get
		Set
			If ((Me._FechaAdopcion = value)  _
						= false) Then
				Me.OnFechaAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._FechaAdopcion = value
				Me.SendPropertyChanged("FechaAdopcion")
				Me.OnFechaAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Observaciones", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Observaciones() As String
		Get
			Return Me._Observaciones
		End Get
		Set
			If (String.Equals(Me._Observaciones, value) = false) Then
				Me.OnObservacionesChanging(value)
				Me.SendPropertyChanging
				Me._Observaciones = value
				Me.SendPropertyChanged("Observaciones")
				Me.OnObservacionesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaAdopcionPerdida", DbType:="Date")>  _
	Public Property FechaAdopcionPerdida() As System.Nullable(Of Date)
		Get
			Return Me._FechaAdopcionPerdida
		End Get
		Set
			If (Me._FechaAdopcionPerdida.Equals(value) = false) Then
				Me.OnFechaAdopcionPerdidaChanging(value)
				Me.SendPropertyChanging
				Me._FechaAdopcionPerdida = value
				Me.SendPropertyChanged("FechaAdopcionPerdida")
				Me.OnFechaAdopcionPerdidaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				If Me._Beneficiado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSponsor", DbType:="Int NOT NULL")>  _
	Public Property IdSponsor() As Integer
		Get
			Return Me._IdSponsor
		End Get
		Set
			If ((Me._IdSponsor = value)  _
						= false) Then
				If Me._Sponsor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSponsorChanging(value)
				Me.SendPropertyChanging
				Me._IdSponsor = value
				Me.SendPropertyChanged("IdSponsor")
				Me.OnIdSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoPagoAdopcion", DbType:="Int NOT NULL")>  _
	Public Property IdTipoPagoAdopcion() As Integer
		Get
			Return Me._IdTipoPagoAdopcion
		End Get
		Set
			If ((Me._IdTipoPagoAdopcion = value)  _
						= false) Then
				If Me._TipoPagoAdopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoPagoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoPagoAdopcion = value
				Me.SendPropertyChanged("IdTipoPagoAdopcion")
				Me.OnIdTipoPagoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoAdopcion", DbType:="Int NOT NULL")>  _
	Public Property IdEstadoAdopcion() As Integer
		Get
			Return Me._IdEstadoAdopcion
		End Get
		Set
			If ((Me._IdEstadoAdopcion = value)  _
						= false) Then
				If Me._EstadoAdopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEstadoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoAdopcion = value
				Me.SendPropertyChanged("IdEstadoAdopcion")
				Me.OnIdEstadoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_AdopcionPago", Storage:="_AdopcionPago", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion")>  _
	Public Property AdopcionPago() As EntitySet(Of AdopcionPago)
		Get
			Return Me._AdopcionPago
		End Get
		Set
			Me._AdopcionPago.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_Cartas", Storage:="_Cartas", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion")>  _
	Public Property Cartas() As EntitySet(Of Cartas)
		Get
			Return Me._Cartas
		End Get
		Set
			Me._Cartas.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_Ofrenda", Storage:="_Ofrenda", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion")>  _
	Public Property Ofrenda() As EntitySet(Of Ofrenda)
		Get
			Return Me._Ofrenda
		End Get
		Set
			Me._Ofrenda.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_Adopcion", Storage:="_Beneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado", IsForeignKey:=true)>  _
	Public Property Beneficiado() As Beneficiado
		Get
			Return Me._Beneficiado.Entity
		End Get
		Set
			Dim previousValue As Beneficiado = Me._Beneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Beneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Beneficiado.Entity = Nothing
					previousValue.Adopcion.Remove(Me)
				End If
				Me._Beneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Adopcion.Add(Me)
					Me._IdBeneficiado = value.IdBeneficiado
				Else
					Me._IdBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Beneficiado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoAdopcion_Adopcion", Storage:="_EstadoAdopcion", ThisKey:="IdEstadoAdopcion", OtherKey:="IdEstadoAdopcion", IsForeignKey:=true)>  _
	Public Property EstadoAdopcion() As EstadoAdopcion
		Get
			Return Me._EstadoAdopcion.Entity
		End Get
		Set
			Dim previousValue As EstadoAdopcion = Me._EstadoAdopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EstadoAdopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EstadoAdopcion.Entity = Nothing
					previousValue.Adopcion.Remove(Me)
				End If
				Me._EstadoAdopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Adopcion.Add(Me)
					Me._IdEstadoAdopcion = value.IdEstadoAdopcion
				Else
					Me._IdEstadoAdopcion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EstadoAdopcion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sponsor_Adopcion", Storage:="_Sponsor", ThisKey:="IdSponsor", OtherKey:="IdSponsor", IsForeignKey:=true)>  _
	Public Property Sponsor() As Sponsor
		Get
			Return Me._Sponsor.Entity
		End Get
		Set
			Dim previousValue As Sponsor = Me._Sponsor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sponsor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sponsor.Entity = Nothing
					previousValue.Adopcion.Remove(Me)
				End If
				Me._Sponsor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Adopcion.Add(Me)
					Me._IdSponsor = value.IdSponsor
				Else
					Me._IdSponsor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sponsor")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoPagoAdopcion_Adopcion", Storage:="_TipoPagoAdopcion", ThisKey:="IdTipoPagoAdopcion", OtherKey:="IdTipoPagoAdopcion", IsForeignKey:=true)>  _
	Public Property TipoPagoAdopcion() As TipoPagoAdopcion
		Get
			Return Me._TipoPagoAdopcion.Entity
		End Get
		Set
			Dim previousValue As TipoPagoAdopcion = Me._TipoPagoAdopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoPagoAdopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoPagoAdopcion.Entity = Nothing
					previousValue.Adopcion.Remove(Me)
				End If
				Me._TipoPagoAdopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Adopcion.Add(Me)
					Me._IdTipoPagoAdopcion = value.IdTipoPagoAdopcion
				Else
					Me._IdTipoPagoAdopcion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoPagoAdopcion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AdopcionPago(ByVal entity As AdopcionPago)
		Me.SendPropertyChanging
		entity.Adopcion = Me
	End Sub
	
	Private Sub detach_AdopcionPago(ByVal entity As AdopcionPago)
		Me.SendPropertyChanging
		entity.Adopcion = Nothing
	End Sub
	
	Private Sub attach_Cartas(ByVal entity As Cartas)
		Me.SendPropertyChanging
		entity.Adopcion = Me
	End Sub
	
	Private Sub detach_Cartas(ByVal entity As Cartas)
		Me.SendPropertyChanging
		entity.Adopcion = Nothing
	End Sub
	
	Private Sub attach_Ofrenda(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.Adopcion = Me
	End Sub
	
	Private Sub detach_Ofrenda(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.Adopcion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AdopcionPago")>  _
Partial Public Class AdopcionPago
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdAdopcionPago As Integer
	
	Private _FechaPago As Date
	
	Private _Valor As String
	
	Private _IdAdopcion As Integer
	
	Private _Adopcion As EntityRef(Of Adopcion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdAdopcionPagoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAdopcionPagoChanged()
    End Sub
    Partial Private Sub OnFechaPagoChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaPagoChanged()
    End Sub
    Partial Private Sub OnValorChanging(value As String)
    End Sub
    Partial Private Sub OnValorChanged()
    End Sub
    Partial Private Sub OnIdAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAdopcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = CType(Nothing, EntityRef(Of Adopcion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAdopcionPago", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdAdopcionPago() As Integer
		Get
			Return Me._IdAdopcionPago
		End Get
		Set
			If ((Me._IdAdopcionPago = value)  _
						= false) Then
				Me.OnIdAdopcionPagoChanging(value)
				Me.SendPropertyChanging
				Me._IdAdopcionPago = value
				Me.SendPropertyChanged("IdAdopcionPago")
				Me.OnIdAdopcionPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaPago", DbType:="Date NOT NULL")>  _
	Public Property FechaPago() As Date
		Get
			Return Me._FechaPago
		End Get
		Set
			If ((Me._FechaPago = value)  _
						= false) Then
				Me.OnFechaPagoChanging(value)
				Me.SendPropertyChanging
				Me._FechaPago = value
				Me.SendPropertyChanged("FechaPago")
				Me.OnFechaPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Valor", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Valor() As String
		Get
			Return Me._Valor
		End Get
		Set
			If (String.Equals(Me._Valor, value) = false) Then
				Me.OnValorChanging(value)
				Me.SendPropertyChanging
				Me._Valor = value
				Me.SendPropertyChanged("Valor")
				Me.OnValorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAdopcion", DbType:="Int NOT NULL")>  _
	Public Property IdAdopcion() As Integer
		Get
			Return Me._IdAdopcion
		End Get
		Set
			If ((Me._IdAdopcion = value)  _
						= false) Then
				If Me._Adopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdAdopcion = value
				Me.SendPropertyChanged("IdAdopcion")
				Me.OnIdAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_AdopcionPago", Storage:="_Adopcion", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion", IsForeignKey:=true)>  _
	Public Property Adopcion() As Adopcion
		Get
			Return Me._Adopcion.Entity
		End Get
		Set
			Dim previousValue As Adopcion = Me._Adopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Adopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Adopcion.Entity = Nothing
					previousValue.AdopcionPago.Remove(Me)
				End If
				Me._Adopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AdopcionPago.Add(Me)
					Me._IdAdopcion = value.IdAdopcion
				Else
					Me._IdAdopcion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Adopcion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AsistenciaClaseDominical")>  _
Partial Public Class AsistenciaClaseDominical
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdAsistencia As Integer
	
	Private _Asistencia As String
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdAsistenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAsistenciaChanged()
    End Sub
    Partial Private Sub OnAsistenciaChanging(value As String)
    End Sub
    Partial Private Sub OnAsistenciaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAsistencia", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdAsistencia() As Integer
		Get
			Return Me._IdAsistencia
		End Get
		Set
			If ((Me._IdAsistencia = value)  _
						= false) Then
				Me.OnIdAsistenciaChanging(value)
				Me.SendPropertyChanging
				Me._IdAsistencia = value
				Me.SendPropertyChanged("IdAsistencia")
				Me.OnIdAsistenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Asistencia", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Asistencia() As String
		Get
			Return Me._Asistencia
		End Get
		Set
			If (String.Equals(Me._Asistencia, value) = false) Then
				Me.OnAsistenciaChanging(value)
				Me.SendPropertyChanging
				Me._Asistencia = value
				Me.SendPropertyChanged("Asistencia")
				Me.OnAsistenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AsistenciaClaseDominical_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdAsistencia", OtherKey:="IdAsistencia")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.AsistenciaClaseDominical = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.AsistenciaClaseDominical = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Beneficiado")>  _
Partial Public Class Beneficiado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBeneficiado As Integer
	
	Private _NombreBeneficiado As String
	
	Private _ApellidoBeneficiado As String
	
	Private _Direccion As String
	
	Private _FechaNac As Date
	
	Private _CantidadHermanos As String
	
	Private _CantidadHermanas As String
	
	Private _ColorOjos As String
	
	Private _ColorPelo As String
	
	Private _Nacionalidad As String
	
	Private _IdGradoCursado As Integer
	
	Private _IdSexo As Integer
	
	Private _IdIglesia As Integer
	
	Private _IdLugar As Integer
	
	Private _IdEstadoBeneficiado As Integer
	
	Private _IdInstitucion As Integer
	
	Private _FechaHistoriaEnviada As Date
	
	Private _EncuestaRealizada As String
	
	Private _IdAsistencia As Integer
	
	Private _IdInterno As Integer
	
	Private _EnfermedadPadecimiento As String
	
	Private _Adopcion As EntitySet(Of Adopcion)
	
	Private _BeneficiadoTutor As EntitySet(Of BeneficiadoTutor)
	
	Private _CasaBeneficiado As EntitySet(Of CasaBeneficiado)
	
	Private _HermanosBeneficiados As EntitySet(Of HermanosBeneficiados)
	
	Private _InteresesBeneficiado As EntitySet(Of InteresesBeneficiado)
	
	Private _AsistenciaClaseDominical As EntityRef(Of AsistenciaClaseDominical)
	
	Private _EstadoBeneficiado As EntityRef(Of EstadoBeneficiado)
	
	Private _GradoCursado As EntityRef(Of GradoCursado)
	
	Private _EstadoBeneficiado1 As EntityRef(Of EstadoBeneficiado1)
	
	Private _GradoCursado1 As EntityRef(Of GradoCursado1)
	
	Private _Iglesia As EntityRef(Of Iglesia)
	
	Private _Institucion As EntityRef(Of Institucion)
	
	Private _Interno As EntityRef(Of Interno)
	
	Private _Lugar As EntityRef(Of Lugar)
	
	Private _Sexo As EntityRef(Of Sexo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    Partial Private Sub OnNombreBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreBeneficiadoChanged()
    End Sub
    Partial Private Sub OnApellidoBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnApellidoBeneficiadoChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnFechaNacChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaNacChanged()
    End Sub
    Partial Private Sub OnCantidadHermanosChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadHermanosChanged()
    End Sub
    Partial Private Sub OnCantidadHermanasChanging(value As String)
    End Sub
    Partial Private Sub OnCantidadHermanasChanged()
    End Sub
    Partial Private Sub OnColorOjosChanging(value As String)
    End Sub
    Partial Private Sub OnColorOjosChanged()
    End Sub
    Partial Private Sub OnColorPeloChanging(value As String)
    End Sub
    Partial Private Sub OnColorPeloChanged()
    End Sub
    Partial Private Sub OnNacionalidadChanging(value As String)
    End Sub
    Partial Private Sub OnNacionalidadChanged()
    End Sub
    Partial Private Sub OnIdGradoCursadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdGradoCursadoChanged()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    Partial Private Sub OnIdIglesiaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIglesiaChanged()
    End Sub
    Partial Private Sub OnIdLugarChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLugarChanged()
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanged()
    End Sub
    Partial Private Sub OnIdInstitucionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdInstitucionChanged()
    End Sub
    Partial Private Sub OnFechaHistoriaEnviadaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaHistoriaEnviadaChanged()
    End Sub
    Partial Private Sub OnEncuestaRealizadaChanging(value As String)
    End Sub
    Partial Private Sub OnEncuestaRealizadaChanged()
    End Sub
    Partial Private Sub OnIdAsistenciaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAsistenciaChanged()
    End Sub
    Partial Private Sub OnIdInternoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdInternoChanged()
    End Sub
    Partial Private Sub OnEnfermedadPadecimientoChanging(value As String)
    End Sub
    Partial Private Sub OnEnfermedadPadecimientoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = New EntitySet(Of Adopcion)(AddressOf Me.attach_Adopcion, AddressOf Me.detach_Adopcion)
		Me._BeneficiadoTutor = New EntitySet(Of BeneficiadoTutor)(AddressOf Me.attach_BeneficiadoTutor, AddressOf Me.detach_BeneficiadoTutor)
		Me._CasaBeneficiado = New EntitySet(Of CasaBeneficiado)(AddressOf Me.attach_CasaBeneficiado, AddressOf Me.detach_CasaBeneficiado)
		Me._HermanosBeneficiados = New EntitySet(Of HermanosBeneficiados)(AddressOf Me.attach_HermanosBeneficiados, AddressOf Me.detach_HermanosBeneficiados)
		Me._InteresesBeneficiado = New EntitySet(Of InteresesBeneficiado)(AddressOf Me.attach_InteresesBeneficiado, AddressOf Me.detach_InteresesBeneficiado)
		Me._AsistenciaClaseDominical = CType(Nothing, EntityRef(Of AsistenciaClaseDominical))
		Me._EstadoBeneficiado = CType(Nothing, EntityRef(Of EstadoBeneficiado))
		Me._GradoCursado = CType(Nothing, EntityRef(Of GradoCursado))
		Me._EstadoBeneficiado1 = CType(Nothing, EntityRef(Of EstadoBeneficiado1))
		Me._GradoCursado1 = CType(Nothing, EntityRef(Of GradoCursado1))
		Me._Iglesia = CType(Nothing, EntityRef(Of Iglesia))
		Me._Institucion = CType(Nothing, EntityRef(Of Institucion))
		Me._Interno = CType(Nothing, EntityRef(Of Interno))
		Me._Lugar = CType(Nothing, EntityRef(Of Lugar))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreBeneficiado() As String
		Get
			Return Me._NombreBeneficiado
		End Get
		Set
			If (String.Equals(Me._NombreBeneficiado, value) = false) Then
				Me.OnNombreBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._NombreBeneficiado = value
				Me.SendPropertyChanged("NombreBeneficiado")
				Me.OnNombreBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApellidoBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ApellidoBeneficiado() As String
		Get
			Return Me._ApellidoBeneficiado
		End Get
		Set
			If (String.Equals(Me._ApellidoBeneficiado, value) = false) Then
				Me.OnApellidoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._ApellidoBeneficiado = value
				Me.SendPropertyChanged("ApellidoBeneficiado")
				Me.OnApellidoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaNac", DbType:="Date NOT NULL")>  _
	Public Property FechaNac() As Date
		Get
			Return Me._FechaNac
		End Get
		Set
			If ((Me._FechaNac = value)  _
						= false) Then
				Me.OnFechaNacChanging(value)
				Me.SendPropertyChanging
				Me._FechaNac = value
				Me.SendPropertyChanged("FechaNac")
				Me.OnFechaNacChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHermanos", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadHermanos() As String
		Get
			Return Me._CantidadHermanos
		End Get
		Set
			If (String.Equals(Me._CantidadHermanos, value) = false) Then
				Me.OnCantidadHermanosChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHermanos = value
				Me.SendPropertyChanged("CantidadHermanos")
				Me.OnCantidadHermanosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHermanas", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false)>  _
	Public Property CantidadHermanas() As String
		Get
			Return Me._CantidadHermanas
		End Get
		Set
			If (String.Equals(Me._CantidadHermanas, value) = false) Then
				Me.OnCantidadHermanasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHermanas = value
				Me.SendPropertyChanged("CantidadHermanas")
				Me.OnCantidadHermanasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorOjos", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property ColorOjos() As String
		Get
			Return Me._ColorOjos
		End Get
		Set
			If (String.Equals(Me._ColorOjos, value) = false) Then
				Me.OnColorOjosChanging(value)
				Me.SendPropertyChanging
				Me._ColorOjos = value
				Me.SendPropertyChanged("ColorOjos")
				Me.OnColorOjosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ColorPelo", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property ColorPelo() As String
		Get
			Return Me._ColorPelo
		End Get
		Set
			If (String.Equals(Me._ColorPelo, value) = false) Then
				Me.OnColorPeloChanging(value)
				Me.SendPropertyChanging
				Me._ColorPelo = value
				Me.SendPropertyChanged("ColorPelo")
				Me.OnColorPeloChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nacionalidad", DbType:="NVarChar(60) NOT NULL", CanBeNull:=false)>  _
	Public Property Nacionalidad() As String
		Get
			Return Me._Nacionalidad
		End Get
		Set
			If (String.Equals(Me._Nacionalidad, value) = false) Then
				Me.OnNacionalidadChanging(value)
				Me.SendPropertyChanging
				Me._Nacionalidad = value
				Me.SendPropertyChanged("Nacionalidad")
				Me.OnNacionalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGradoCursado", DbType:="Int NOT NULL")>  _
	Public Property IdGradoCursado() As Integer
		Get
			Return Me._IdGradoCursado
		End Get
		Set
			If ((Me._IdGradoCursado = value)  _
						= false) Then
				If (Me._GradoCursado.HasLoadedOrAssignedValue OrElse Me._GradoCursado1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._IdGradoCursado = value
				Me.SendPropertyChanged("IdGradoCursado")
				Me.OnIdGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", DbType:="Int NOT NULL")>  _
	Public Property IdSexo() As Integer
		Get
			Return Me._IdSexo
		End Get
		Set
			If ((Me._IdSexo = value)  _
						= false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdIglesia", DbType:="Int NOT NULL")>  _
	Public Property IdIglesia() As Integer
		Get
			Return Me._IdIglesia
		End Get
		Set
			If ((Me._IdIglesia = value)  _
						= false) Then
				If Me._Iglesia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdIglesiaChanging(value)
				Me.SendPropertyChanging
				Me._IdIglesia = value
				Me.SendPropertyChanged("IdIglesia")
				Me.OnIdIglesiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLugar", DbType:="Int NOT NULL")>  _
	Public Property IdLugar() As Integer
		Get
			Return Me._IdLugar
		End Get
		Set
			If ((Me._IdLugar = value)  _
						= false) Then
				If Me._Lugar.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdLugarChanging(value)
				Me.SendPropertyChanging
				Me._IdLugar = value
				Me.SendPropertyChanged("IdLugar")
				Me.OnIdLugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdEstadoBeneficiado() As Integer
		Get
			Return Me._IdEstadoBeneficiado
		End Get
		Set
			If ((Me._IdEstadoBeneficiado = value)  _
						= false) Then
				If (Me._EstadoBeneficiado.HasLoadedOrAssignedValue OrElse Me._EstadoBeneficiado1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEstadoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoBeneficiado = value
				Me.SendPropertyChanged("IdEstadoBeneficiado")
				Me.OnIdEstadoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInstitucion", DbType:="Int NOT NULL")>  _
	Public Property IdInstitucion() As Integer
		Get
			Return Me._IdInstitucion
		End Get
		Set
			If ((Me._IdInstitucion = value)  _
						= false) Then
				If Me._Institucion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._IdInstitucion = value
				Me.SendPropertyChanged("IdInstitucion")
				Me.OnIdInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaHistoriaEnviada", DbType:="Date NOT NULL")>  _
	Public Property FechaHistoriaEnviada() As Date
		Get
			Return Me._FechaHistoriaEnviada
		End Get
		Set
			If ((Me._FechaHistoriaEnviada = value)  _
						= false) Then
				Me.OnFechaHistoriaEnviadaChanging(value)
				Me.SendPropertyChanging
				Me._FechaHistoriaEnviada = value
				Me.SendPropertyChanged("FechaHistoriaEnviada")
				Me.OnFechaHistoriaEnviadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EncuestaRealizada", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property EncuestaRealizada() As String
		Get
			Return Me._EncuestaRealizada
		End Get
		Set
			If (String.Equals(Me._EncuestaRealizada, value) = false) Then
				Me.OnEncuestaRealizadaChanging(value)
				Me.SendPropertyChanging
				Me._EncuestaRealizada = value
				Me.SendPropertyChanged("EncuestaRealizada")
				Me.OnEncuestaRealizadaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAsistencia", DbType:="Int NOT NULL")>  _
	Public Property IdAsistencia() As Integer
		Get
			Return Me._IdAsistencia
		End Get
		Set
			If ((Me._IdAsistencia = value)  _
						= false) Then
				If Me._AsistenciaClaseDominical.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdAsistenciaChanging(value)
				Me.SendPropertyChanging
				Me._IdAsistencia = value
				Me.SendPropertyChanged("IdAsistencia")
				Me.OnIdAsistenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInterno", DbType:="Int NOT NULL")>  _
	Public Property IdInterno() As Integer
		Get
			Return Me._IdInterno
		End Get
		Set
			If ((Me._IdInterno = value)  _
						= false) Then
				If Me._Interno.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdInternoChanging(value)
				Me.SendPropertyChanging
				Me._IdInterno = value
				Me.SendPropertyChanged("IdInterno")
				Me.OnIdInternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnfermedadPadecimiento", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EnfermedadPadecimiento() As String
		Get
			Return Me._EnfermedadPadecimiento
		End Get
		Set
			If (String.Equals(Me._EnfermedadPadecimiento, value) = false) Then
				Me.OnEnfermedadPadecimientoChanging(value)
				Me.SendPropertyChanging
				Me._EnfermedadPadecimiento = value
				Me.SendPropertyChanged("EnfermedadPadecimiento")
				Me.OnEnfermedadPadecimientoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_Adopcion", Storage:="_Adopcion", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado")>  _
	Public Property Adopcion() As EntitySet(Of Adopcion)
		Get
			Return Me._Adopcion
		End Get
		Set
			Me._Adopcion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_BeneficiadoTutor", Storage:="_BeneficiadoTutor", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado")>  _
	Public Property BeneficiadoTutor() As EntitySet(Of BeneficiadoTutor)
		Get
			Return Me._BeneficiadoTutor
		End Get
		Set
			Me._BeneficiadoTutor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_CasaBeneficiado", Storage:="_CasaBeneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado")>  _
	Public Property CasaBeneficiado() As EntitySet(Of CasaBeneficiado)
		Get
			Return Me._CasaBeneficiado
		End Get
		Set
			Me._CasaBeneficiado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_HermanosBeneficiados", Storage:="_HermanosBeneficiados", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado")>  _
	Public Property HermanosBeneficiados() As EntitySet(Of HermanosBeneficiados)
		Get
			Return Me._HermanosBeneficiados
		End Get
		Set
			Me._HermanosBeneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_InteresesBeneficiado", Storage:="_InteresesBeneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado")>  _
	Public Property InteresesBeneficiado() As EntitySet(Of InteresesBeneficiado)
		Get
			Return Me._InteresesBeneficiado
		End Get
		Set
			Me._InteresesBeneficiado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AsistenciaClaseDominical_Beneficiado", Storage:="_AsistenciaClaseDominical", ThisKey:="IdAsistencia", OtherKey:="IdAsistencia", IsForeignKey:=true)>  _
	Public Property AsistenciaClaseDominical() As AsistenciaClaseDominical
		Get
			Return Me._AsistenciaClaseDominical.Entity
		End Get
		Set
			Dim previousValue As AsistenciaClaseDominical = Me._AsistenciaClaseDominical.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AsistenciaClaseDominical.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AsistenciaClaseDominical.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._AsistenciaClaseDominical.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdAsistencia = value.IdAsistencia
				Else
					Me._IdAsistencia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AsistenciaClaseDominical")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoBeneficiado_Beneficiado", Storage:="_EstadoBeneficiado", ThisKey:="IdEstadoBeneficiado", OtherKey:="IdEstadoBeneficiado", IsForeignKey:=true)>  _
	Public Property EstadoBeneficiado() As EstadoBeneficiado
		Get
			Return Me._EstadoBeneficiado.Entity
		End Get
		Set
			Dim previousValue As EstadoBeneficiado = Me._EstadoBeneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EstadoBeneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EstadoBeneficiado.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._EstadoBeneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdEstadoBeneficiado = value.IdEstadoBeneficiado
				Else
					Me._IdEstadoBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EstadoBeneficiado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado_Beneficiado", Storage:="_GradoCursado", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado", IsForeignKey:=true)>  _
	Public Property GradoCursado() As GradoCursado
		Get
			Return Me._GradoCursado.Entity
		End Get
		Set
			Dim previousValue As GradoCursado = Me._GradoCursado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GradoCursado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GradoCursado.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._GradoCursado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdGradoCursado = value.IdGradoCursado
				Else
					Me._IdGradoCursado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("GradoCursado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoBeneficiado1_Beneficiado", Storage:="_EstadoBeneficiado1", ThisKey:="IdEstadoBeneficiado", OtherKey:="IdEstadoBeneficiado", IsForeignKey:=true)>  _
	Public Property EstadoBeneficiado1() As EstadoBeneficiado1
		Get
			Return Me._EstadoBeneficiado1.Entity
		End Get
		Set
			Dim previousValue As EstadoBeneficiado1 = Me._EstadoBeneficiado1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EstadoBeneficiado1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EstadoBeneficiado1.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._EstadoBeneficiado1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdEstadoBeneficiado = value.IdEstadoBeneficiado
				Else
					Me._IdEstadoBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("EstadoBeneficiado1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado1_Beneficiado", Storage:="_GradoCursado1", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado", IsForeignKey:=true)>  _
	Public Property GradoCursado1() As GradoCursado1
		Get
			Return Me._GradoCursado1.Entity
		End Get
		Set
			Dim previousValue As GradoCursado1 = Me._GradoCursado1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GradoCursado1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GradoCursado1.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._GradoCursado1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdGradoCursado = value.IdGradoCursado
				Else
					Me._IdGradoCursado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("GradoCursado1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Iglesia_Beneficiado", Storage:="_Iglesia", ThisKey:="IdIglesia", OtherKey:="IdIglesia", IsForeignKey:=true)>  _
	Public Property Iglesia() As Iglesia
		Get
			Return Me._Iglesia.Entity
		End Get
		Set
			Dim previousValue As Iglesia = Me._Iglesia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Iglesia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Iglesia.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._Iglesia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdIglesia = value.IdIglesia
				Else
					Me._IdIglesia = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Iglesia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Institucion_Beneficiado", Storage:="_Institucion", ThisKey:="IdInstitucion", OtherKey:="IdInstitucion", IsForeignKey:=true)>  _
	Public Property Institucion() As Institucion
		Get
			Return Me._Institucion.Entity
		End Get
		Set
			Dim previousValue As Institucion = Me._Institucion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Institucion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Institucion.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._Institucion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdInstitucion = value.IdInstitucion
				Else
					Me._IdInstitucion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Institucion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Interno_Beneficiado", Storage:="_Interno", ThisKey:="IdInterno", OtherKey:="IdInterno", IsForeignKey:=true)>  _
	Public Property Interno() As Interno
		Get
			Return Me._Interno.Entity
		End Get
		Set
			Dim previousValue As Interno = Me._Interno.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Interno.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Interno.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._Interno.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdInterno = value.IdInterno
				Else
					Me._IdInterno = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Interno")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lugar_Beneficiado", Storage:="_Lugar", ThisKey:="IdLugar", OtherKey:="IdLugar", IsForeignKey:=true)>  _
	Public Property Lugar() As Lugar
		Get
			Return Me._Lugar.Entity
		End Get
		Set
			Dim previousValue As Lugar = Me._Lugar.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Lugar.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Lugar.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._Lugar.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdLugar = value.IdLugar
				Else
					Me._IdLugar = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Lugar")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Beneficiado", Storage:="_Sexo", ThisKey:="IdSexo", OtherKey:="IdSexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Beneficiado.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Beneficiado.Add(Me)
					Me._IdSexo = value.IdSexo
				Else
					Me._IdSexo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Adopcion(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Beneficiado = Me
	End Sub
	
	Private Sub detach_Adopcion(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Beneficiado = Nothing
	End Sub
	
	Private Sub attach_BeneficiadoTutor(ByVal entity As BeneficiadoTutor)
		Me.SendPropertyChanging
		entity.Beneficiado = Me
	End Sub
	
	Private Sub detach_BeneficiadoTutor(ByVal entity As BeneficiadoTutor)
		Me.SendPropertyChanging
		entity.Beneficiado = Nothing
	End Sub
	
	Private Sub attach_CasaBeneficiado(ByVal entity As CasaBeneficiado)
		Me.SendPropertyChanging
		entity.Beneficiado = Me
	End Sub
	
	Private Sub detach_CasaBeneficiado(ByVal entity As CasaBeneficiado)
		Me.SendPropertyChanging
		entity.Beneficiado = Nothing
	End Sub
	
	Private Sub attach_HermanosBeneficiados(ByVal entity As HermanosBeneficiados)
		Me.SendPropertyChanging
		entity.Beneficiado = Me
	End Sub
	
	Private Sub detach_HermanosBeneficiados(ByVal entity As HermanosBeneficiados)
		Me.SendPropertyChanging
		entity.Beneficiado = Nothing
	End Sub
	
	Private Sub attach_InteresesBeneficiado(ByVal entity As InteresesBeneficiado)
		Me.SendPropertyChanging
		entity.Beneficiado = Me
	End Sub
	
	Private Sub detach_InteresesBeneficiado(ByVal entity As InteresesBeneficiado)
		Me.SendPropertyChanging
		entity.Beneficiado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BeneficiadoTutor")>  _
Partial Public Class BeneficiadoTutor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBeneficiado As Integer
	
	Private _IdTutor As Integer
	
	Private _IdBeneficiadoTutor As Integer
	
	Private _Beneficiado As EntityRef(Of Beneficiado)
	
	Private _Tutor As EntityRef(Of Tutor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    Partial Private Sub OnIdTutorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTutorChanged()
    End Sub
    Partial Private Sub OnIdBeneficiadoTutorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoTutorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = CType(Nothing, EntityRef(Of Beneficiado))
		Me._Tutor = CType(Nothing, EntityRef(Of Tutor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				If Me._Beneficiado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTutor", DbType:="Int NOT NULL")>  _
	Public Property IdTutor() As Integer
		Get
			Return Me._IdTutor
		End Get
		Set
			If ((Me._IdTutor = value)  _
						= false) Then
				If Me._Tutor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTutorChanging(value)
				Me.SendPropertyChanging
				Me._IdTutor = value
				Me.SendPropertyChanged("IdTutor")
				Me.OnIdTutorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiadoTutor", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdBeneficiadoTutor() As Integer
		Get
			Return Me._IdBeneficiadoTutor
		End Get
		Set
			If ((Me._IdBeneficiadoTutor = value)  _
						= false) Then
				Me.OnIdBeneficiadoTutorChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiadoTutor = value
				Me.SendPropertyChanged("IdBeneficiadoTutor")
				Me.OnIdBeneficiadoTutorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_BeneficiadoTutor", Storage:="_Beneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado", IsForeignKey:=true)>  _
	Public Property Beneficiado() As Beneficiado
		Get
			Return Me._Beneficiado.Entity
		End Get
		Set
			Dim previousValue As Beneficiado = Me._Beneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Beneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Beneficiado.Entity = Nothing
					previousValue.BeneficiadoTutor.Remove(Me)
				End If
				Me._Beneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BeneficiadoTutor.Add(Me)
					Me._IdBeneficiado = value.IdBeneficiado
				Else
					Me._IdBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Beneficiado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tutor_BeneficiadoTutor", Storage:="_Tutor", ThisKey:="IdTutor", OtherKey:="IdTutor", IsForeignKey:=true)>  _
	Public Property Tutor() As Tutor
		Get
			Return Me._Tutor.Entity
		End Get
		Set
			Dim previousValue As Tutor = Me._Tutor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tutor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tutor.Entity = Nothing
					previousValue.BeneficiadoTutor.Remove(Me)
				End If
				Me._Tutor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.BeneficiadoTutor.Add(Me)
					Me._IdTutor = value.IdTutor
				Else
					Me._IdTutor = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Tutor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Cartas")>  _
Partial Public Class Cartas
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCarta As Integer
	
	Private _DescripcionCarta As String
	
	Private _FechaEntrega As Date
	
	Private _IdTipoCarta As Integer
	
	Private _IdTipoCartaEnvio As Integer
	
	Private _IdAdopcion As Integer
	
	Private _Adopcion As EntityRef(Of Adopcion)
	
	Private _TipoCarta As EntityRef(Of TipoCarta)
	
	Private _TipoCartaEnvio As EntityRef(Of TipoCartaEnvio)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCartaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCartaChanged()
    End Sub
    Partial Private Sub OnDescripcionCartaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionCartaChanged()
    End Sub
    Partial Private Sub OnFechaEntregaChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaEntregaChanged()
    End Sub
    Partial Private Sub OnIdTipoCartaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCartaChanged()
    End Sub
    Partial Private Sub OnIdTipoCartaEnvioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCartaEnvioChanged()
    End Sub
    Partial Private Sub OnIdAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAdopcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = CType(Nothing, EntityRef(Of Adopcion))
		Me._TipoCarta = CType(Nothing, EntityRef(Of TipoCarta))
		Me._TipoCartaEnvio = CType(Nothing, EntityRef(Of TipoCartaEnvio))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCarta", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdCarta() As Integer
		Get
			Return Me._IdCarta
		End Get
		Set
			If ((Me._IdCarta = value)  _
						= false) Then
				Me.OnIdCartaChanging(value)
				Me.SendPropertyChanging
				Me._IdCarta = value
				Me.SendPropertyChanged("IdCarta")
				Me.OnIdCartaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionCarta", DbType:="NVarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property DescripcionCarta() As String
		Get
			Return Me._DescripcionCarta
		End Get
		Set
			If (String.Equals(Me._DescripcionCarta, value) = false) Then
				Me.OnDescripcionCartaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionCarta = value
				Me.SendPropertyChanged("DescripcionCarta")
				Me.OnDescripcionCartaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaEntrega", DbType:="Date NOT NULL")>  _
	Public Property FechaEntrega() As Date
		Get
			Return Me._FechaEntrega
		End Get
		Set
			If ((Me._FechaEntrega = value)  _
						= false) Then
				Me.OnFechaEntregaChanging(value)
				Me.SendPropertyChanging
				Me._FechaEntrega = value
				Me.SendPropertyChanged("FechaEntrega")
				Me.OnFechaEntregaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCarta", DbType:="Int NOT NULL")>  _
	Public Property IdTipoCarta() As Integer
		Get
			Return Me._IdTipoCarta
		End Get
		Set
			If ((Me._IdTipoCarta = value)  _
						= false) Then
				If Me._TipoCarta.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoCartaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCarta = value
				Me.SendPropertyChanged("IdTipoCarta")
				Me.OnIdTipoCartaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCartaEnvio", DbType:="Int NOT NULL")>  _
	Public Property IdTipoCartaEnvio() As Integer
		Get
			Return Me._IdTipoCartaEnvio
		End Get
		Set
			If ((Me._IdTipoCartaEnvio = value)  _
						= false) Then
				If Me._TipoCartaEnvio.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoCartaEnvioChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCartaEnvio = value
				Me.SendPropertyChanged("IdTipoCartaEnvio")
				Me.OnIdTipoCartaEnvioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAdopcion", DbType:="Int NOT NULL")>  _
	Public Property IdAdopcion() As Integer
		Get
			Return Me._IdAdopcion
		End Get
		Set
			If ((Me._IdAdopcion = value)  _
						= false) Then
				If Me._Adopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdAdopcion = value
				Me.SendPropertyChanged("IdAdopcion")
				Me.OnIdAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_Cartas", Storage:="_Adopcion", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion", IsForeignKey:=true)>  _
	Public Property Adopcion() As Adopcion
		Get
			Return Me._Adopcion.Entity
		End Get
		Set
			Dim previousValue As Adopcion = Me._Adopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Adopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Adopcion.Entity = Nothing
					previousValue.Cartas.Remove(Me)
				End If
				Me._Adopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cartas.Add(Me)
					Me._IdAdopcion = value.IdAdopcion
				Else
					Me._IdAdopcion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Adopcion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCarta_Cartas", Storage:="_TipoCarta", ThisKey:="IdTipoCarta", OtherKey:="IdTipoCarta", IsForeignKey:=true)>  _
	Public Property TipoCarta() As TipoCarta
		Get
			Return Me._TipoCarta.Entity
		End Get
		Set
			Dim previousValue As TipoCarta = Me._TipoCarta.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoCarta.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoCarta.Entity = Nothing
					previousValue.Cartas.Remove(Me)
				End If
				Me._TipoCarta.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cartas.Add(Me)
					Me._IdTipoCarta = value.IdTipoCarta
				Else
					Me._IdTipoCarta = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoCarta")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCartaEnvio_Cartas", Storage:="_TipoCartaEnvio", ThisKey:="IdTipoCartaEnvio", OtherKey:="IdTipoCartaEnvio", IsForeignKey:=true)>  _
	Public Property TipoCartaEnvio() As TipoCartaEnvio
		Get
			Return Me._TipoCartaEnvio.Entity
		End Get
		Set
			Dim previousValue As TipoCartaEnvio = Me._TipoCartaEnvio.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoCartaEnvio.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoCartaEnvio.Entity = Nothing
					previousValue.Cartas.Remove(Me)
				End If
				Me._TipoCartaEnvio.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cartas.Add(Me)
					Me._IdTipoCartaEnvio = value.IdTipoCartaEnvio
				Else
					Me._IdTipoCartaEnvio = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoCartaEnvio")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CasaBeneficiado")>  _
Partial Public Class CasaBeneficiado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdCasaBeneficiado As Integer
	
	Private _CantidadDormitorios As System.Nullable(Of Integer)
	
	Private _CantidadCamas As System.Nullable(Of Integer)
	
	Private _CantidadHamacas As System.Nullable(Of Integer)
	
	Private _CantidadRopaCama As System.Nullable(Of Integer)
	
	Private _CantidadMesas As System.Nullable(Of Integer)
	
	Private _CantidadSillas As System.Nullable(Of Integer)
	
	Private _Piso As String
	
	Private _IdTipoCasa As Integer
	
	Private _IdBeneficiado As Integer
	
	Private _Beneficiado As EntityRef(Of Beneficiado)
	
	Private _TipoCasa As EntityRef(Of TipoCasa)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdCasaBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCasaBeneficiadoChanged()
    End Sub
    Partial Private Sub OnCantidadDormitoriosChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCantidadDormitoriosChanged()
    End Sub
    Partial Private Sub OnCantidadCamasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCantidadCamasChanged()
    End Sub
    Partial Private Sub OnCantidadHamacasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCantidadHamacasChanged()
    End Sub
    Partial Private Sub OnCantidadRopaCamaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCantidadRopaCamaChanged()
    End Sub
    Partial Private Sub OnCantidadMesasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCantidadMesasChanged()
    End Sub
    Partial Private Sub OnCantidadSillasChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCantidadSillasChanged()
    End Sub
    Partial Private Sub OnPisoChanging(value As String)
    End Sub
    Partial Private Sub OnPisoChanged()
    End Sub
    Partial Private Sub OnIdTipoCasaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCasaChanged()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = CType(Nothing, EntityRef(Of Beneficiado))
		Me._TipoCasa = CType(Nothing, EntityRef(Of TipoCasa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCasaBeneficiado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdCasaBeneficiado() As Integer
		Get
			Return Me._IdCasaBeneficiado
		End Get
		Set
			If ((Me._IdCasaBeneficiado = value)  _
						= false) Then
				Me.OnIdCasaBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdCasaBeneficiado = value
				Me.SendPropertyChanged("IdCasaBeneficiado")
				Me.OnIdCasaBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadDormitorios", DbType:="Int")>  _
	Public Property CantidadDormitorios() As System.Nullable(Of Integer)
		Get
			Return Me._CantidadDormitorios
		End Get
		Set
			If (Me._CantidadDormitorios.Equals(value) = false) Then
				Me.OnCantidadDormitoriosChanging(value)
				Me.SendPropertyChanging
				Me._CantidadDormitorios = value
				Me.SendPropertyChanged("CantidadDormitorios")
				Me.OnCantidadDormitoriosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadCamas", DbType:="Int")>  _
	Public Property CantidadCamas() As System.Nullable(Of Integer)
		Get
			Return Me._CantidadCamas
		End Get
		Set
			If (Me._CantidadCamas.Equals(value) = false) Then
				Me.OnCantidadCamasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadCamas = value
				Me.SendPropertyChanged("CantidadCamas")
				Me.OnCantidadCamasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadHamacas", DbType:="Int")>  _
	Public Property CantidadHamacas() As System.Nullable(Of Integer)
		Get
			Return Me._CantidadHamacas
		End Get
		Set
			If (Me._CantidadHamacas.Equals(value) = false) Then
				Me.OnCantidadHamacasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadHamacas = value
				Me.SendPropertyChanged("CantidadHamacas")
				Me.OnCantidadHamacasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadRopaCama", DbType:="Int")>  _
	Public Property CantidadRopaCama() As System.Nullable(Of Integer)
		Get
			Return Me._CantidadRopaCama
		End Get
		Set
			If (Me._CantidadRopaCama.Equals(value) = false) Then
				Me.OnCantidadRopaCamaChanging(value)
				Me.SendPropertyChanging
				Me._CantidadRopaCama = value
				Me.SendPropertyChanged("CantidadRopaCama")
				Me.OnCantidadRopaCamaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadMesas", DbType:="Int")>  _
	Public Property CantidadMesas() As System.Nullable(Of Integer)
		Get
			Return Me._CantidadMesas
		End Get
		Set
			If (Me._CantidadMesas.Equals(value) = false) Then
				Me.OnCantidadMesasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadMesas = value
				Me.SendPropertyChanged("CantidadMesas")
				Me.OnCantidadMesasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CantidadSillas", DbType:="Int")>  _
	Public Property CantidadSillas() As System.Nullable(Of Integer)
		Get
			Return Me._CantidadSillas
		End Get
		Set
			If (Me._CantidadSillas.Equals(value) = false) Then
				Me.OnCantidadSillasChanging(value)
				Me.SendPropertyChanging
				Me._CantidadSillas = value
				Me.SendPropertyChanged("CantidadSillas")
				Me.OnCantidadSillasChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Piso", DbType:="NVarChar(50)")>  _
	Public Property Piso() As String
		Get
			Return Me._Piso
		End Get
		Set
			If (String.Equals(Me._Piso, value) = false) Then
				Me.OnPisoChanging(value)
				Me.SendPropertyChanging
				Me._Piso = value
				Me.SendPropertyChanged("Piso")
				Me.OnPisoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCasa", DbType:="Int NOT NULL")>  _
	Public Property IdTipoCasa() As Integer
		Get
			Return Me._IdTipoCasa
		End Get
		Set
			If ((Me._IdTipoCasa = value)  _
						= false) Then
				If Me._TipoCasa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoCasaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCasa = value
				Me.SendPropertyChanged("IdTipoCasa")
				Me.OnIdTipoCasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				If Me._Beneficiado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_CasaBeneficiado", Storage:="_Beneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado", IsForeignKey:=true)>  _
	Public Property Beneficiado() As Beneficiado
		Get
			Return Me._Beneficiado.Entity
		End Get
		Set
			Dim previousValue As Beneficiado = Me._Beneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Beneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Beneficiado.Entity = Nothing
					previousValue.CasaBeneficiado.Remove(Me)
				End If
				Me._Beneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CasaBeneficiado.Add(Me)
					Me._IdBeneficiado = value.IdBeneficiado
				Else
					Me._IdBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Beneficiado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCasa_CasaBeneficiado", Storage:="_TipoCasa", ThisKey:="IdTipoCasa", OtherKey:="IdTipoCasa", IsForeignKey:=true)>  _
	Public Property TipoCasa() As TipoCasa
		Get
			Return Me._TipoCasa.Entity
		End Get
		Set
			Dim previousValue As TipoCasa = Me._TipoCasa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoCasa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoCasa.Entity = Nothing
					previousValue.CasaBeneficiado.Remove(Me)
				End If
				Me._TipoCasa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CasaBeneficiado.Add(Me)
					Me._IdTipoCasa = value.IdTipoCasa
				Else
					Me._IdTipoCasa = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoCasa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EstadoAdopcion")>  _
Partial Public Class EstadoAdopcion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEstadoAdopcion As Integer
	
	Private _EstadoAdopcion As String
	
	Private _Adopcion As EntitySet(Of Adopcion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEstadoAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoAdopcionChanged()
    End Sub
    Partial Private Sub OnEstadoAdopcionChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoAdopcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = New EntitySet(Of Adopcion)(AddressOf Me.attach_Adopcion, AddressOf Me.detach_Adopcion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoAdopcion", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdEstadoAdopcion() As Integer
		Get
			Return Me._IdEstadoAdopcion
		End Get
		Set
			If ((Me._IdEstadoAdopcion = value)  _
						= false) Then
				Me.OnIdEstadoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoAdopcion = value
				Me.SendPropertyChanged("IdEstadoAdopcion")
				Me.OnIdEstadoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstadoAdopcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EstadoAdopcion() As String
		Get
			Return Me._EstadoAdopcion
		End Get
		Set
			If (String.Equals(Me._EstadoAdopcion, value) = false) Then
				Me.OnEstadoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._EstadoAdopcion = value
				Me.SendPropertyChanged("EstadoAdopcion")
				Me.OnEstadoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoAdopcion_Adopcion", Storage:="_Adopcion", ThisKey:="IdEstadoAdopcion", OtherKey:="IdEstadoAdopcion")>  _
	Public Property Adopcion() As EntitySet(Of Adopcion)
		Get
			Return Me._Adopcion
		End Get
		Set
			Me._Adopcion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Adopcion(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.EstadoAdopcion = Me
	End Sub
	
	Private Sub detach_Adopcion(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.EstadoAdopcion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EstadoBeneficiado")>  _
Partial Public Class EstadoBeneficiado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEstadoBeneficiado As Integer
	
	Private _EstadoBeneficiado As String
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanged()
    End Sub
    Partial Private Sub OnEstadoBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoBeneficiadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoBeneficiado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdEstadoBeneficiado() As Integer
		Get
			Return Me._IdEstadoBeneficiado
		End Get
		Set
			If ((Me._IdEstadoBeneficiado = value)  _
						= false) Then
				Me.OnIdEstadoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoBeneficiado = value
				Me.SendPropertyChanged("IdEstadoBeneficiado")
				Me.OnIdEstadoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstadoBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EstadoBeneficiado() As String
		Get
			Return Me._EstadoBeneficiado
		End Get
		Set
			If (String.Equals(Me._EstadoBeneficiado, value) = false) Then
				Me.OnEstadoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._EstadoBeneficiado = value
				Me.SendPropertyChanged("EstadoBeneficiado")
				Me.OnEstadoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoBeneficiado_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdEstadoBeneficiado", OtherKey:="IdEstadoBeneficiado")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.EstadoBeneficiado = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.EstadoBeneficiado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GradoCursado")>  _
Partial Public Class GradoCursado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdGradoCursado As Integer
	
	Private _GradoCursado As String
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
	Private _Hermanos As EntitySet(Of Hermanos)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdGradoCursadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdGradoCursadoChanged()
    End Sub
    Partial Private Sub OnGradoCursadoChanging(value As String)
    End Sub
    Partial Private Sub OnGradoCursadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		Me._Hermanos = New EntitySet(Of Hermanos)(AddressOf Me.attach_Hermanos, AddressOf Me.detach_Hermanos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGradoCursado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdGradoCursado() As Integer
		Get
			Return Me._IdGradoCursado
		End Get
		Set
			If ((Me._IdGradoCursado = value)  _
						= false) Then
				Me.OnIdGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._IdGradoCursado = value
				Me.SendPropertyChanged("IdGradoCursado")
				Me.OnIdGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GradoCursado", DbType:="NVarChar(100)")>  _
	Public Property GradoCursado() As String
		Get
			Return Me._GradoCursado
		End Get
		Set
			If (String.Equals(Me._GradoCursado, value) = false) Then
				Me.OnGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._GradoCursado = value
				Me.SendPropertyChanged("GradoCursado")
				Me.OnGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado_Hermanos", Storage:="_Hermanos", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado")>  _
	Public Property Hermanos() As EntitySet(Of Hermanos)
		Get
			Return Me._Hermanos
		End Get
		Set
			Me._Hermanos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.GradoCursado = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.GradoCursado = Nothing
	End Sub
	
	Private Sub attach_Hermanos(ByVal entity As Hermanos)
		Me.SendPropertyChanging
		entity.GradoCursado = Me
	End Sub
	
	Private Sub detach_Hermanos(ByVal entity As Hermanos)
		Me.SendPropertyChanging
		entity.GradoCursado = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EstadoBeneficiado")>  _
Partial Public Class EstadoBeneficiado1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdEstadoBeneficiado As Integer
	
	Private _EstadoBeneficiado As String
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEstadoBeneficiadoChanged()
    End Sub
    Partial Private Sub OnEstadoBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoBeneficiadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEstadoBeneficiado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdEstadoBeneficiado() As Integer
		Get
			Return Me._IdEstadoBeneficiado
		End Get
		Set
			If ((Me._IdEstadoBeneficiado = value)  _
						= false) Then
				Me.OnIdEstadoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdEstadoBeneficiado = value
				Me.SendPropertyChanged("IdEstadoBeneficiado")
				Me.OnIdEstadoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstadoBeneficiado", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EstadoBeneficiado() As String
		Get
			Return Me._EstadoBeneficiado
		End Get
		Set
			If (String.Equals(Me._EstadoBeneficiado, value) = false) Then
				Me.OnEstadoBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._EstadoBeneficiado = value
				Me.SendPropertyChanged("EstadoBeneficiado")
				Me.OnEstadoBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EstadoBeneficiado1_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdEstadoBeneficiado", OtherKey:="IdEstadoBeneficiado")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.EstadoBeneficiado1 = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.EstadoBeneficiado1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GradoCursado")>  _
Partial Public Class GradoCursado1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdGradoCursado As Integer
	
	Private _GradoCursado As String
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
	Private _Hermanos As EntitySet(Of Hermanos)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdGradoCursadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdGradoCursadoChanged()
    End Sub
    Partial Private Sub OnGradoCursadoChanging(value As String)
    End Sub
    Partial Private Sub OnGradoCursadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		Me._Hermanos = New EntitySet(Of Hermanos)(AddressOf Me.attach_Hermanos, AddressOf Me.detach_Hermanos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGradoCursado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdGradoCursado() As Integer
		Get
			Return Me._IdGradoCursado
		End Get
		Set
			If ((Me._IdGradoCursado = value)  _
						= false) Then
				Me.OnIdGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._IdGradoCursado = value
				Me.SendPropertyChanged("IdGradoCursado")
				Me.OnIdGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GradoCursado", DbType:="NVarChar(100)")>  _
	Public Property GradoCursado() As String
		Get
			Return Me._GradoCursado
		End Get
		Set
			If (String.Equals(Me._GradoCursado, value) = false) Then
				Me.OnGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._GradoCursado = value
				Me.SendPropertyChanged("GradoCursado")
				Me.OnGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado1_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado1_Hermanos", Storage:="_Hermanos", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado")>  _
	Public Property Hermanos() As EntitySet(Of Hermanos)
		Get
			Return Me._Hermanos
		End Get
		Set
			Me._Hermanos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.GradoCursado1 = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.GradoCursado1 = Nothing
	End Sub
	
	Private Sub attach_Hermanos(ByVal entity As Hermanos)
		Me.SendPropertyChanging
		entity.GradoCursado1 = Me
	End Sub
	
	Private Sub detach_Hermanos(ByVal entity As Hermanos)
		Me.SendPropertyChanging
		entity.GradoCursado1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HermanosBeneficiados")>  _
Partial Public Class HermanosBeneficiados
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdBeneficiadoHermano As Integer
	
	Private _IdHermano As Integer
	
	Private _IdBeneficiado As Integer
	
	Private _Beneficiado As EntityRef(Of Beneficiado)
	
	Private _Hermanos As EntityRef(Of Hermanos)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdBeneficiadoHermanoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoHermanoChanged()
    End Sub
    Partial Private Sub OnIdHermanoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdHermanoChanged()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = CType(Nothing, EntityRef(Of Beneficiado))
		Me._Hermanos = CType(Nothing, EntityRef(Of Hermanos))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiadoHermano", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdBeneficiadoHermano() As Integer
		Get
			Return Me._IdBeneficiadoHermano
		End Get
		Set
			If ((Me._IdBeneficiadoHermano = value)  _
						= false) Then
				Me.OnIdBeneficiadoHermanoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiadoHermano = value
				Me.SendPropertyChanged("IdBeneficiadoHermano")
				Me.OnIdBeneficiadoHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdHermano", DbType:="Int NOT NULL")>  _
	Public Property IdHermano() As Integer
		Get
			Return Me._IdHermano
		End Get
		Set
			If ((Me._IdHermano = value)  _
						= false) Then
				If Me._Hermanos.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdHermanoChanging(value)
				Me.SendPropertyChanging
				Me._IdHermano = value
				Me.SendPropertyChanged("IdHermano")
				Me.OnIdHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				If Me._Beneficiado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_HermanosBeneficiados", Storage:="_Beneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado", IsForeignKey:=true)>  _
	Public Property Beneficiado() As Beneficiado
		Get
			Return Me._Beneficiado.Entity
		End Get
		Set
			Dim previousValue As Beneficiado = Me._Beneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Beneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Beneficiado.Entity = Nothing
					previousValue.HermanosBeneficiados.Remove(Me)
				End If
				Me._Beneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HermanosBeneficiados.Add(Me)
					Me._IdBeneficiado = value.IdBeneficiado
				Else
					Me._IdBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Beneficiado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hermanos_HermanosBeneficiados", Storage:="_Hermanos", ThisKey:="IdHermano", OtherKey:="IdHermano", IsForeignKey:=true)>  _
	Public Property Hermanos() As Hermanos
		Get
			Return Me._Hermanos.Entity
		End Get
		Set
			Dim previousValue As Hermanos = Me._Hermanos.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Hermanos.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Hermanos.Entity = Nothing
					previousValue.HermanosBeneficiados.Remove(Me)
				End If
				Me._Hermanos.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HermanosBeneficiados.Add(Me)
					Me._IdHermano = value.IdHermano
				Else
					Me._IdHermano = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Hermanos")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Hermanos")>  _
Partial Public Class Hermanos
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdHermano As Integer
	
	Private _NombreHermano As String
	
	Private _ApellidoHermano As String
	
	Private _FechaNac As System.Nullable(Of Date)
	
	Private _IdGradoCursado As System.Nullable(Of Integer)
	
	Private _IdSexo As System.Nullable(Of Integer)
	
	Private _IdSponsorHermano As System.Nullable(Of Integer)
	
	Private _HermanosBeneficiados As EntitySet(Of HermanosBeneficiados)
	
	Private _GradoCursado As EntityRef(Of GradoCursado)
	
	Private _GradoCursado1 As EntityRef(Of GradoCursado1)
	
	Private _Sexo As EntityRef(Of Sexo)
	
	Private _SponsorHermano As EntityRef(Of SponsorHermano)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdHermanoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdHermanoChanged()
    End Sub
    Partial Private Sub OnNombreHermanoChanging(value As String)
    End Sub
    Partial Private Sub OnNombreHermanoChanged()
    End Sub
    Partial Private Sub OnApellidoHermanoChanging(value As String)
    End Sub
    Partial Private Sub OnApellidoHermanoChanged()
    End Sub
    Partial Private Sub OnFechaNacChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaNacChanged()
    End Sub
    Partial Private Sub OnIdGradoCursadoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdGradoCursadoChanged()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    Partial Private Sub OnIdSponsorHermanoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSponsorHermanoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HermanosBeneficiados = New EntitySet(Of HermanosBeneficiados)(AddressOf Me.attach_HermanosBeneficiados, AddressOf Me.detach_HermanosBeneficiados)
		Me._GradoCursado = CType(Nothing, EntityRef(Of GradoCursado))
		Me._GradoCursado1 = CType(Nothing, EntityRef(Of GradoCursado1))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		Me._SponsorHermano = CType(Nothing, EntityRef(Of SponsorHermano))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdHermano", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdHermano() As Integer
		Get
			Return Me._IdHermano
		End Get
		Set
			If ((Me._IdHermano = value)  _
						= false) Then
				Me.OnIdHermanoChanging(value)
				Me.SendPropertyChanging
				Me._IdHermano = value
				Me.SendPropertyChanged("IdHermano")
				Me.OnIdHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreHermano", DbType:="NVarChar(50)")>  _
	Public Property NombreHermano() As String
		Get
			Return Me._NombreHermano
		End Get
		Set
			If (String.Equals(Me._NombreHermano, value) = false) Then
				Me.OnNombreHermanoChanging(value)
				Me.SendPropertyChanging
				Me._NombreHermano = value
				Me.SendPropertyChanged("NombreHermano")
				Me.OnNombreHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApellidoHermano", DbType:="NVarChar(50)")>  _
	Public Property ApellidoHermano() As String
		Get
			Return Me._ApellidoHermano
		End Get
		Set
			If (String.Equals(Me._ApellidoHermano, value) = false) Then
				Me.OnApellidoHermanoChanging(value)
				Me.SendPropertyChanging
				Me._ApellidoHermano = value
				Me.SendPropertyChanged("ApellidoHermano")
				Me.OnApellidoHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaNac", DbType:="Date")>  _
	Public Property FechaNac() As System.Nullable(Of Date)
		Get
			Return Me._FechaNac
		End Get
		Set
			If (Me._FechaNac.Equals(value) = false) Then
				Me.OnFechaNacChanging(value)
				Me.SendPropertyChanging
				Me._FechaNac = value
				Me.SendPropertyChanged("FechaNac")
				Me.OnFechaNacChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdGradoCursado", DbType:="Int")>  _
	Public Property IdGradoCursado() As System.Nullable(Of Integer)
		Get
			Return Me._IdGradoCursado
		End Get
		Set
			If (Me._IdGradoCursado.Equals(value) = false) Then
				If (Me._GradoCursado.HasLoadedOrAssignedValue OrElse Me._GradoCursado1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdGradoCursadoChanging(value)
				Me.SendPropertyChanging
				Me._IdGradoCursado = value
				Me.SendPropertyChanged("IdGradoCursado")
				Me.OnIdGradoCursadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", DbType:="Int")>  _
	Public Property IdSexo() As System.Nullable(Of Integer)
		Get
			Return Me._IdSexo
		End Get
		Set
			If (Me._IdSexo.Equals(value) = false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSponsorHermano", DbType:="Int")>  _
	Public Property IdSponsorHermano() As System.Nullable(Of Integer)
		Get
			Return Me._IdSponsorHermano
		End Get
		Set
			If (Me._IdSponsorHermano.Equals(value) = false) Then
				If Me._SponsorHermano.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSponsorHermanoChanging(value)
				Me.SendPropertyChanging
				Me._IdSponsorHermano = value
				Me.SendPropertyChanged("IdSponsorHermano")
				Me.OnIdSponsorHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Hermanos_HermanosBeneficiados", Storage:="_HermanosBeneficiados", ThisKey:="IdHermano", OtherKey:="IdHermano")>  _
	Public Property HermanosBeneficiados() As EntitySet(Of HermanosBeneficiados)
		Get
			Return Me._HermanosBeneficiados
		End Get
		Set
			Me._HermanosBeneficiados.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado_Hermanos", Storage:="_GradoCursado", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado", IsForeignKey:=true)>  _
	Public Property GradoCursado() As GradoCursado
		Get
			Return Me._GradoCursado.Entity
		End Get
		Set
			Dim previousValue As GradoCursado = Me._GradoCursado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GradoCursado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GradoCursado.Entity = Nothing
					previousValue.Hermanos.Remove(Me)
				End If
				Me._GradoCursado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hermanos.Add(Me)
					Me._IdGradoCursado = value.IdGradoCursado
				Else
					Me._IdGradoCursado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("GradoCursado")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="GradoCursado1_Hermanos", Storage:="_GradoCursado1", ThisKey:="IdGradoCursado", OtherKey:="IdGradoCursado", IsForeignKey:=true)>  _
	Public Property GradoCursado1() As GradoCursado1
		Get
			Return Me._GradoCursado1.Entity
		End Get
		Set
			Dim previousValue As GradoCursado1 = Me._GradoCursado1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._GradoCursado1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._GradoCursado1.Entity = Nothing
					previousValue.Hermanos.Remove(Me)
				End If
				Me._GradoCursado1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hermanos.Add(Me)
					Me._IdGradoCursado = value.IdGradoCursado
				Else
					Me._IdGradoCursado = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("GradoCursado1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Hermanos", Storage:="_Sexo", ThisKey:="IdSexo", OtherKey:="IdSexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Hermanos.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hermanos.Add(Me)
					Me._IdSexo = value.IdSexo
				Else
					Me._IdSexo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SponsorHermano_Hermanos", Storage:="_SponsorHermano", ThisKey:="IdSponsorHermano", OtherKey:="IdSponsorHermano", IsForeignKey:=true)>  _
	Public Property SponsorHermano() As SponsorHermano
		Get
			Return Me._SponsorHermano.Entity
		End Get
		Set
			Dim previousValue As SponsorHermano = Me._SponsorHermano.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SponsorHermano.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SponsorHermano.Entity = Nothing
					previousValue.Hermanos.Remove(Me)
				End If
				Me._SponsorHermano.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Hermanos.Add(Me)
					Me._IdSponsorHermano = value.IdSponsorHermano
				Else
					Me._IdSponsorHermano = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SponsorHermano")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HermanosBeneficiados(ByVal entity As HermanosBeneficiados)
		Me.SendPropertyChanging
		entity.Hermanos = Me
	End Sub
	
	Private Sub detach_HermanosBeneficiados(ByVal entity As HermanosBeneficiados)
		Me.SendPropertyChanging
		entity.Hermanos = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Iglesia")>  _
Partial Public Class Iglesia
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdIglesia As Integer
	
	Private _NombreIglesia As String
	
	Private _NombrePastor As String
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
	Private _Tutor As EntitySet(Of Tutor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdIglesiaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIglesiaChanged()
    End Sub
    Partial Private Sub OnNombreIglesiaChanging(value As String)
    End Sub
    Partial Private Sub OnNombreIglesiaChanged()
    End Sub
    Partial Private Sub OnNombrePastorChanging(value As String)
    End Sub
    Partial Private Sub OnNombrePastorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		Me._Tutor = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutor, AddressOf Me.detach_Tutor)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdIglesia", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdIglesia() As Integer
		Get
			Return Me._IdIglesia
		End Get
		Set
			If ((Me._IdIglesia = value)  _
						= false) Then
				Me.OnIdIglesiaChanging(value)
				Me.SendPropertyChanging
				Me._IdIglesia = value
				Me.SendPropertyChanged("IdIglesia")
				Me.OnIdIglesiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreIglesia", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreIglesia() As String
		Get
			Return Me._NombreIglesia
		End Get
		Set
			If (String.Equals(Me._NombreIglesia, value) = false) Then
				Me.OnNombreIglesiaChanging(value)
				Me.SendPropertyChanging
				Me._NombreIglesia = value
				Me.SendPropertyChanged("NombreIglesia")
				Me.OnNombreIglesiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombrePastor", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property NombrePastor() As String
		Get
			Return Me._NombrePastor
		End Get
		Set
			If (String.Equals(Me._NombrePastor, value) = false) Then
				Me.OnNombrePastorChanging(value)
				Me.SendPropertyChanging
				Me._NombrePastor = value
				Me.SendPropertyChanged("NombrePastor")
				Me.OnNombrePastorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Iglesia_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdIglesia", OtherKey:="IdIglesia")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Iglesia_Tutor", Storage:="_Tutor", ThisKey:="IdIglesia", OtherKey:="IdIglesia")>  _
	Public Property Tutor() As EntitySet(Of Tutor)
		Get
			Return Me._Tutor
		End Get
		Set
			Me._Tutor.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Iglesia = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Iglesia = Nothing
	End Sub
	
	Private Sub attach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Iglesia = Me
	End Sub
	
	Private Sub detach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Iglesia = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Institucion")>  _
Partial Public Class Institucion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdInstitucion As Integer
	
	Private _Institucion As String
	
	Private _IdTipoInstitucion As Integer
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
	Private _TipoInstitucion As EntityRef(Of TipoInstitucion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdInstitucionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdInstitucionChanged()
    End Sub
    Partial Private Sub OnInstitucionChanging(value As String)
    End Sub
    Partial Private Sub OnInstitucionChanged()
    End Sub
    Partial Private Sub OnIdTipoInstitucionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoInstitucionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		Me._TipoInstitucion = CType(Nothing, EntityRef(Of TipoInstitucion))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInstitucion", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdInstitucion() As Integer
		Get
			Return Me._IdInstitucion
		End Get
		Set
			If ((Me._IdInstitucion = value)  _
						= false) Then
				Me.OnIdInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._IdInstitucion = value
				Me.SendPropertyChanged("IdInstitucion")
				Me.OnIdInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Institucion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Institucion() As String
		Get
			Return Me._Institucion
		End Get
		Set
			If (String.Equals(Me._Institucion, value) = false) Then
				Me.OnInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._Institucion = value
				Me.SendPropertyChanged("Institucion")
				Me.OnInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoInstitucion", DbType:="Int NOT NULL")>  _
	Public Property IdTipoInstitucion() As Integer
		Get
			Return Me._IdTipoInstitucion
		End Get
		Set
			If ((Me._IdTipoInstitucion = value)  _
						= false) Then
				If Me._TipoInstitucion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoInstitucion = value
				Me.SendPropertyChanged("IdTipoInstitucion")
				Me.OnIdTipoInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Institucion_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdInstitucion", OtherKey:="IdInstitucion")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoInstitucion_Institucion", Storage:="_TipoInstitucion", ThisKey:="IdTipoInstitucion", OtherKey:="IdTipoInstitucion", IsForeignKey:=true)>  _
	Public Property TipoInstitucion() As TipoInstitucion
		Get
			Return Me._TipoInstitucion.Entity
		End Get
		Set
			Dim previousValue As TipoInstitucion = Me._TipoInstitucion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoInstitucion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoInstitucion.Entity = Nothing
					previousValue.Institucion.Remove(Me)
				End If
				Me._TipoInstitucion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Institucion.Add(Me)
					Me._IdTipoInstitucion = value.IdTipoInstitucion
				Else
					Me._IdTipoInstitucion = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("TipoInstitucion")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Institucion = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Institucion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InteresesBeneficiado")>  _
Partial Public Class InteresesBeneficiado
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdIntereseBeneficiado As Integer
	
	Private _GustaComerBeneficiado As String
	
	Private _GustaJugarBeneficiado As String
	
	Private _GustaTenerBeneficiado As String
	
	Private _IdBeneficiado As Integer
	
	Private _Beneficiado As EntityRef(Of Beneficiado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdIntereseBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIntereseBeneficiadoChanged()
    End Sub
    Partial Private Sub OnGustaComerBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnGustaComerBeneficiadoChanged()
    End Sub
    Partial Private Sub OnGustaJugarBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnGustaJugarBeneficiadoChanged()
    End Sub
    Partial Private Sub OnGustaTenerBeneficiadoChanging(value As String)
    End Sub
    Partial Private Sub OnGustaTenerBeneficiadoChanged()
    End Sub
    Partial Private Sub OnIdBeneficiadoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdBeneficiadoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = CType(Nothing, EntityRef(Of Beneficiado))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdIntereseBeneficiado", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdIntereseBeneficiado() As Integer
		Get
			Return Me._IdIntereseBeneficiado
		End Get
		Set
			If ((Me._IdIntereseBeneficiado = value)  _
						= false) Then
				Me.OnIdIntereseBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdIntereseBeneficiado = value
				Me.SendPropertyChanged("IdIntereseBeneficiado")
				Me.OnIdIntereseBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GustaComerBeneficiado", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property GustaComerBeneficiado() As String
		Get
			Return Me._GustaComerBeneficiado
		End Get
		Set
			If (String.Equals(Me._GustaComerBeneficiado, value) = false) Then
				Me.OnGustaComerBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._GustaComerBeneficiado = value
				Me.SendPropertyChanged("GustaComerBeneficiado")
				Me.OnGustaComerBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GustaJugarBeneficiado", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property GustaJugarBeneficiado() As String
		Get
			Return Me._GustaJugarBeneficiado
		End Get
		Set
			If (String.Equals(Me._GustaJugarBeneficiado, value) = false) Then
				Me.OnGustaJugarBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._GustaJugarBeneficiado = value
				Me.SendPropertyChanged("GustaJugarBeneficiado")
				Me.OnGustaJugarBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GustaTenerBeneficiado", DbType:="NVarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property GustaTenerBeneficiado() As String
		Get
			Return Me._GustaTenerBeneficiado
		End Get
		Set
			If (String.Equals(Me._GustaTenerBeneficiado, value) = false) Then
				Me.OnGustaTenerBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._GustaTenerBeneficiado = value
				Me.SendPropertyChanged("GustaTenerBeneficiado")
				Me.OnGustaTenerBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdBeneficiado", DbType:="Int NOT NULL")>  _
	Public Property IdBeneficiado() As Integer
		Get
			Return Me._IdBeneficiado
		End Get
		Set
			If ((Me._IdBeneficiado = value)  _
						= false) Then
				If Me._Beneficiado.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdBeneficiadoChanging(value)
				Me.SendPropertyChanging
				Me._IdBeneficiado = value
				Me.SendPropertyChanged("IdBeneficiado")
				Me.OnIdBeneficiadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Beneficiado_InteresesBeneficiado", Storage:="_Beneficiado", ThisKey:="IdBeneficiado", OtherKey:="IdBeneficiado", IsForeignKey:=true)>  _
	Public Property Beneficiado() As Beneficiado
		Get
			Return Me._Beneficiado.Entity
		End Get
		Set
			Dim previousValue As Beneficiado = Me._Beneficiado.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Beneficiado.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Beneficiado.Entity = Nothing
					previousValue.InteresesBeneficiado.Remove(Me)
				End If
				Me._Beneficiado.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InteresesBeneficiado.Add(Me)
					Me._IdBeneficiado = value.IdBeneficiado
				Else
					Me._IdBeneficiado = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Beneficiado")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Interno")>  _
Partial Public Class Interno
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdInterno As Integer
	
	Private _Interno As String
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdInternoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdInternoChanged()
    End Sub
    Partial Private Sub OnInternoChanging(value As String)
    End Sub
    Partial Private Sub OnInternoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdInterno", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdInterno() As Integer
		Get
			Return Me._IdInterno
		End Get
		Set
			If ((Me._IdInterno = value)  _
						= false) Then
				Me.OnIdInternoChanging(value)
				Me.SendPropertyChanging
				Me._IdInterno = value
				Me.SendPropertyChanged("IdInterno")
				Me.OnIdInternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Interno", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Interno() As String
		Get
			Return Me._Interno
		End Get
		Set
			If (String.Equals(Me._Interno, value) = false) Then
				Me.OnInternoChanging(value)
				Me.SendPropertyChanging
				Me._Interno = value
				Me.SendPropertyChanged("Interno")
				Me.OnInternoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Interno_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdInterno", OtherKey:="IdInterno")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Interno = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Interno = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Lugar")>  _
Partial Public Class Lugar
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdLugar As Integer
	
	Private _Lugar As String
	
	Private _IdPais As Integer
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
	Private _Tutor As EntitySet(Of Tutor)
	
	Private _Pais As EntityRef(Of Pais)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdLugarChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLugarChanged()
    End Sub
    Partial Private Sub OnLugarChanging(value As String)
    End Sub
    Partial Private Sub OnLugarChanged()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		Me._Tutor = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutor, AddressOf Me.detach_Tutor)
		Me._Pais = CType(Nothing, EntityRef(Of Pais))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLugar", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdLugar() As Integer
		Get
			Return Me._IdLugar
		End Get
		Set
			If ((Me._IdLugar = value)  _
						= false) Then
				Me.OnIdLugarChanging(value)
				Me.SendPropertyChanging
				Me._IdLugar = value
				Me.SendPropertyChanged("IdLugar")
				Me.OnIdLugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lugar", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Lugar() As String
		Get
			Return Me._Lugar
		End Get
		Set
			If (String.Equals(Me._Lugar, value) = false) Then
				Me.OnLugarChanging(value)
				Me.SendPropertyChanging
				Me._Lugar = value
				Me.SendPropertyChanged("Lugar")
				Me.OnLugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", DbType:="Int NOT NULL")>  _
	Public Property IdPais() As Integer
		Get
			Return Me._IdPais
		End Get
		Set
			If ((Me._IdPais = value)  _
						= false) Then
				If Me._Pais.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lugar_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdLugar", OtherKey:="IdLugar")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lugar_Tutor", Storage:="_Tutor", ThisKey:="IdLugar", OtherKey:="IdLugar")>  _
	Public Property Tutor() As EntitySet(Of Tutor)
		Get
			Return Me._Tutor
		End Get
		Set
			Me._Tutor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Lugar", Storage:="_Pais", ThisKey:="IdPais", OtherKey:="IdPais", IsForeignKey:=true)>  _
	Public Property Pais() As Pais
		Get
			Return Me._Pais.Entity
		End Get
		Set
			Dim previousValue As Pais = Me._Pais.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pais.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pais.Entity = Nothing
					previousValue.Lugar.Remove(Me)
				End If
				Me._Pais.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Lugar.Add(Me)
					Me._IdPais = value.IdPais
				Else
					Me._IdPais = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Pais")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Lugar = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Lugar = Nothing
	End Sub
	
	Private Sub attach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Lugar = Me
	End Sub
	
	Private Sub detach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Lugar = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OficioProfesion")>  _
Partial Public Class OficioProfesion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdOficioProfesion As Integer
	
	Private _OficioProfesion As String
	
	Private _Tutor As EntitySet(Of Tutor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdOficioProfesionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdOficioProfesionChanged()
    End Sub
    Partial Private Sub OnOficioProfesionChanging(value As String)
    End Sub
    Partial Private Sub OnOficioProfesionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tutor = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutor, AddressOf Me.detach_Tutor)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdOficioProfesion", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdOficioProfesion() As Integer
		Get
			Return Me._IdOficioProfesion
		End Get
		Set
			If ((Me._IdOficioProfesion = value)  _
						= false) Then
				Me.OnIdOficioProfesionChanging(value)
				Me.SendPropertyChanging
				Me._IdOficioProfesion = value
				Me.SendPropertyChanged("IdOficioProfesion")
				Me.OnIdOficioProfesionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OficioProfesion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property OficioProfesion() As String
		Get
			Return Me._OficioProfesion
		End Get
		Set
			If (String.Equals(Me._OficioProfesion, value) = false) Then
				Me.OnOficioProfesionChanging(value)
				Me.SendPropertyChanging
				Me._OficioProfesion = value
				Me.SendPropertyChanged("OficioProfesion")
				Me.OnOficioProfesionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OficioProfesion_Tutor", Storage:="_Tutor", ThisKey:="IdOficioProfesion", OtherKey:="IdOficioProfesion")>  _
	Public Property Tutor() As EntitySet(Of Tutor)
		Get
			Return Me._Tutor
		End Get
		Set
			Me._Tutor.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.OficioProfesion = Me
	End Sub
	
	Private Sub detach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.OficioProfesion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Ofrenda")>  _
Partial Public Class Ofrenda
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdOfrenda As Integer
	
	Private _FechaOfrenda As System.Nullable(Of Date)
	
	Private _DescripcionOfrenda As String
	
	Private _IdTipoOfrenda As System.Nullable(Of Integer)
	
	Private _IdAdopcion As System.Nullable(Of Integer)
	
	Private _Adopcion As EntityRef(Of Adopcion)
	
	Private _TipoOfrenda As EntityRef(Of TipoOfrenda)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdOfrendaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdOfrendaChanged()
    End Sub
    Partial Private Sub OnFechaOfrendaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFechaOfrendaChanged()
    End Sub
    Partial Private Sub OnDescripcionOfrendaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionOfrendaChanged()
    End Sub
    Partial Private Sub OnIdTipoOfrendaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdTipoOfrendaChanged()
    End Sub
    Partial Private Sub OnIdAdopcionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdAdopcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = CType(Nothing, EntityRef(Of Adopcion))
		Me._TipoOfrenda = CType(Nothing, EntityRef(Of TipoOfrenda))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdOfrenda", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdOfrenda() As Integer
		Get
			Return Me._IdOfrenda
		End Get
		Set
			If ((Me._IdOfrenda = value)  _
						= false) Then
				Me.OnIdOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._IdOfrenda = value
				Me.SendPropertyChanged("IdOfrenda")
				Me.OnIdOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaOfrenda", DbType:="Date")>  _
	Public Property FechaOfrenda() As System.Nullable(Of Date)
		Get
			Return Me._FechaOfrenda
		End Get
		Set
			If (Me._FechaOfrenda.Equals(value) = false) Then
				Me.OnFechaOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._FechaOfrenda = value
				Me.SendPropertyChanged("FechaOfrenda")
				Me.OnFechaOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripcionOfrenda", DbType:="NVarChar(200)")>  _
	Public Property DescripcionOfrenda() As String
		Get
			Return Me._DescripcionOfrenda
		End Get
		Set
			If (String.Equals(Me._DescripcionOfrenda, value) = false) Then
				Me.OnDescripcionOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._DescripcionOfrenda = value
				Me.SendPropertyChanged("DescripcionOfrenda")
				Me.OnDescripcionOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoOfrenda", DbType:="Int")>  _
	Public Property IdTipoOfrenda() As System.Nullable(Of Integer)
		Get
			Return Me._IdTipoOfrenda
		End Get
		Set
			If (Me._IdTipoOfrenda.Equals(value) = false) Then
				If Me._TipoOfrenda.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoOfrenda = value
				Me.SendPropertyChanged("IdTipoOfrenda")
				Me.OnIdTipoOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdAdopcion", DbType:="Int")>  _
	Public Property IdAdopcion() As System.Nullable(Of Integer)
		Get
			Return Me._IdAdopcion
		End Get
		Set
			If (Me._IdAdopcion.Equals(value) = false) Then
				If Me._Adopcion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdAdopcion = value
				Me.SendPropertyChanged("IdAdopcion")
				Me.OnIdAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Adopcion_Ofrenda", Storage:="_Adopcion", ThisKey:="IdAdopcion", OtherKey:="IdAdopcion", IsForeignKey:=true)>  _
	Public Property Adopcion() As Adopcion
		Get
			Return Me._Adopcion.Entity
		End Get
		Set
			Dim previousValue As Adopcion = Me._Adopcion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Adopcion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Adopcion.Entity = Nothing
					previousValue.Ofrenda.Remove(Me)
				End If
				Me._Adopcion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ofrenda.Add(Me)
					Me._IdAdopcion = value.IdAdopcion
				Else
					Me._IdAdopcion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Adopcion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoOfrenda_Ofrenda", Storage:="_TipoOfrenda", ThisKey:="IdTipoOfrenda", OtherKey:="IdTipoOfrenda", IsForeignKey:=true)>  _
	Public Property TipoOfrenda() As TipoOfrenda
		Get
			Return Me._TipoOfrenda.Entity
		End Get
		Set
			Dim previousValue As TipoOfrenda = Me._TipoOfrenda.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoOfrenda.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoOfrenda.Entity = Nothing
					previousValue.Ofrenda.Remove(Me)
				End If
				Me._TipoOfrenda.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Ofrenda.Add(Me)
					Me._IdTipoOfrenda = value.IdTipoOfrenda
				Else
					Me._IdTipoOfrenda = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TipoOfrenda")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Pais")>  _
Partial Public Class Pais
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdPais As Integer
	
	Private _Pais As String
	
	Private _Lugar As EntitySet(Of Lugar)
	
	Private _Sponsor As EntitySet(Of Sponsor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Lugar = New EntitySet(Of Lugar)(AddressOf Me.attach_Lugar, AddressOf Me.detach_Lugar)
		Me._Sponsor = New EntitySet(Of Sponsor)(AddressOf Me.attach_Sponsor, AddressOf Me.detach_Sponsor)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdPais() As Integer
		Get
			Return Me._IdPais
		End Get
		Set
			If ((Me._IdPais = value)  _
						= false) Then
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Lugar", Storage:="_Lugar", ThisKey:="IdPais", OtherKey:="IdPais")>  _
	Public Property Lugar() As EntitySet(Of Lugar)
		Get
			Return Me._Lugar
		End Get
		Set
			Me._Lugar.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Sponsor", Storage:="_Sponsor", ThisKey:="IdPais", OtherKey:="IdPais")>  _
	Public Property Sponsor() As EntitySet(Of Sponsor)
		Get
			Return Me._Sponsor
		End Get
		Set
			Me._Sponsor.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Lugar(ByVal entity As Lugar)
		Me.SendPropertyChanging
		entity.Pais = Me
	End Sub
	
	Private Sub detach_Lugar(ByVal entity As Lugar)
		Me.SendPropertyChanging
		entity.Pais = Nothing
	End Sub
	
	Private Sub attach_Sponsor(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Pais = Me
	End Sub
	
	Private Sub detach_Sponsor(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Pais = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Parentesco")>  _
Partial Public Class Parentesco
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdParentesco As Integer
	
	Private _Parentesco As String
	
	Private _Tutor As EntitySet(Of Tutor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdParentescoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdParentescoChanged()
    End Sub
    Partial Private Sub OnParentescoChanging(value As String)
    End Sub
    Partial Private Sub OnParentescoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tutor = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutor, AddressOf Me.detach_Tutor)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdParentesco", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdParentesco() As Integer
		Get
			Return Me._IdParentesco
		End Get
		Set
			If ((Me._IdParentesco = value)  _
						= false) Then
				Me.OnIdParentescoChanging(value)
				Me.SendPropertyChanging
				Me._IdParentesco = value
				Me.SendPropertyChanged("IdParentesco")
				Me.OnIdParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Parentesco", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Parentesco() As String
		Get
			Return Me._Parentesco
		End Get
		Set
			If (String.Equals(Me._Parentesco, value) = false) Then
				Me.OnParentescoChanging(value)
				Me.SendPropertyChanging
				Me._Parentesco = value
				Me.SendPropertyChanged("Parentesco")
				Me.OnParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parentesco_Tutor", Storage:="_Tutor", ThisKey:="IdParentesco", OtherKey:="IdParentesco")>  _
	Public Property Tutor() As EntitySet(Of Tutor)
		Get
			Return Me._Tutor
		End Get
		Set
			Me._Tutor.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Parentesco = Me
	End Sub
	
	Private Sub detach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Parentesco = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sexo")>  _
Partial Public Class Sexo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdSexo As Integer
	
	Private _Sexo As String
	
	Private _Beneficiado As EntitySet(Of Beneficiado)
	
	Private _Hermanos As EntitySet(Of Hermanos)
	
	Private _Sponsor As EntitySet(Of Sponsor)
	
	Private _Tutor As EntitySet(Of Tutor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    Partial Private Sub OnSexoChanging(value As String)
    End Sub
    Partial Private Sub OnSexoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Beneficiado = New EntitySet(Of Beneficiado)(AddressOf Me.attach_Beneficiado, AddressOf Me.detach_Beneficiado)
		Me._Hermanos = New EntitySet(Of Hermanos)(AddressOf Me.attach_Hermanos, AddressOf Me.detach_Hermanos)
		Me._Sponsor = New EntitySet(Of Sponsor)(AddressOf Me.attach_Sponsor, AddressOf Me.detach_Sponsor)
		Me._Tutor = New EntitySet(Of Tutor)(AddressOf Me.attach_Tutor, AddressOf Me.detach_Tutor)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdSexo() As Integer
		Get
			Return Me._IdSexo
		End Get
		Set
			If ((Me._IdSexo = value)  _
						= false) Then
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sexo", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Sexo() As String
		Get
			Return Me._Sexo
		End Get
		Set
			If (String.Equals(Me._Sexo, value) = false) Then
				Me.OnSexoChanging(value)
				Me.SendPropertyChanging
				Me._Sexo = value
				Me.SendPropertyChanged("Sexo")
				Me.OnSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Beneficiado", Storage:="_Beneficiado", ThisKey:="IdSexo", OtherKey:="IdSexo")>  _
	Public Property Beneficiado() As EntitySet(Of Beneficiado)
		Get
			Return Me._Beneficiado
		End Get
		Set
			Me._Beneficiado.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Hermanos", Storage:="_Hermanos", ThisKey:="IdSexo", OtherKey:="IdSexo")>  _
	Public Property Hermanos() As EntitySet(Of Hermanos)
		Get
			Return Me._Hermanos
		End Get
		Set
			Me._Hermanos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Sponsor", Storage:="_Sponsor", ThisKey:="IdSexo", OtherKey:="IdSexo")>  _
	Public Property Sponsor() As EntitySet(Of Sponsor)
		Get
			Return Me._Sponsor
		End Get
		Set
			Me._Sponsor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Tutor", Storage:="_Tutor", ThisKey:="IdSexo", OtherKey:="IdSexo")>  _
	Public Property Tutor() As EntitySet(Of Tutor)
		Get
			Return Me._Tutor
		End Get
		Set
			Me._Tutor.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Beneficiado(ByVal entity As Beneficiado)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
	
	Private Sub attach_Hermanos(ByVal entity As Hermanos)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Hermanos(ByVal entity As Hermanos)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
	
	Private Sub attach_Sponsor(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Sponsor(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
	
	Private Sub attach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Sexo = Me
	End Sub
	
	Private Sub detach_Tutor(ByVal entity As Tutor)
		Me.SendPropertyChanging
		entity.Sexo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sponsor")>  _
Partial Public Class Sponsor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdSponsor As Integer
	
	Private _NombreCompletoSponsor As String
	
	Private _Direccion As String
	
	Private _CorreoElectronico As String
	
	Private _IdSexo As System.Nullable(Of Integer)
	
	Private _IdPais As Integer
	
	Private _IdTipoSponsor As System.Nullable(Of Integer)
	
	Private _Adopcion As EntitySet(Of Adopcion)
	
	Private _Pais As EntityRef(Of Pais)
	
	Private _Sexo As EntityRef(Of Sexo)
	
	Private _TipoSponsor As EntityRef(Of TipoSponsor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdSponsorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSponsorChanged()
    End Sub
    Partial Private Sub OnNombreCompletoSponsorChanging(value As String)
    End Sub
    Partial Private Sub OnNombreCompletoSponsorChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnCorreoElectronicoChanging(value As String)
    End Sub
    Partial Private Sub OnCorreoElectronicoChanged()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    Partial Private Sub OnIdPaisChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPaisChanged()
    End Sub
    Partial Private Sub OnIdTipoSponsorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdTipoSponsorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = New EntitySet(Of Adopcion)(AddressOf Me.attach_Adopcion, AddressOf Me.detach_Adopcion)
		Me._Pais = CType(Nothing, EntityRef(Of Pais))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		Me._TipoSponsor = CType(Nothing, EntityRef(Of TipoSponsor))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSponsor", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IdSponsor() As Integer
		Get
			Return Me._IdSponsor
		End Get
		Set
			If ((Me._IdSponsor = value)  _
						= false) Then
				Me.OnIdSponsorChanging(value)
				Me.SendPropertyChanging
				Me._IdSponsor = value
				Me.SendPropertyChanged("IdSponsor")
				Me.OnIdSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreCompletoSponsor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreCompletoSponsor() As String
		Get
			Return Me._NombreCompletoSponsor
		End Get
		Set
			If (String.Equals(Me._NombreCompletoSponsor, value) = false) Then
				Me.OnNombreCompletoSponsorChanging(value)
				Me.SendPropertyChanging
				Me._NombreCompletoSponsor = value
				Me.SendPropertyChanged("NombreCompletoSponsor")
				Me.OnNombreCompletoSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CorreoElectronico", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CorreoElectronico() As String
		Get
			Return Me._CorreoElectronico
		End Get
		Set
			If (String.Equals(Me._CorreoElectronico, value) = false) Then
				Me.OnCorreoElectronicoChanging(value)
				Me.SendPropertyChanging
				Me._CorreoElectronico = value
				Me.SendPropertyChanged("CorreoElectronico")
				Me.OnCorreoElectronicoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", DbType:="Int")>  _
	Public Property IdSexo() As System.Nullable(Of Integer)
		Get
			Return Me._IdSexo
		End Get
		Set
			If (Me._IdSexo.Equals(value) = false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPais", DbType:="Int NOT NULL")>  _
	Public Property IdPais() As Integer
		Get
			Return Me._IdPais
		End Get
		Set
			If ((Me._IdPais = value)  _
						= false) Then
				If Me._Pais.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPaisChanging(value)
				Me.SendPropertyChanging
				Me._IdPais = value
				Me.SendPropertyChanged("IdPais")
				Me.OnIdPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoSponsor", DbType:="Int")>  _
	Public Property IdTipoSponsor() As System.Nullable(Of Integer)
		Get
			Return Me._IdTipoSponsor
		End Get
		Set
			If (Me._IdTipoSponsor.Equals(value) = false) Then
				If Me._TipoSponsor.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdTipoSponsorChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoSponsor = value
				Me.SendPropertyChanged("IdTipoSponsor")
				Me.OnIdTipoSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sponsor_Adopcion", Storage:="_Adopcion", ThisKey:="IdSponsor", OtherKey:="IdSponsor")>  _
	Public Property Adopcion() As EntitySet(Of Adopcion)
		Get
			Return Me._Adopcion
		End Get
		Set
			Me._Adopcion.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pais_Sponsor", Storage:="_Pais", ThisKey:="IdPais", OtherKey:="IdPais", IsForeignKey:=true)>  _
	Public Property Pais() As Pais
		Get
			Return Me._Pais.Entity
		End Get
		Set
			Dim previousValue As Pais = Me._Pais.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pais.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pais.Entity = Nothing
					previousValue.Sponsor.Remove(Me)
				End If
				Me._Pais.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sponsor.Add(Me)
					Me._IdPais = value.IdPais
				Else
					Me._IdPais = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Pais")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Sponsor", Storage:="_Sexo", ThisKey:="IdSexo", OtherKey:="IdSexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Sponsor.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sponsor.Add(Me)
					Me._IdSexo = value.IdSexo
				Else
					Me._IdSexo = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoSponsor_Sponsor", Storage:="_TipoSponsor", ThisKey:="IdTipoSponsor", OtherKey:="IdTipoSponsor", IsForeignKey:=true)>  _
	Public Property TipoSponsor() As TipoSponsor
		Get
			Return Me._TipoSponsor.Entity
		End Get
		Set
			Dim previousValue As TipoSponsor = Me._TipoSponsor.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TipoSponsor.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TipoSponsor.Entity = Nothing
					previousValue.Sponsor.Remove(Me)
				End If
				Me._TipoSponsor.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Sponsor.Add(Me)
					Me._IdTipoSponsor = value.IdTipoSponsor
				Else
					Me._IdTipoSponsor = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("TipoSponsor")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Adopcion(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Sponsor = Me
	End Sub
	
	Private Sub detach_Adopcion(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.Sponsor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SponsorHermano")>  _
Partial Public Class SponsorHermano
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdSponsorHermano As Integer
	
	Private _SponsorHermano As String
	
	Private _Hermanos As EntitySet(Of Hermanos)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdSponsorHermanoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSponsorHermanoChanged()
    End Sub
    Partial Private Sub OnSponsorHermanoChanging(value As String)
    End Sub
    Partial Private Sub OnSponsorHermanoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Hermanos = New EntitySet(Of Hermanos)(AddressOf Me.attach_Hermanos, AddressOf Me.detach_Hermanos)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSponsorHermano", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdSponsorHermano() As Integer
		Get
			Return Me._IdSponsorHermano
		End Get
		Set
			If ((Me._IdSponsorHermano = value)  _
						= false) Then
				Me.OnIdSponsorHermanoChanging(value)
				Me.SendPropertyChanging
				Me._IdSponsorHermano = value
				Me.SendPropertyChanged("IdSponsorHermano")
				Me.OnIdSponsorHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SponsorHermano", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SponsorHermano() As String
		Get
			Return Me._SponsorHermano
		End Get
		Set
			If (String.Equals(Me._SponsorHermano, value) = false) Then
				Me.OnSponsorHermanoChanging(value)
				Me.SendPropertyChanging
				Me._SponsorHermano = value
				Me.SendPropertyChanged("SponsorHermano")
				Me.OnSponsorHermanoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SponsorHermano_Hermanos", Storage:="_Hermanos", ThisKey:="IdSponsorHermano", OtherKey:="IdSponsorHermano")>  _
	Public Property Hermanos() As EntitySet(Of Hermanos)
		Get
			Return Me._Hermanos
		End Get
		Set
			Me._Hermanos.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Hermanos(ByVal entity As Hermanos)
		Me.SendPropertyChanging
		entity.SponsorHermano = Me
	End Sub
	
	Private Sub detach_Hermanos(ByVal entity As Hermanos)
		Me.SendPropertyChanging
		entity.SponsorHermano = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoCarta")>  _
Partial Public Class TipoCarta
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoCarta As Integer
	
	Private _TipoCarta As String
	
	Private _Cartas As EntitySet(Of Cartas)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoCartaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCartaChanged()
    End Sub
    Partial Private Sub OnTipoCartaChanging(value As String)
    End Sub
    Partial Private Sub OnTipoCartaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cartas = New EntitySet(Of Cartas)(AddressOf Me.attach_Cartas, AddressOf Me.detach_Cartas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCarta", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTipoCarta() As Integer
		Get
			Return Me._IdTipoCarta
		End Get
		Set
			If ((Me._IdTipoCarta = value)  _
						= false) Then
				Me.OnIdTipoCartaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCarta = value
				Me.SendPropertyChanged("IdTipoCarta")
				Me.OnIdTipoCartaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoCarta", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoCarta() As String
		Get
			Return Me._TipoCarta
		End Get
		Set
			If (String.Equals(Me._TipoCarta, value) = false) Then
				Me.OnTipoCartaChanging(value)
				Me.SendPropertyChanging
				Me._TipoCarta = value
				Me.SendPropertyChanged("TipoCarta")
				Me.OnTipoCartaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCarta_Cartas", Storage:="_Cartas", ThisKey:="IdTipoCarta", OtherKey:="IdTipoCarta")>  _
	Public Property Cartas() As EntitySet(Of Cartas)
		Get
			Return Me._Cartas
		End Get
		Set
			Me._Cartas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cartas(ByVal entity As Cartas)
		Me.SendPropertyChanging
		entity.TipoCarta = Me
	End Sub
	
	Private Sub detach_Cartas(ByVal entity As Cartas)
		Me.SendPropertyChanging
		entity.TipoCarta = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoCartaEnvio")>  _
Partial Public Class TipoCartaEnvio
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoCartaEnvio As Integer
	
	Private _TipoCartaEnvio As String
	
	Private _Cartas As EntitySet(Of Cartas)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoCartaEnvioChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCartaEnvioChanged()
    End Sub
    Partial Private Sub OnTipoCartaEnvioChanging(value As String)
    End Sub
    Partial Private Sub OnTipoCartaEnvioChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cartas = New EntitySet(Of Cartas)(AddressOf Me.attach_Cartas, AddressOf Me.detach_Cartas)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCartaEnvio", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTipoCartaEnvio() As Integer
		Get
			Return Me._IdTipoCartaEnvio
		End Get
		Set
			If ((Me._IdTipoCartaEnvio = value)  _
						= false) Then
				Me.OnIdTipoCartaEnvioChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCartaEnvio = value
				Me.SendPropertyChanged("IdTipoCartaEnvio")
				Me.OnIdTipoCartaEnvioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoCartaEnvio", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoCartaEnvio() As String
		Get
			Return Me._TipoCartaEnvio
		End Get
		Set
			If (String.Equals(Me._TipoCartaEnvio, value) = false) Then
				Me.OnTipoCartaEnvioChanging(value)
				Me.SendPropertyChanging
				Me._TipoCartaEnvio = value
				Me.SendPropertyChanged("TipoCartaEnvio")
				Me.OnTipoCartaEnvioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCartaEnvio_Cartas", Storage:="_Cartas", ThisKey:="IdTipoCartaEnvio", OtherKey:="IdTipoCartaEnvio")>  _
	Public Property Cartas() As EntitySet(Of Cartas)
		Get
			Return Me._Cartas
		End Get
		Set
			Me._Cartas.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cartas(ByVal entity As Cartas)
		Me.SendPropertyChanging
		entity.TipoCartaEnvio = Me
	End Sub
	
	Private Sub detach_Cartas(ByVal entity As Cartas)
		Me.SendPropertyChanging
		entity.TipoCartaEnvio = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoCasa")>  _
Partial Public Class TipoCasa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoCasa As Integer
	
	Private _TipoCasa As String
	
	Private _CasaBeneficiado As EntitySet(Of CasaBeneficiado)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoCasaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoCasaChanged()
    End Sub
    Partial Private Sub OnTipoCasaChanging(value As String)
    End Sub
    Partial Private Sub OnTipoCasaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CasaBeneficiado = New EntitySet(Of CasaBeneficiado)(AddressOf Me.attach_CasaBeneficiado, AddressOf Me.detach_CasaBeneficiado)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoCasa", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTipoCasa() As Integer
		Get
			Return Me._IdTipoCasa
		End Get
		Set
			If ((Me._IdTipoCasa = value)  _
						= false) Then
				Me.OnIdTipoCasaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoCasa = value
				Me.SendPropertyChanged("IdTipoCasa")
				Me.OnIdTipoCasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoCasa", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoCasa() As String
		Get
			Return Me._TipoCasa
		End Get
		Set
			If (String.Equals(Me._TipoCasa, value) = false) Then
				Me.OnTipoCasaChanging(value)
				Me.SendPropertyChanging
				Me._TipoCasa = value
				Me.SendPropertyChanged("TipoCasa")
				Me.OnTipoCasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoCasa_CasaBeneficiado", Storage:="_CasaBeneficiado", ThisKey:="IdTipoCasa", OtherKey:="IdTipoCasa")>  _
	Public Property CasaBeneficiado() As EntitySet(Of CasaBeneficiado)
		Get
			Return Me._CasaBeneficiado
		End Get
		Set
			Me._CasaBeneficiado.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CasaBeneficiado(ByVal entity As CasaBeneficiado)
		Me.SendPropertyChanging
		entity.TipoCasa = Me
	End Sub
	
	Private Sub detach_CasaBeneficiado(ByVal entity As CasaBeneficiado)
		Me.SendPropertyChanging
		entity.TipoCasa = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoInstitucion")>  _
Partial Public Class TipoInstitucion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoInstitucion As Integer
	
	Private _TipoInstitucion As String
	
	Private _Institucion As EntitySet(Of Institucion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoInstitucionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoInstitucionChanged()
    End Sub
    Partial Private Sub OnTipoInstitucionChanging(value As String)
    End Sub
    Partial Private Sub OnTipoInstitucionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Institucion = New EntitySet(Of Institucion)(AddressOf Me.attach_Institucion, AddressOf Me.detach_Institucion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoInstitucion", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTipoInstitucion() As Integer
		Get
			Return Me._IdTipoInstitucion
		End Get
		Set
			If ((Me._IdTipoInstitucion = value)  _
						= false) Then
				Me.OnIdTipoInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoInstitucion = value
				Me.SendPropertyChanged("IdTipoInstitucion")
				Me.OnIdTipoInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoInstitucion", DbType:="NVarChar(100)")>  _
	Public Property TipoInstitucion() As String
		Get
			Return Me._TipoInstitucion
		End Get
		Set
			If (String.Equals(Me._TipoInstitucion, value) = false) Then
				Me.OnTipoInstitucionChanging(value)
				Me.SendPropertyChanging
				Me._TipoInstitucion = value
				Me.SendPropertyChanged("TipoInstitucion")
				Me.OnTipoInstitucionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoInstitucion_Institucion", Storage:="_Institucion", ThisKey:="IdTipoInstitucion", OtherKey:="IdTipoInstitucion")>  _
	Public Property Institucion() As EntitySet(Of Institucion)
		Get
			Return Me._Institucion
		End Get
		Set
			Me._Institucion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Institucion(ByVal entity As Institucion)
		Me.SendPropertyChanging
		entity.TipoInstitucion = Me
	End Sub
	
	Private Sub detach_Institucion(ByVal entity As Institucion)
		Me.SendPropertyChanging
		entity.TipoInstitucion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoOfrenda")>  _
Partial Public Class TipoOfrenda
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoOfrenda As Integer
	
	Private _TipoOfrenda As String
	
	Private _Ofrenda As EntitySet(Of Ofrenda)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoOfrendaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoOfrendaChanged()
    End Sub
    Partial Private Sub OnTipoOfrendaChanging(value As String)
    End Sub
    Partial Private Sub OnTipoOfrendaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Ofrenda = New EntitySet(Of Ofrenda)(AddressOf Me.attach_Ofrenda, AddressOf Me.detach_Ofrenda)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoOfrenda", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTipoOfrenda() As Integer
		Get
			Return Me._IdTipoOfrenda
		End Get
		Set
			If ((Me._IdTipoOfrenda = value)  _
						= false) Then
				Me.OnIdTipoOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoOfrenda = value
				Me.SendPropertyChanged("IdTipoOfrenda")
				Me.OnIdTipoOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoOfrenda", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoOfrenda() As String
		Get
			Return Me._TipoOfrenda
		End Get
		Set
			If (String.Equals(Me._TipoOfrenda, value) = false) Then
				Me.OnTipoOfrendaChanging(value)
				Me.SendPropertyChanging
				Me._TipoOfrenda = value
				Me.SendPropertyChanged("TipoOfrenda")
				Me.OnTipoOfrendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoOfrenda_Ofrenda", Storage:="_Ofrenda", ThisKey:="IdTipoOfrenda", OtherKey:="IdTipoOfrenda")>  _
	Public Property Ofrenda() As EntitySet(Of Ofrenda)
		Get
			Return Me._Ofrenda
		End Get
		Set
			Me._Ofrenda.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Ofrenda(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.TipoOfrenda = Me
	End Sub
	
	Private Sub detach_Ofrenda(ByVal entity As Ofrenda)
		Me.SendPropertyChanging
		entity.TipoOfrenda = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoPagoAdopcion")>  _
Partial Public Class TipoPagoAdopcion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoPagoAdopcion As Integer
	
	Private _TipoPagoAdopcion As String
	
	Private _Adopcion As EntitySet(Of Adopcion)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoPagoAdopcionChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoPagoAdopcionChanged()
    End Sub
    Partial Private Sub OnTipoPagoAdopcionChanging(value As String)
    End Sub
    Partial Private Sub OnTipoPagoAdopcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Adopcion = New EntitySet(Of Adopcion)(AddressOf Me.attach_Adopcion, AddressOf Me.detach_Adopcion)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoPagoAdopcion", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTipoPagoAdopcion() As Integer
		Get
			Return Me._IdTipoPagoAdopcion
		End Get
		Set
			If ((Me._IdTipoPagoAdopcion = value)  _
						= false) Then
				Me.OnIdTipoPagoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoPagoAdopcion = value
				Me.SendPropertyChanged("IdTipoPagoAdopcion")
				Me.OnIdTipoPagoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoPagoAdopcion", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoPagoAdopcion() As String
		Get
			Return Me._TipoPagoAdopcion
		End Get
		Set
			If (String.Equals(Me._TipoPagoAdopcion, value) = false) Then
				Me.OnTipoPagoAdopcionChanging(value)
				Me.SendPropertyChanging
				Me._TipoPagoAdopcion = value
				Me.SendPropertyChanged("TipoPagoAdopcion")
				Me.OnTipoPagoAdopcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoPagoAdopcion_Adopcion", Storage:="_Adopcion", ThisKey:="IdTipoPagoAdopcion", OtherKey:="IdTipoPagoAdopcion")>  _
	Public Property Adopcion() As EntitySet(Of Adopcion)
		Get
			Return Me._Adopcion
		End Get
		Set
			Me._Adopcion.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Adopcion(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.TipoPagoAdopcion = Me
	End Sub
	
	Private Sub detach_Adopcion(ByVal entity As Adopcion)
		Me.SendPropertyChanging
		entity.TipoPagoAdopcion = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TipoSponsor")>  _
Partial Public Class TipoSponsor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTipoSponsor As Integer
	
	Private _TipoSponsor As String
	
	Private _Sponsor As EntitySet(Of Sponsor)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTipoSponsorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTipoSponsorChanged()
    End Sub
    Partial Private Sub OnTipoSponsorChanging(value As String)
    End Sub
    Partial Private Sub OnTipoSponsorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Sponsor = New EntitySet(Of Sponsor)(AddressOf Me.attach_Sponsor, AddressOf Me.detach_Sponsor)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTipoSponsor", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTipoSponsor() As Integer
		Get
			Return Me._IdTipoSponsor
		End Get
		Set
			If ((Me._IdTipoSponsor = value)  _
						= false) Then
				Me.OnIdTipoSponsorChanging(value)
				Me.SendPropertyChanging
				Me._IdTipoSponsor = value
				Me.SendPropertyChanged("IdTipoSponsor")
				Me.OnIdTipoSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoSponsor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoSponsor() As String
		Get
			Return Me._TipoSponsor
		End Get
		Set
			If (String.Equals(Me._TipoSponsor, value) = false) Then
				Me.OnTipoSponsorChanging(value)
				Me.SendPropertyChanging
				Me._TipoSponsor = value
				Me.SendPropertyChanged("TipoSponsor")
				Me.OnTipoSponsorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TipoSponsor_Sponsor", Storage:="_Sponsor", ThisKey:="IdTipoSponsor", OtherKey:="IdTipoSponsor")>  _
	Public Property Sponsor() As EntitySet(Of Sponsor)
		Get
			Return Me._Sponsor
		End Get
		Set
			Me._Sponsor.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Sponsor(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.TipoSponsor = Me
	End Sub
	
	Private Sub detach_Sponsor(ByVal entity As Sponsor)
		Me.SendPropertyChanging
		entity.TipoSponsor = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Tutor")>  _
Partial Public Class Tutor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdTutor As Integer
	
	Private _NombreTutor As String
	
	Private _ApellidoTutor As String
	
	Private _Telefono As String
	
	Private _Direccion As String
	
	Private _FechaNac As Date
	
	Private _SalarioDia As System.Nullable(Of Decimal)
	
	Private _IdOficioProfesion As System.Nullable(Of Integer)
	
	Private _IdSexo As Integer
	
	Private _IdIglesia As System.Nullable(Of Integer)
	
	Private _IdLugar As Integer
	
	Private _IdParentesco As Integer
	
	Private _Celular As String
	
	Private _BeneficiadoTutor As EntitySet(Of BeneficiadoTutor)
	
	Private _Iglesia As EntityRef(Of Iglesia)
	
	Private _Lugar As EntityRef(Of Lugar)
	
	Private _OficioProfesion As EntityRef(Of OficioProfesion)
	
	Private _Parentesco As EntityRef(Of Parentesco)
	
	Private _Sexo As EntityRef(Of Sexo)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdTutorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTutorChanged()
    End Sub
    Partial Private Sub OnNombreTutorChanging(value As String)
    End Sub
    Partial Private Sub OnNombreTutorChanged()
    End Sub
    Partial Private Sub OnApellidoTutorChanging(value As String)
    End Sub
    Partial Private Sub OnApellidoTutorChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnDireccionChanging(value As String)
    End Sub
    Partial Private Sub OnDireccionChanged()
    End Sub
    Partial Private Sub OnFechaNacChanging(value As Date)
    End Sub
    Partial Private Sub OnFechaNacChanged()
    End Sub
    Partial Private Sub OnSalarioDiaChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSalarioDiaChanged()
    End Sub
    Partial Private Sub OnIdOficioProfesionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdOficioProfesionChanged()
    End Sub
    Partial Private Sub OnIdSexoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSexoChanged()
    End Sub
    Partial Private Sub OnIdIglesiaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdIglesiaChanged()
    End Sub
    Partial Private Sub OnIdLugarChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdLugarChanged()
    End Sub
    Partial Private Sub OnIdParentescoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdParentescoChanged()
    End Sub
    Partial Private Sub OnCelularChanging(value As String)
    End Sub
    Partial Private Sub OnCelularChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._BeneficiadoTutor = New EntitySet(Of BeneficiadoTutor)(AddressOf Me.attach_BeneficiadoTutor, AddressOf Me.detach_BeneficiadoTutor)
		Me._Iglesia = CType(Nothing, EntityRef(Of Iglesia))
		Me._Lugar = CType(Nothing, EntityRef(Of Lugar))
		Me._OficioProfesion = CType(Nothing, EntityRef(Of OficioProfesion))
		Me._Parentesco = CType(Nothing, EntityRef(Of Parentesco))
		Me._Sexo = CType(Nothing, EntityRef(Of Sexo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdTutor", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdTutor() As Integer
		Get
			Return Me._IdTutor
		End Get
		Set
			If ((Me._IdTutor = value)  _
						= false) Then
				Me.OnIdTutorChanging(value)
				Me.SendPropertyChanging
				Me._IdTutor = value
				Me.SendPropertyChanged("IdTutor")
				Me.OnIdTutorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NombreTutor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property NombreTutor() As String
		Get
			Return Me._NombreTutor
		End Get
		Set
			If (String.Equals(Me._NombreTutor, value) = false) Then
				Me.OnNombreTutorChanging(value)
				Me.SendPropertyChanging
				Me._NombreTutor = value
				Me.SendPropertyChanged("NombreTutor")
				Me.OnNombreTutorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApellidoTutor", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ApellidoTutor() As String
		Get
			Return Me._ApellidoTutor
		End Get
		Set
			If (String.Equals(Me._ApellidoTutor, value) = false) Then
				Me.OnApellidoTutorChanging(value)
				Me.SendPropertyChanging
				Me._ApellidoTutor = value
				Me.SendPropertyChanged("ApellidoTutor")
				Me.OnApellidoTutorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="NVarChar(50)")>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Direccion", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Direccion() As String
		Get
			Return Me._Direccion
		End Get
		Set
			If (String.Equals(Me._Direccion, value) = false) Then
				Me.OnDireccionChanging(value)
				Me.SendPropertyChanging
				Me._Direccion = value
				Me.SendPropertyChanged("Direccion")
				Me.OnDireccionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FechaNac", DbType:="Date NOT NULL")>  _
	Public Property FechaNac() As Date
		Get
			Return Me._FechaNac
		End Get
		Set
			If ((Me._FechaNac = value)  _
						= false) Then
				Me.OnFechaNacChanging(value)
				Me.SendPropertyChanging
				Me._FechaNac = value
				Me.SendPropertyChanged("FechaNac")
				Me.OnFechaNacChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalarioDia", DbType:="Money")>  _
	Public Property SalarioDia() As System.Nullable(Of Decimal)
		Get
			Return Me._SalarioDia
		End Get
		Set
			If (Me._SalarioDia.Equals(value) = false) Then
				Me.OnSalarioDiaChanging(value)
				Me.SendPropertyChanging
				Me._SalarioDia = value
				Me.SendPropertyChanged("SalarioDia")
				Me.OnSalarioDiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdOficioProfesion", DbType:="Int")>  _
	Public Property IdOficioProfesion() As System.Nullable(Of Integer)
		Get
			Return Me._IdOficioProfesion
		End Get
		Set
			If (Me._IdOficioProfesion.Equals(value) = false) Then
				If Me._OficioProfesion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdOficioProfesionChanging(value)
				Me.SendPropertyChanging
				Me._IdOficioProfesion = value
				Me.SendPropertyChanged("IdOficioProfesion")
				Me.OnIdOficioProfesionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdSexo", DbType:="Int NOT NULL")>  _
	Public Property IdSexo() As Integer
		Get
			Return Me._IdSexo
		End Get
		Set
			If ((Me._IdSexo = value)  _
						= false) Then
				If Me._Sexo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdSexoChanging(value)
				Me.SendPropertyChanging
				Me._IdSexo = value
				Me.SendPropertyChanged("IdSexo")
				Me.OnIdSexoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdIglesia", DbType:="Int")>  _
	Public Property IdIglesia() As System.Nullable(Of Integer)
		Get
			Return Me._IdIglesia
		End Get
		Set
			If (Me._IdIglesia.Equals(value) = false) Then
				If Me._Iglesia.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdIglesiaChanging(value)
				Me.SendPropertyChanging
				Me._IdIglesia = value
				Me.SendPropertyChanged("IdIglesia")
				Me.OnIdIglesiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdLugar", DbType:="Int NOT NULL")>  _
	Public Property IdLugar() As Integer
		Get
			Return Me._IdLugar
		End Get
		Set
			If ((Me._IdLugar = value)  _
						= false) Then
				If Me._Lugar.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdLugarChanging(value)
				Me.SendPropertyChanging
				Me._IdLugar = value
				Me.SendPropertyChanged("IdLugar")
				Me.OnIdLugarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdParentesco", DbType:="Int NOT NULL")>  _
	Public Property IdParentesco() As Integer
		Get
			Return Me._IdParentesco
		End Get
		Set
			If ((Me._IdParentesco = value)  _
						= false) Then
				If Me._Parentesco.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdParentescoChanging(value)
				Me.SendPropertyChanging
				Me._IdParentesco = value
				Me.SendPropertyChanged("IdParentesco")
				Me.OnIdParentescoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Celular", DbType:="NVarChar(50)")>  _
	Public Property Celular() As String
		Get
			Return Me._Celular
		End Get
		Set
			If (String.Equals(Me._Celular, value) = false) Then
				Me.OnCelularChanging(value)
				Me.SendPropertyChanging
				Me._Celular = value
				Me.SendPropertyChanged("Celular")
				Me.OnCelularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Tutor_BeneficiadoTutor", Storage:="_BeneficiadoTutor", ThisKey:="IdTutor", OtherKey:="IdTutor")>  _
	Public Property BeneficiadoTutor() As EntitySet(Of BeneficiadoTutor)
		Get
			Return Me._BeneficiadoTutor
		End Get
		Set
			Me._BeneficiadoTutor.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Iglesia_Tutor", Storage:="_Iglesia", ThisKey:="IdIglesia", OtherKey:="IdIglesia", IsForeignKey:=true)>  _
	Public Property Iglesia() As Iglesia
		Get
			Return Me._Iglesia.Entity
		End Get
		Set
			Dim previousValue As Iglesia = Me._Iglesia.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Iglesia.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Iglesia.Entity = Nothing
					previousValue.Tutor.Remove(Me)
				End If
				Me._Iglesia.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutor.Add(Me)
					Me._IdIglesia = value.IdIglesia
				Else
					Me._IdIglesia = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Iglesia")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Lugar_Tutor", Storage:="_Lugar", ThisKey:="IdLugar", OtherKey:="IdLugar", IsForeignKey:=true)>  _
	Public Property Lugar() As Lugar
		Get
			Return Me._Lugar.Entity
		End Get
		Set
			Dim previousValue As Lugar = Me._Lugar.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Lugar.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Lugar.Entity = Nothing
					previousValue.Tutor.Remove(Me)
				End If
				Me._Lugar.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutor.Add(Me)
					Me._IdLugar = value.IdLugar
				Else
					Me._IdLugar = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Lugar")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="OficioProfesion_Tutor", Storage:="_OficioProfesion", ThisKey:="IdOficioProfesion", OtherKey:="IdOficioProfesion", IsForeignKey:=true)>  _
	Public Property OficioProfesion() As OficioProfesion
		Get
			Return Me._OficioProfesion.Entity
		End Get
		Set
			Dim previousValue As OficioProfesion = Me._OficioProfesion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._OficioProfesion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._OficioProfesion.Entity = Nothing
					previousValue.Tutor.Remove(Me)
				End If
				Me._OficioProfesion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutor.Add(Me)
					Me._IdOficioProfesion = value.IdOficioProfesion
				Else
					Me._IdOficioProfesion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("OficioProfesion")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Parentesco_Tutor", Storage:="_Parentesco", ThisKey:="IdParentesco", OtherKey:="IdParentesco", IsForeignKey:=true)>  _
	Public Property Parentesco() As Parentesco
		Get
			Return Me._Parentesco.Entity
		End Get
		Set
			Dim previousValue As Parentesco = Me._Parentesco.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Parentesco.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Parentesco.Entity = Nothing
					previousValue.Tutor.Remove(Me)
				End If
				Me._Parentesco.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutor.Add(Me)
					Me._IdParentesco = value.IdParentesco
				Else
					Me._IdParentesco = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Parentesco")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Sexo_Tutor", Storage:="_Sexo", ThisKey:="IdSexo", OtherKey:="IdSexo", IsForeignKey:=true)>  _
	Public Property Sexo() As Sexo
		Get
			Return Me._Sexo.Entity
		End Get
		Set
			Dim previousValue As Sexo = Me._Sexo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Sexo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Sexo.Entity = Nothing
					previousValue.Tutor.Remove(Me)
				End If
				Me._Sexo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Tutor.Add(Me)
					Me._IdSexo = value.IdSexo
				Else
					Me._IdSexo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Sexo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_BeneficiadoTutor(ByVal entity As BeneficiadoTutor)
		Me.SendPropertyChanging
		entity.Tutor = Me
	End Sub
	
	Private Sub detach_BeneficiadoTutor(ByVal entity As BeneficiadoTutor)
		Me.SendPropertyChanging
		entity.Tutor = Nothing
	End Sub
End Class
